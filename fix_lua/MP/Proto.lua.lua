local Proto = {
  Schema = "syntax = \"proto3\"\n\n\n\n\n//玩家排行信息\nmessage GameRankActorInfo {\n    int64 uin                   = 1;\n    int32 level                 = 2;    //等级\n    int32 faceId                = 3;    //头像ID\n    string name                 = 4;    //名字\n    int64 guildUid              = 5;    //所在公会 uid\n    string guildName            = 6;    //所在公会名字\n    int32   rank                = 7;    //排行\n    int64 score                 = 8;    //积分\n    int64 stamp                 = 9;    //上榜时间\n    ActorHead actorHead         = 10;   //头像信息\n}\n\n\nmessage ActivityBaseInfo {\n    int32 activityId    = 1;    //活动ID\n    int64 startStamp    = 2;    //开始时间\n    int64 endStamp      = 3;    //结束时间\n}\n\n//签到活动\nmessage ActivitySignIn {\n    ActivityBaseInfo baseInfo   = 1;\n    int32 curDay                = 2;\n    bool    isTodaySignIn       = 3;\n}\n//关卡活动\nmessage ActivityStage {\n    ActivityBaseInfo baseInfo       = 1;\n    map<int32,int64> normalChapter  = 2;    //解锁的普通章节\n    map<int32,int64> creamChapter   = 3;    //解锁的素材章节\n    map<int32,int64> bossChapter    = 4;    //解锁的boss章节\n    repeated int32  finishStages    = 5;    //完成的关卡\n    map<int32,int32>    boughtItem  = 6;    //已经购买的商品 格子ID->购买数量\n    repeated TaskInfo taskList      = 7;    //当前任务列表\n    int32 curDay                    = 8;    //签到数据\n    repeated   int32 signDay        = 9;    //签到数据\n    int32 creamCount                = 10;   //素材本挑战次数\n\n}\n\n//搜索活动\nmessage ActivitySearch {\n    ActivityBaseInfo baseInfo   = 1;\n    bool isTodaySearch          = 2;\n    repeated ItemTuple dropRewards      = 3;    //掉落奖励\n    repeated ItemTuple showRewards      = 4;    //显示奖励\n    repeated ItemTuple specialRewards   = 5;    //额外奖励\n    repeated int32  choosePos           = 6;    //选择位置\n    int32 totalCount                    = 7;\n    int32 curCount                      = 8;\n}\n\n//回归活动\nmessage ActivityReturn {\n    ActivityBaseInfo baseInfo = 1;\n    int32 returnDay           = 2;  //已回归天数\n    int32 signDay             = 3;  //已签到的天数\n    int32 activityCheckInType = 4;  //使用的签到奖励类型\n    string picUrl             = 5;  //活动图片 url\n}\n//转盘（多轮）活动\nmessage TurnPoolRoundData {\n    int32 round                 = 1;\n    int32 turnNum               = 2;    //抽取次数\n    repeated TurnPoolData pools = 3;\n    int64 unlockStamp           = 4;    //解锁时间\n}\n//转盘活动\nmessage TurnPoolData {\n    int32 poolId = 1;\n    int32 count = 2;\n    int32 prob  = 3;\n}\n\n//回归活动\nmessage ActivityReturnPro {\n    ActivityBaseInfo baseInfo       = 1;\n    int32 freeReward                = 2;\n    int32 returnDay                 = 3;  //已回归天数\n    int32 signDay                   = 4;  //已签到的天数\n    repeated DropMulti dailyDrop    = 5;  //每日掉落增益次数\n    map<int32,int32>    boughtItem  = 6;  //已经购买的商品 格子ID->购买数量\n    repeated TaskInfo taskList      = 7;  //当前任务列表\n    int32 costItemCount             = 8;  \n\n}\n//掉落活动\nmessage ActivityDropMulti {\n    ActivityBaseInfo baseInfo       = 1;\n    repeated DropMulti dailyDrop    = 2;  //每日掉落增益次数\n}\nmessage ActivityTurnTable {\n    ActivityBaseInfo baseInfo = 1;\n    int32 turnNum               = 2;    //抽取次数\n    repeated TurnPoolData pools = 3;\n    int32 freeGet               = 4;    //免费次数是否领取\n}\n\n\nmessage ActivityTurnTableRound {\n    ActivityBaseInfo baseInfo                = 1;\n    repeated TurnPoolRoundData rounds        = 2;\n    int32 curRound                           = 3;\n    int32 freeGet                            = 4;    //免费次数是否领取\n    int32 totalRechargeAmount                = 5;    //总充值金额\n    int32 fetchedRechargeLevel               = 6;    //已领取的充值奖励档位\n    bool dailyRechargeReward                 = 7;    //是否可以领取每日奖励\n    int32  resetCount                        = 8;    //重置次数\n}\n\nmessage GetActivityAllReq {\n    \n}\n\nmessage GetActivityAllRsp {\n    repeated ActivitySignIn signInAct   = 1;    //签到活动\n    repeated ActivityStage  stageAct    = 2;    //关卡活动\n    repeated ActivitySearch searchAct   = 3;    //搜索活动\n    ActivityReturn returnAct            = 4;    //回归活动\n    repeated ActivityTurnTable turnAct  = 5;    //转盘活动\n    ActivityTurnTableRound roundAct     = 6;    //转盘（多轮）活动(累充抽奖)\n    ActivityReturnPro returnProAct      = 7;    //回归活动(pro)\n    repeated ActivityDropMulti dropAct  = 8;    //掉落活动\n}\n\n//领取累充抽奖的累充奖励\nmessage FetchAccumRechargeRewardReq {\n    int32 activityId    = 1;    //活动 id\n    int32 rechargeLevel = 2;    //0: 表示领取每日奖励 奖励档位发最高可领取的档位(base_activity_recharge.csv 表的 recharge_level 字段)\n}\n\nmessage FetchAccumRechargeRewardRsp {\n    repeated ItemTuple rewards = 1;\n    int32 fetchedRechargeLevel = 2;    //已领取的充值奖励档位\n    bool dailyRechargeReward   = 3;    //是否可以领取每日奖励\n}\n\n//活动签到\nmessage ActivitySignInReq {\n    int32 activityId = 1;\n}\n\nmessage ActivitySignInRsp {\n    repeated ItemTuple rewards      = 1;\n    ActivitySignIn signInAct        = 2;\n}\n\n//关卡签到\nmessage ActivityStageSignInReq {\n    int32 activityId = 1;\n    int32 signDay    = 2;\n}\n\nmessage ActivityStageSignInRsp {\n    int32 activityId                = 1;\n    repeated DropTuple rewards      = 2;\n    int32 curDay                    = 3;    //签到数据\n    repeated   int32 signDay        = 4;    //签到数据\n}\n//活动商店购买\nmessage ActivityStageShopBuyReq {\n    int32 gridId        = 1;\n    int32 buyCount      = 2;\n}\n\n//小游戏\nmessage ActivityGetMiniGameReq {\n    int32 activityId    = 1;\n    int32 gameId        = 2;\n    \n}\n\nmessage ActivityGetMiniGameRsp {\n    repeated TaskInfo taskList              = 1;    //当前任务列表\n    repeated MiniGameRecord records         = 2;    //小游戏记录\n    int32 miniScore                         = 3;    //小游戏累积积分\n    int32 miniDailyStat                     = 4;    //小游戏每日奖励 enum TASK_STATE\n    int32 miniDailyScore                    = 5;    //小游戏每日累积积分\n    int32 miniHighScore                     = 6;    //小游戏最高积分\n    int32  miniDailyNum                     = 7;    //小游戏每日游戏次数\n    map<int32,int32> extraCount             = 8;    //小游戏额外数据\n    int32 gameId                            = 9;\n}\n\nmessage ActivityPlayMiniGameReq {\n    int32 activityId                = 1;\n    int32 gameId                    = 2;\n    MiniGameRecord records          = 3;    //小游戏记录\n    int32 playSec                   = 4;    //游戏时间\n    int32 extStat                   = 5;    //1:时间校验\n}\n\nmessage ActivityPlayMiniGameRsp { \n    \n}\n\nmessage ActivityRewardMiniGameReq {\n    int32 activityId                = 1;   \n    int32 gameId                    = 2;\n    int32 subId                     = 3;\n}\n\nmessage ActivityRewardMiniGameRsp { \n    int32 gameId                    = 1;\n    repeated DropTuple rewards      = 2;\n    int32 miniDailyStat             = 3;    //小游戏每日奖励 enum TASK_STATE\n    map<int32,int32> extraCount     = 4;    //小游戏额外数据\n}\n\nmessage ActivityStageShopBuyRsp {\n    repeated DropTuple rewards      = 1;\n    map<int32,int32>    boughtItem  = 2;    //已经购买的商品 格子ID->购买数量\n}\n\n//活动任务领奖\nmessage ActivityStageTaskRewardReq {\n    int32 activityId            = 1;\n    int64 taskUid               = 2;\n}\n\nmessage ActivityStageTaskRewardRsp {\n    repeated DropTuple rewards      = 1;\n    repeated TaskInfo changeTask    = 2;    //改变的任务\n}\n\n//搜索活动领奖\nmessage ActivitySearchReq {\n    int32 activityId                    = 1;\n    repeated int32  choosePos           = 2;    //选择位置\n}\n\nmessage ActivitySearchRsp {\n    repeated ItemTuple dropRewards      = 1;    //掉落奖励\n    repeated ItemTuple showRewards      = 2;    //显示奖励\n    repeated ItemTuple specialRewards   = 3;    //额外奖励\n    int32 totalCount                    = 4;\n    int32 curCount                      = 5;\n}\n//获取所有banner\nmessage GetAllBannerReq {\n}\n\nmessage GetAllBannerRsp {\n    repeated int32 idList = 1;\n}\n\n//通过活动 id 获取活动信息\nmessage GetOpActivityByIdReq {\n    repeated int32 activityIds = 1;\n}\n\nmessage GetOpActivityByIdRsp {\n    repeated OpActivity infos = 1;\n}\n\n//回归活动签到\nmessage ActivityReturnSignInReq {\n    int32 signDay = 1;\n}\n\nmessage ActivityReturnSignInRsp {\n    repeated ItemTuple rewards = 1;\n    ActivityReturn returnAct   = 2;\n}\n\n//活动回顾\nmessage ActivityReviewInfo {\n    int64 uin = 1;\n    repeated int32 unlockList       = 2;\n    map<int32,int32>    boughtItem  = 3;    //已经购买的商品 格子ID->购买数量\n}\n\n//获取所有回归活动\nmessage GetActivityReviewInfoReq {\n\n}\n\nmessage GetActivityReviewInfoRsp {\n    repeated int32 unlockList       = 1;\n    map<int32,int32>    boughtItem  = 2;    //已经购买的商品 格子ID->购买数量\n}\n//回归活动解锁\nmessage ActivityReviewUnlockReq {\n    int32 actId = 1;\n}\n\nmessage ActivityReviewUnlockRsp {\n    repeated int32 unlockList    = 1;\n}\n//回归活动商店购买\nmessage ActivityReviewShopBuyReq {\n    int32 gridId        = 1;\n    int32 buyCount      = 2;\n}\n\nmessage ActivityReviewShopBuyRsp {\n    repeated DropTuple rewards      = 1;\n    map<int32,int32>    boughtItem  = 2;    //已经购买的商品 格子ID->购买数量\n}\n\n//转盘抽奖\nmessage ActivityDoTurnTableReq {\n    int32 activityId                    = 1;    \n}\nmessage ActivityDoTurnTableRsp {\n    int32 poolId                            = 1;    //掉落Id\n    repeated DropTuple rewards              = 2;    //\n    int32 turnNum                           = 3;    //抽取次数\n    repeated TurnPoolData pools             = 4;\n}\n//转盘（多轮）抽奖\nmessage ActivityDoTurnTableRoundReq {\n    int32 activityId                    = 1;    \n    int32 roundId                       = 2;\n}\nmessage ActivityDoTurnTableRoundRsp {\n    int32 poolId                            = 1;    //掉落Id\n    repeated DropTuple rewards              = 2;    //\n    TurnPoolRoundData   roundData           = 3;\n}\n\n//领取免费资源\nmessage ActivityTurnTableGetFreeReq {\n    int32 activityId                    = 1;    \n}\n\nmessage ActivityTurnTableGetFreeRsp {\n    repeated DropTuple rewards         = 1;    // \n}\n\n//获取活动游戏排行榜\nmessage ActivityGetGameTopRankReq {\n    int32 activityId        = 1;    \n    int32 gameId            = 2;\n}\n\nmessage ActivityGetGameTopRankRsp {\n    int32       rank                        = 1;    //自己排名\n    int32 score                             = 2;    //自己分数\n    repeated    GameRankActorInfo rankList  = 3;\n}\n//回归活动pro 签到\nmessage ActivityReturnProSigninReq {\n    int32 activityId = 1;\n    int32 signType = 2; //0 免费签到 1 7日签到\n}\n\nmessage ActivityReturnProSigninRsp {\n    repeated DropTuple rewards      = 1;\n    int32 activityId                = 2;  //\n    int32 freeReward                = 3;\n    int32 signDay                   = 4;  //已签到的天数\n}\n\n\n//回归活动pro 购买\nmessage ActivityReturnProShopBuyReq {\n    int32 activityId            = 1;\n    int32 gridId                = 2;\n    int32 buyCount              = 3;\n}\n\nmessage ActivityReturnProShopBuyRsp {\n    int32 activityId                = 1;  //\n    repeated DropTuple rewards      = 2;\n    map<int32,int32>    boughtItem  = 3;    //已经购买的商品 格子ID->购买数量\n    int32 costItemCount             = 4; \n}\n\n//活动任务领奖\nmessage ActivityReturnProTaskRewardReq {\n    int32 activityId            = 1;\n    int64 taskUid               = 2;\n}\n\nmessage ActivityReturnProTaskRewardRsp {\n    int32 activityId                = 1;  //\n    repeated DropTuple rewards      = 2;\n    repeated TaskInfo changeTask    = 3;    //改变的任务\n}\n\n//获取关卡掉落增益\nmessage ActivityGetStageDropMultiReq {\n    int32 stageId = 1;\n}\n\nmessage ActivityGetStageDropMultiRsp {\n    int32 stageId = 1;\n    repeated DropMulti dropMultis    = 2;  //掉落增益次数\n}\n\n\n\n\nmessage CreateActorReq {\n    string name         = 1;\n    string deviceId     = 2;    //设备 id\n    string channel      = 3;    //渠道\n    int32 platform      = 4;    //sp_common.proto   enum PLATFORM_TYPE\n    string loginIP       = 5;    //用户 ip 地址\n}\n\nmessage CreateActorRsp {\n    ActorInfo actor = 1;\n}\n\n\nmessage GetActorInfoReq {\n\n}\n\nmessage GetActorInfoRsp {\n    ActorInfo actor = 1;\n}\n\nmessage GetActorMirrorInfoReq {\n\n}\n\nmessage GetActorMirrorInfoRsp {\n    ActorMirrorInfo info = 1;\n}\n\nmessage ActorInfoUpdateNotify {\n    ActorInfo actor = 1;\n}\n\n//玩家修改名字\nmessage ChangeNameReq {\n    string name = 1;\n}\n\nmessage ChangeNameRsp {\n    ActorInfo actor = 1;\n}\n\nmessage OfflineReq {\n}\n\nmessage OfflineRsp {\n}\n\nmessage HeartBeatReq {\n    string plat = 1;\n}\n\nmessage HeartBeatRsp {\n    int64 maxResId  = 1;    //当前最大客户端资源id,用于控制客户端在游戏内弹出去更新资源\n    int64 sysStamp  = 2;    //系统时间\n    int32 resVersion= 3;    //客户端资源版本号\n    bool debug      = 4;    //是否开启 debug 日志开关\n    int32 loginDays = 5;    //登录天数\n    int64 nextRreshDaySec = 6;  //下次天更新的绝对秒数\n}\n\nmessage HeartBeatNotify {\n    string gtwId    = 1;\n}\n\nmessage GetActorSignInReq {\n}\n\nmessage GetActorSignInRsp {\n    int32 signStat      = 1;\n    bool isTodaySignIn  = 2;\n    int32 allDay        = 3;    //总签到天\n}\n\nmessage ActorSignInReq  {\n}\n\nmessage ActorSignInRsp  {\n    int32 signStat      = 1;\n    bool isTodaySignIn  = 2;\n    ItemTuple reward    = 3;\n    int32 allDay        = 4;    //总签到天\n}\n\nmessage ActorGmReq {\n    string command          = 1;    //gm指令\n    repeated string params  = 2;    //参数\n}\n\nmessage ActorGmRsp {\n    string ret          = 1;\n    string failCmd      = 2;    //执行失败的命令\n}\n\nmessage GetUnlockedFeaturesReq {\n}\n\nmessage GetUnlockedFeaturesRsp {\n    repeated int32 featureIds = 1;\n}\n\n//获取已获得的 emoji\nmessage GetEmojiReq {\n\n}\n\nmessage GetEmojiRsp {\n    repeated string latestEmojiLst = 1;\n}\n\n//客户端上报最近使用的表情\nmessage ReportLatestEmojiReq {\n    repeated string latestEmojiLst  = 1;\n}\n\nmessage ReportLatestEmojiRsp {\n\n}\n\n//获取玩家信息面板详细信息\nmessage GetSelfDetailInfoReq {\n}\n\nmessage GetSelfDetailInfoRsp {\n    int32 currentStage          = 1;    //剧情副本进度: 当前关卡\n    int32 winCount              = 2;    //战斗胜利次数\n    int32 killMobCount          = 3;    //击退魔物数量\n    bool hideResource           = 4;    //是否对别人隐藏物资显示\n    int32 totalCardCount        = 5;    //卡牌总量\n    repeated int32 displayCards = 6;    //展示的卡牌\n    bool inGuild                = 7;    //是否已加入公会\n    string guildName            = 8;    //所在公会名字\n    string city                 = 9;    //所在城市\n}\n\n//查看别人的详细信息\nmessage GetOtherDetailInfoReq {\n    int64 targetUin = 1;\n}\n\nmessage GetOtherDetailInfoRsp {\n    ActorMirrorInfo info        = 1;\n    int32 relationState         = 2;   //sp_datamodel.proto    enum RELATION_STATE\n    string remark               = 3;   //给对方设置的备注\n\n    int32 currentStage          = 4;    //剧情副本进度: 当前关卡\n    int32 winCount              = 5;    //战斗胜利次数\n    int32 killMobCount          = 6;    //击退魔物数量\n    bool hideResource           = 7;    //是否对别人隐藏物资显示\n    repeated CardInfo displayCards = 8;    //展示的卡牌\n    bool inGuild                = 9;    //是否已加入公会\n    string guildName            = 10;    //所在公会名字\n    string city                 = 11;   //所在城市\n\n    repeated ItemInfo resources = 12;   //物资信息\n    int32 loginDays             = 13;   //登录天数\n    bool blockMe                = 14;   //对方是否屏蔽了自己\n}\n\n//设置个人信息面板展示的卡牌\nmessage SetProfileDisplayCardsReq {\n    repeated int32 cardIds      = 1;\n}\n\nmessage SetProfileDisplayCardsRsp {\n}\n\n//设置个人信息面板物资展示开关\nmessage SetProfileShowResourceReq {\n    bool hideResource  = 1; //是否隐藏物资显示\n}\n\nmessage SetProfileShowResourceRsp {\n}\n\n\n\n//故事\nmessage GetStoryListReq {\n    int32 newStory = 1;\n}\n\nmessage GetStoryListRsp {\n    repeated int32 storyList       = 1;\n    repeated int32 staredSoundLst  = 2;    //收藏的音乐\n    repeated int32 soundPlaylist   = 3;    //播放列表\n}\n\n//收藏音乐\nmessage OperateStarSoundReq {\n    int32 soundId = 1;\n    int32 opType  = 2;  //1: 收藏  2: 取消收藏\n}\n\nmessage OperateStarSoundRsp {\n    repeated int32 staredSoundLst = 1;\n}\n\n//操作音乐播放列表\nmessage OperateSoundPlayListReq {\n    int32 soundId = 1;\n    int32 opType  = 2;  //1: 加入播放列表  2: 移除播放列表   3: 上移   4: 下移\n}\n\nmessage OperateSoundPlayListRsp {\n    repeated int32 soundPlaylist = 1;\n}\n\nmessage SaveSettingsReq {\n    string settings = 1;\n\n    //type: 3战斗帧率设置、4界面帧率设置、5公告开启设置、7音效开启设置、8音乐开启设置、9配音开启设置、10战斗状态开启设置、11血条开启设置、12普通伤害开启设置\n    //value: type-3: 高帧为1, 低帧为0. type-4: 高帧为1, 低帧为0. type5-12: 关闭为0, 开启为1\n    int32 opType    = 2;\n    string value    = 3;\n}\n\nmessage SaveSettingsRsp {\n}\n\nmessage ChangeFaceReq {\n    int32 faceId = 1;\n}\n\nmessage ChangeFaceRsp {\n    int32 faceId = 1;\n}\n\nmessage ChangeHeadReq {\n    ActorHead head = 1;\n}\n\nmessage ChangeHeadRsp {\n    ActorHead head = 1;\n}\n\n//上报完成新手引导\nmessage FinishGuideReq {\n    int32 guideId   = 1;\n    int32 step      = 2;\n}\n\nmessage FinishGuideRsp {\n    int32 guideId   = 1;\n    int32 step      = 2;\n}\n\n//获取新手引导进度\nmessage GetGuideProgressReq {\n}\n\nmessage GetGuideProgressRsp {\n    repeated GuideInfo finishedGuides = 1;  //已完成的新手引导\n}\n\n//检查功能是否开启\nmessage CheckFeatureOpenReq {\n    repeated int32 featureIds = 1;\n}\n\nmessage CheckFeatureOpenRsp {\n    repeated int32 featureIds       = 1;    //请求检查的 featureId\n    repeated int32 openFeatureIds   = 2;    //已开启的 featureId\n}\n\n//请求完成剧情\nmessage FinishPlotReq {\n    int32 plotId            = 1;\n    repeated int32 stepIds  = 2;\n    bool skip               = 3;\n}\n\nmessage FinishPlotRsp {\n    int32 plotId                = 1;\n    repeated int32 stepIds      = 2;\n    bool skip                   = 3;\n    repeated ItemTuple rewards  = 4;    //奖励\n}\n\n//获取所有已完成的剧情 id\nmessage GetAllFinishedPlotsReq {\n}\n\nmessage GetAllFinishedPlotsRsp {\n    repeated int32 plotIdLst    = 1;\n}\n\n//体力恢复信息\nmessage EnergyRecoverInfo {\n    int32 curEnergy             = 1;    //当前体力\n    int32 energyRecoverLimit    = 2;    //体力恢复上限\n    int32 curBuyTimes           = 3;    //当前已购买次数\n    int32 maxBuyTimes           = 4;    //购买次数上限\n    int64 nextRecoverStamp      = 5;    //下次恢复时间\n    int64 recoverDoneStamp      = 6;    //全部恢复时间\n}\n\n//获取体力恢复信息\nmessage GetEnergyRecoverInfoReq {\n}\n\nmessage GetEnergyRecoverInfoRsp {\n    EnergyRecoverInfo info  = 1;\n}\n\n//修改密码\nmessage ChangePasswordReq {\n    string accountId    = 1;    //游戏内改密码可以不传该值\n    string oldPassword  = 2;    //旧密码\n    string newPassword  = 3;    //新密码\n}\n\nmessage ChangePasswordRsp {\n}\n\n//更新公会操作状态\nmessage UpdateGuildOperateStateReq {\n    string operate = 1;\n}\n\nmessage UpdateGuildOperateStateRsp {\n}\n\n//获取公会操作状态\nmessage GetGuildOperateStateReq {\n}\n\nmessage GetGuildOperateStateRsp {\n    bool createdGuild = 1;    //是否创建过公会\n    bool appliedGuild = 2;   //是否申请加入过公会\n}\n\nmessage StoryOperateReportReq {\n    int32 storyType = 1;    //1主线剧情/2新手引导剧情/3活动本剧情\n    int32 storyId   = 2;    //关联剧情大类ID\n    int32 dialogId  = 3;    //关联剧情每句ID\n    int32 jump      = 4;    //1跳过，空为非跳过\n}\n\nmessage StoryOperateReportRsp{\n}\n\n//领取补给\nmessage RewardSupplyReq {\n    int32 rewardId  = 1;\n    bool isRedeem   = 2;    //是否为补领\n}\nmessage RewardSupplyRsp {\n    repeated DropTuple reward       = 1;    //奖励\n    repeated int32 rewarded         = 2;\n}\n//获取补给信息\nmessage GetSupplyInfoReq {\n}\nmessage GetSupplyInfoRsp {\n    repeated int32 rewarded = 1;    //已经领取的\n}\n\n//客户端操作记录上报\nmessage ReportOperateRecordReq {\n    int32 opType            = 1;\n    repeated int32 values   = 2;\n}\n\nmessage ReportOperateRecordRsp{\n}\n\n//获取操作记录\nmessage GetOperateRecordReq {\n    repeated int32 opTypes  = 1;    //获取多个 opType 的记录,如果传空就获取所有类型的记录\n}\n\nmessage GetOperateRecordRsp {\n    repeated OperateRecord records = 1;\n}\n\n//设置生日\nmessage SetBirthdayReq {\n    int32 birthday = 1;     // month * 100 + day\n}\n\nmessage SetBirthdayRsp {\n    ActorInfo actor = 1;\n}\n\n//客户端请求同步资源(物品、角色、徽章)\nmessage BatchSyncResReq {\n    int64 itemSyncKey   = 1;    //客户端物品的 syncKey\n    int64 cardSyncKey   = 2;    //客户端角色的 syncKey\n    int64 badgeSyncKey  = 3;    //客户端徽章的 syncKey\n}\n\nmessage BatchSyncResRsp {\n}\n\n//使用兑换码\nmessage UseExchangeCodeReq {\n    string code = 1;\n}\n\nmessage UseExchangeCodeRsp {\n    string code                 = 1;\n    repeated DropTuple rewards  = 2;\n}\n\n//客户端异常上报\nmessage ClientAbnormalReportReq {\n    string reason = 1;\n}\n\nmessage ClientAbnormalReportRsp {\n}\n\n\nmessage GetAgreementInfoReq {\n}\n\nmessage AgreementShow {\n    int32 season            = 2;\n    repeated int32 rewards  = 3;\n    repeated int32 openList = 4;\n}\nmessage GetAgreementInfoRsp {\n    int32 curDay                    = 1;\n    repeated AgreementShow datas  = 2;\n}\n\nmessage RewardAgreementReq {\n    int32 season        = 1;\n    int32 rewardId      = 2;\n}\n\nmessage RewardAgreementRsp {\n    repeated DropTuple reward       = 1;    //奖励\n    repeated int32 rewards          = 2;\n    AgreementShow agreement         = 3;\n}\n\nmessage CliTriggerEventNotify {\n    string eventId = 1; //stdspend4000  dupspend100\n}\n\n\n\n\n\nenum ARENA_SEASON_STAT {\n    CLOSE           = 0;    //赛季关闭\n    CREATING        = 1;    //赛季开启中\n    OPEN            = 2;    //开启\n    SETTLE          = 3;    //结算\n    DAILY_SETTLE    = 4;    //每日结算\n}\n\nmessage ArenaMirrorInfo {\n    int64 uin                       = 1;\n    int64 createTime                = 2;    //账号创建时间\n    int64 fightScore                = 3;    //战斗积分\n    int32 level                     = 4;    //等级\n    int32 faceId                    = 5;    //头像ID\n    string name                     = 6;    //名字\n    int64 guildUid                  = 7;    //所在公会 uid\n    string guildName                = 8;    //所在公会名字\n    int32 arenaMedal                = 9;    //竞技场的勋章\n    int64 lastLoginStamp            = 10;   //上次登录时间\n    bool isOnline                   = 11;   //是否在线\n    int32 randNameId                = 12;   //随机nameID\n    ActorHead actorHead             = 13;   //头像信息\n}\n//竞技场对手数据\nmessage ArenaOpponentInfo {\n    ArenaMirrorInfo info    = 1;    //对手人物信息\n    int32 rank              = 2;    //排行\n}\n//匹配信息\nmessage ArenaMatchData {\n    int32   rank                            = 1;    //自己排名\n    int32   level                           = 2;    //自己段位\n    repeated int32 opponentRanks            = 3;    //匹配到的 3 个名次\n    repeated ArenaOpponentInfo opponents    = 4;    //对手信息\n    int32 seasonId                          = 5;    //赛季 id\n}\n//请求竞技场数据\nmessage ArenaGetAllReq {\n\n}\n\nmessage ArenaGetAllRsp {\n    int32   curSeason                   = 1;    //当前赛季ID\n    int64   nextFightTime               = 2;    //下次挑战时间\n    int64   seasonStartTime             = 3;    //赛季开始时间\n    int64   seasonEndTime               = 4;    //赛季结束时间\n    int64   seasonEndStartTime          = 5;    //赛季结算完成时间\n    int32   fightNum                    = 6;    //挑战次数\n    int32   buyNum                      = 7;    //挑战购买次数\n    int32   highRank                    = 8;    //赛季最高排名\n    repeated int32   rewardList         = 9;    //赛季领奖id\n    ArenaMatchData  matchInfo           = 10;   //匹配信息\n    int64   nextSettleTime              = 11;   //下次结算时间\n    int32   seasonStat                  = 12;   //赛季状态\n    int32   rewardPhase                 = 13;   //领奖季度\n    bool    isDailySettle               = 14;   //是否每日结算\n    int32 historyHighRank               = 15;   //历史最高排名\n}\n//请求战斗记录\nmessage ArenaGetRecordReq {\n}\nmessage ArenaGetRecordRsp {\n    repeated ArenaBattleRecord records = 1;  //战斗记录\n}\n\n//存储战斗记录\nmessage ArenaSaveBattleRecordReq {\n    int64 fightUin  = 1;    //挑战者Uin\n    int64 defendUin = 2;    //防守者Uin\n    bool isWin      = 3;    //战斗结果\n    int64 fightStamp = 4;    //战斗时间\n    int64 battleUid = 5;    //战斗记录Uin\n}\n\nmessage ArenaSaveBattleRecordRsp {\n}\n//请求刷新匹配\nmessage ArenaGetMatchReq {\n    bool isRefresh  = 1;    //是否刷新\n}\n\nmessage ArenaGetMatchRsp {\n    ArenaMatchData  matchInfo      = 1;   //匹配信息\n    int64   nextSettleTime         = 2;   //下次结算时间\n    int32   seasonStat             = 3;   //赛季状态\n    int32   seasonZone             = 4;   //赛季分区\n    bool    isDailySettle          = 5;   //是否每日结算\n}\n\n\n//请求竞技场对手阵容\nmessage ArenaGetOpponentFormationReq {\n    int32 opponentRank = 1; //对手排名\n    int64 opponentUin  = 2; //对手 uin\n    bool isSvr         = 3; //服务器专用字段 标识 是否是 gamesvr 的请求\n}\n\nmessage ArenaGetOpponentFormationRsp {\n    bool    isChange                    = 1;    //对手是否变化\n    BattleFormation formation           = 2;    //玩家战斗信息，包含防守信息\n    ArenaMatchData  matchInfo           = 3;    //最新匹配信息\n    int32  opponentRank                 = 4;    //匹配的rank\n    int64   fightUin                    = 5;    //对手的Uin\n}\n\n//竞技场挑战\nmessage ArenaFightReq {\n    int32           fightRank   = 1;    //对手排名\n    BattleFormation formation   = 2;    //布阵信息\n}\n\nmessage ArenaFightRsp {\n    bool    isChange            = 1;    //对手是否变化\n    int64   nextFightTime       = 2;    //下次挑战时间\n    int32   fightNum            = 3;    //挑战次数\n    string battleRecord         = 4;    //战斗信息 TOD\n    int32   highRank            = 5;    //赛季最高排名\n}\n//竞技场更新排名\nmessage ArenaSwitchRankReq {\n    int32   switchRank          = 1;    //更换的排名\n}\nmessage ArenaSwitchRankRsp {\n    ArenaMatchData matchInfo    = 1;    //最新匹配信息\n}\n\n\n//竞技场设置防守阵容\nmessage ArenaSetDefenseReq {\n    ArenaDefenseFormation defenseFormation = 1;    //设置阵容\n}\n\nmessage ArenaSetDefenseRsp {\n\n}\n//获取竞技场防守阵容\nmessage ArenaGetAllDefenseReq {\n    int32 formationType = 1;  //阵容类型 enum FORMATION_TYPE\n}\nmessage ArenaGetAllDefenseRsp {\n    ArenaDefenseFormation defenseFormation = 1;   //竞技场保存的阵容数据\n    int32 formationType = 2;  //阵容类型 enum FORMATION_TYPE\n}\n\n//更新玩家镜像信息\nmessage ArenaUpdateActorMirrorReq {\n    ActorMirrorInfo info    = 1;\n}\nmessage ArenaUpdateActorMirrorRsp {\n}\n//查看竞技场排名\nmessage ArenaGetTopRankReq {\n    \n}\n\nmessage ArenaGetTopRankRsp {\n    int32   rank                            = 1;    //自己排名\n    int32 arenaMedal                        = 2;    //竞技场的勋章\n    repeated    ArenaOpponentInfo rankList  = 3;\n}\n\n\n\n\n\n\n//请求竞技场角色阵容\n//message ArenaGetRoleFormationReq {\n//    int64 uin = 1; //角色uin\n//}\n\n//message ArenaGetRoleFormationRsp {\n//    BattleActorData battleActorData   = 1;    //玩家战斗信息\n//}\n\n//刷新挑战CD\nmessage ArenaRefreshFightCDReq {\n}\n\nmessage ArenaRefreshFightCDRsp {\n    int64   nextFightTime               = 1;    //下次挑战时间\n}\n//重置挑战次数\nmessage ArenaResetFightNumReq {\n    \n}\n\nmessage ArenaResetFightNumRsp {\n    int32   fightNum                    = 1;    //挑战次数\n    int32   buyNum                      = 2;    //挑战购买次数\n}\n\n//领取赛季排名奖励\nmessage ArenaGetRankRewardReq {\n    int32   rewardId        = 1;\n    int32 rewardType        = 2;    //领奖类型 ARENA_REWARD_TYPE\n}\n\nmessage ArenaGetRankRewardRsp {\n    repeated ItemTuple goods            = 1;    //奖励列表\n    repeated int32   rewardList         = 2;    //赛季已领奖id\n}\n\n\n\n\n\n//获取所有徽章\nmessage GetAllBadgesReq {\n}\n\nmessage GetAllBadgesRsp {\n    repeated BadgeInfo badges = 1;\n    int64 syncKey             = 2;\n}\n\n//给角色穿戴徽章\nmessage WearBadgeReq {\n    repeated int64 badgeUidLst = 1;\n    int32 cardId               = 2;\n}\n\nmessage WearBadgeRsp {\n    repeated BadgeInfo badgeInfos = 1;  //穿戴徽章后,更新徽章信息\n    repeated CardInfo cardInfos   = 2;  //穿戴徽章后,更新角色信息\n}\n\n//取下徽章\nmessage TakeoffBadgeReq {\n    int32 cardId               = 1;\n    repeated int64 badgeUidLst = 2;\n}\n\nmessage TakeoffBadgeRsp {\n    repeated BadgeInfo badgeInfo = 1;    //取下徽章后,更新徽章和角色信息\n    CardInfo cardInfo            = 2;\n}\n\n//徽章升级\nmessage LevelupBadgeReq {\n    int64 badgeUid                  = 1;\n    map<int64, int32> itemUid2Count = 2;    //消耗的物品 itemUid -> count\n}\n\nmessage LevelupBadgeRsp {\n    BadgeInfo badgeInfo = 1;    //取消徽章后,更新徽章和角色信息\n    CardInfo cardInfo   = 2;\n}\n\n//分解徽章\nmessage DecomposeBadgeReq {\n    bool all                   = 1;\n    repeated int64 badgeUidLst = 2;\n}\n\nmessage DecomposeBadgeRsp {\n    repeated int64 delBadgeUidLst  = 1;    //删除这些徽章\n    repeated ItemTuple gainItems   = 2;    //分解后获得的物品\n}\n\nmessage SetBadgeLockStateReq {\n    int64 badgeUid = 1;\n    bool locked    = 2; //是否锁定\n}\n\nmessage SetBadgeLockStateRsp {\n    int64 badgeUid = 1;\n    bool locked    = 2; //是否锁定\n}\n\n//新获得徽章通知\nmessage NewBadgeNotify {\n    repeated BadgeInfo badges = 1;    //新增的徽章\n    int64 syncKey             = 2;\n}\n\n//清除徽章的 new 标识\nmessage ClearBadgeNewTagReq {\n    repeated int64 badgeUidLst = 1; //徽章 uid 列表\n    bool clearAll              = 2; //清除所有\n}\n\nmessage ClearBadgeNewTagRsp {\n    repeated int64 badgeUidLst = 1; //徽章 uid 列表\n    bool clearAll              = 2; //清除所有\n}\n\n//请求交换 2 个角色的徽章\nmessage SwitchBadgeReq {\n    int32 cardId1   = 1;\n    int32 cardId2   = 2;\n    repeated int32 badgeTypes = 3;   //交换的部位\n}\n\nmessage SwitchBadgeRsp {\n    repeated BadgeInfo badgeInfos = 1;  //交换徽章后,更新徽章信息\n    repeated CardInfo cardInfos   = 2;  //交换徽章后,更新角色信息\n}\n\n\n\nmessage SkillLevel {\n    int32 skillId   = 1;\n    int32 level     = 2;\n}\n\n//战斗单位，可能是卡片或建筑\nmessage BattleUnitInit {\n    int64 uid                       = 1;    //唯一标识\n    int64 uin                       = 2;    //所属角色唯一标识\n    int32 id                        = 3;    //配置id\n    int32 pos                       = 4;    //位置\n    int32 level                     = 5;    //等级\n    int32 quality                   = 6;    //突破\n    int32 grade                     = 7;    //觉醒等级\n    int32 fashionId                 = 9;    //正在使用的时装 id\n    int64 hp                        = 10;   //当前血量\n    int64 maxHp                     = 11;   //最大血量\n    repeated SkillLevel skillLevels = 12;   //技能等级信息\n    repeated int32 badgeSuitIds     = 13;   //当前生效的套装 id\n    repeated string badgeAttributes = 14;   //徽章加成的属性 attrId:initValue:extraRatio\n    repeated string rogueAttributes = 15;   //肉鸽系统: 角色属性强化加成 attrId:initValue:extraRatio\n    repeated int32 allSealIds       = 16;   //所有生效的印章 仅在使用别人的卡时,才会有这个数据\n    repeated string sealBigAttrs    = 17;   //大印章属性 job:level:quality:addUpLevel\n    int32 handBookGrowId            = 18;   //角色图鉴养成 base_card_hand_book_grow.id\n}\n\n//战斗统计用\nmessage BattleRecordUnit {\n    int32 id                        = 1;    //配置id\n    int32 fashionId                 = 2;    //正在使用的时装 id\n    int32 quality                   = 3;    //突破\n}\n\nmessage BattleActorData {\n    int64 uin                         = 1;    //账号唯一标识，非玩家时为0\n    repeated BattleUnitInit unitList  = 2;    //队伍里的单位信息，包括卡片和建筑\n    int32   monsterGroupId            = 3;    //怪物组id\n    int32 burstId                     = 4;\n    int32 leaderCardId                = 5;    //队长角色 id\n    repeated BurstOrderSetting burstOrderSetting = 9;    //总攻技能释放顺序设置\n    repeated int32 allSealIds         = 10;   //所有穿戴的印章\n    repeated string sealBigAttrs      = 11;   //大印章属性 job:level:quality:addUpLevel\n    int32 handBookGrowId              = 12;   //角色图鉴养成 base_card_hand_book_grow.id\n}\n\n//阵容数据\nmessage BattleFormation {\n    repeated BattleUnitInit cardList         = 1;    //卡牌站位 pos -> cardInfo\n    repeated BattleUnitInit buildingList     = 2;    //建筑站位 pos -> building\n    int32 burstId                            = 3;\n    int32      mapId                         = 4;    //地图ID\n    int32 leaderCardId                = 5;    //队长角色 id\n    repeated BurstOrderSetting burstOrderSetting = 6;    //总攻技能释放顺序设置\n    repeated int32 allSealIds         = 7;   //所有穿戴的印章\n    repeated string sealBigAttrs      = 8;   //大印章属性 job:level:quality:addUpLevel\n    int32 handBookGrowId              = 9;   //角色图鉴养成 base_card_hand_book_grow.id\n}\n\n//战斗过程中释放技能数据\nmessage BattleSkillInfo {\n    int32 camp      = 1;    //技能所对应阵营\n    int32 skillId   = 2;    //技能id\n    int32 frame     = 3;    //技能释放的时间点\n    int32 burstId   = 4;    //爆裂对象id\n    repeated BurstChooseCardInfo burstChooseCardInfos = 5;  //爆裂期间选取的释放角色信息\n    int32 cardSkillStartFrame = 6;  //爆裂选取角色后开始释放技能的时间\n}\n\n//战斗过程中手动技能数据\nmessage BattleManuallySkillInfo {\n    int32 camp      = 1;    //技能所对应阵营\n    int32 skillId   = 2;    //技能id\n    float x         = 3;    //坐标x\n    float y         = 4;    //坐标y\n    float z         = 5;    //坐标z\n    int32 frame     = 6;    //技能释放的时间点\n    int32 skillLevel     = 7;    //技能等级\n    BattleManuallySkillPosition position = 8;   //技能释放位置\n}\n\n//手动释放技能的位置\nmessage BattleManuallySkillPosition {\n    int32 x         = 1;    //坐标x\n    int32 y         = 2;    //坐标y\n    int32 z         = 3;    //坐标z\n}\n\n//爆裂释放信息\nmessage BurstChooseCardInfo {\n    int64 unitUid   = 1;   //选中的卡片uid\n    int32 skillId   = 2;   //角色的爆裂技能id\n    bool alreadyDeal = 3;  //是否已处理\n    int32 chooseCostFrame = 4;  //选择耗时\n}\n\n\n//战斗过程中单位的信息记录\nmessage BattleUnitRecord {\n    int64 uid                               = 1;    //单位uid\n    int32 camp                              = 2;    //阵营\n    int32 deadTime                          = 3;    //死亡时间\n    BattleRecordUnit unitInfo               = 4;    //单位的基本信息\n    repeated BattleUnitSkillInfo skillInfos = 5;    //单位释放技能记录\n}\n\n//单位释放的技能记录\nmessage BattleUnitSkillInfo {\n    int32 id          = 1;    //技能id\n    int32 type        = 2;    //技能类型\n    int32 level       = 3;    //技能等级\n    int32 frame       = 4;    //技能释放的时间点\n}\n\n//战斗队伍状态\nmessage BattleTeamState {\n    int64 uin                           = 1;\n    repeated ObjectState cardStates     = 2;\n}\n\n//初始化数据\n//重要: 初始化数据里的所有字段禁止使用 map, 包括结构体字段的内部字段\nmessage BattleInitData {    \n    int64 seqId                     = 1;\n    int32 sceneType                 = 2;    //sp_scene.proto    enum SCENE_TYPE\n    int32 stageId                   = 3;    //关卡id\n    repeated int32 randomSeeds      = 4;    //随机数\n    BattleActorData actorLeft       = 5;    //左侧角色\n    BattleActorData actorRight      = 6;    //右侧角色\n    BattleActorData neutral         = 7;    //中立\n    int64   enemyUin                = 8;    //对手Uin\n    int32   mapId                   = 9;    //地图ID\n    int32 powerDifference           = 10;   //战力差值\n    map<int32,int32> buffList       = 11;   //废弃改字段了 战斗外传入的buff列表 IntPair.key 为buff id IntPair.value 为层数\n    string extData                  = 12;   //透传参数\n    int32 specialBattleIndex        = 13;   //特殊战斗index\n    int32 limitFrame                = 14;   //战斗限时（帧数）\n    bool quickBattle                = 15;   //是否是快速战斗\n    RogueBattleData rogueData       = 16;   //肉鸽战斗数据\n    repeated IntPair buffs          = 17;   //战斗外传入的buff列表 IntPair.key 为buff id IntPair.value 为层数\n    GuildWarBattleData guildWarData = 18;  //公会战战斗数据\n    bool simulate                   = 19;   //是否是模拟战斗\n}\n\n//肉鸽战斗相关数据 里面的字段数据必须避免使用 map 结构\nmessage RogueBattleData {\n    int32 difficultyId                = 1;    //肉鸽难度id, 取 base_rogue_difficulty 表 buff_list\n    repeated int32 rogueTreasureIds   = 2;    //肉鸽宝物\n    repeated int32 rogueHolyIds       = 3;    //肉鸽圣物\n    repeated int32 rogueTalentIds     = 4;    //肉鸽天赋\n    repeated IntPair aliveCardCounts  = 5;    //存活角色各职业数量 IntPair.key 为职业类型 IntPair.value 为角色数量\n    int32 tokenCount                  = 6;    //当前代币数量\n    int32 consumeAttribPoint          = 7;    //当前消耗的属性点\n    repeated int32 buffIds            = 8;    //额外生效的 buff\n    int32 chapterId                   = 9;    //当前层的章节 id\n}\n\n//公会战战斗相关数据\nmessage GuildWarBattleData {\n    repeated SkillLevel guildWarSkills  = 1; //携带的战术技能\n    int32 compensateUid                 = 2; //补偿阵容uid  0:表示不使用补偿战斗\n    int32 compensateTime                = 3; //补偿战斗时长\n    repeated CardSimple assistCardInfos = 4; //使用的助战角色  非补偿战斗需要上传\n    int32 round                         = 5; //当前轮次\n}\n\n//客户端请求准备战斗, 获取战斗初始化数据\nmessage PrepareBattleReq { \n    int32 sceneType                 = 1;    //sp_scene.proto    enum SCENE_TYPE\n    int32 stageId                   = 2;    //关卡id\n    map<int64, int32> cardUid2Pos   = 3;    //卡牌站位 cardUid -> pos\n    map<int64, int32> buildUid2Pos  = 4;    //建筑站位 buildUid -> pos\n    string extData                  = 5;    //透传参数 (探险队领地战斗事件 eventId|nodeId|storyId|nextNodeId|nextNodeCoordinate)\n    repeated BattleArrayData specialArray= 8;    //特殊布阵信息（当前远征使用）\n    int32 leaderCardId              = 9;    //队长角色 id\n    int64 arenaOpponentUin          = 10;   //竞技场: 挑战的对手uin\n    bool arenaForceRank             = 11;   //竞技场: 如果挑战的名次对手uin变了,是否强制挑战改排名\n    int32 prepareStoreSceneType     = 12;   //战斗阵容保存类型 enum SCENE_TYPE\n    repeated BurstOrderSetting burstOrderSetting = 13;    //总攻技能释放顺序设置\n    bool quickBattle                = 14;   //是否是快速战斗\n    GuildWarBattleData guildWarData = 15;  //公会战战斗数据\n    bool simulate                   = 16;   //是否是模拟战斗\n}\n\nmessage PrepareBattleRsp {\n    BattleInitData  initData        = 1;    //战斗初始化数据\n    string initMd5                  = 2;    //初始化数据 md5 值\n}\n\n//战斗结算消息\nmessage BattleCompleteData {\n    BattleInitData initData                  = 1;    //战斗初始化服务器下发数据\n    repeated UnitDamageInfo unitDamage       = 2;    //战斗单位的伤害信息统计\n    BattleTeamState teamState1               = 3;    //战斗结束后左边队伍卡牌状态\n    BattleTeamState teamState2               = 4;    //战斗结束后右边队伍卡牌状态\n    repeated BattleSkillInfo skillInfos      = 5;    //战斗中徽章技能的释放\n    repeated BattleUnitRecord unitRecords    = 6;    //战斗中单位信息记录\n    int32 totalFrame                         = 7;    //战斗耗时 帧\n    int32 killMobCount                       = 8;    //击杀魔物数量\n    ChallengeResultData challengeResultData  = 9;    //记录战斗的挑战数据(特殊战斗使用)\n    bool damageDiff                          = 10;   //客户端和战斗服务器计算的伤害值是否有差异\n    int32 totalTime                          = 11;   //战斗总时长(秒)\n    int32 leftTime                           = 12;   //战斗剩余时长(秒)\n    repeated BattleManuallySkillInfo manuallySkillInfos      = 13;    //战斗中手动技能的释放\n    repeated ManuallySkillDamageInfo manuallySkillDamage     = 14;    //手动技能的伤害记录\n}\n\n//战斗伤害统计，手动技能\nmessage ManuallySkillDamageInfo {\n    int32 skillId                   = 1;    //技能id\n    int32 camp                      = 2;    //阵营\n    int64 damage                    = 3;    //伤害\n    int64 treat                     = 4;    //治疗\n    int32 activeCount               = 5;    //技能释放次数\n    int32 skillEffectType           = 6;    //技能效果类型（用来却分增减益）\n    int32 skillLevel                = 7;    //技能等级\n    int64 shield                    = 8;    //护盾\n}\n\n//战斗伤害统计，单位\nmessage UnitDamageInfo {\n    int64 uid                       = 1;    //单位uid\n    int32 camp                      = 2;    //阵营\n    int64 damage                    = 3;    //伤害\n    int64 damaged                   = 4;    //承受伤害\n    int64 treat                     = 5;    //治疗\n    int64 treated                   = 6;    //承受治疗\n    int32 deadTime                  = 7;    //死亡时间\n    BattleRecordUnit unitInfo       = 8;   //单位的基本信息\n    int64 killedByUid               = 9;   //记录击杀自己的单位\n}\n\n//手动挑战关卡\nmessage ChallengeStageReq {\n    int64 seqId                         = 1;\n    int32 stageId                       = 2;    //关卡id\n    int32 sceneType                     = 3;    //sp_scene.proto    enum SCENE_TYPE\n    bool win                            = 4;    //是否通关\n    BattleCompleteData battleData       = 5;    //战斗产生的数据（客户端传来的）\n    bool abort                          = 6;    //是否中途退出\n    int32 costTime                      = 7;    //战斗耗时 秒\n    string clientVersion                = 8;    //客户端版本号\n    string initMd5                      = 9;    //初始化数据 md5 值\n}\n\nmessage ChallengeStageRsp {\n    int32 stageId                       = 1;    //关卡id\n    int32 sceneType                     = 2;    //sp_scene.proto    enum SCENE_TYPE\n    bool win                            = 3;    //是否通关\n    StageInfo info                      = 4;    //通关后,更新关卡信息\n    int32 currentChapter                = 5;    //当前开启的章节\n    repeated ItemTuple FirstItemDrops   = 6;    //首次通关，关卡掉落\n    repeated ItemTuple itemDrops        = 7;    //关卡掉落\n    BattleCompleteData battleData       = 8;    //战斗产生的数据（战斗服传来的）\n\n    int32 level                         = 9;    //团队等级\n    int32 exp                           = 10;   //团队经验\n    bool firstPass                      = 11;   //是否为首次通关\n    BattleInitData  nextInitData        = 12;   //特殊战斗下一场战斗初始化数据\n\n    //额外数据 远征战斗(sproto_datamodel.ExpeditionStateRecord)\n    //肉鸽战斗 RogueNodeBattleResult\n    //公会战战斗 GuildWarBattleResult\n    bytes extData                       = 13;\n    repeated ItemTuple activityDrops    = 14;   //活动掉落\n}\n\n//保存关卡阵容\nmessage SaveStagePrepareInfoReq {\n    int32 prepareStoreSceneType         = 1;    //sp_scene.proto    enum SCENE_TYPE\n    map<int64, int32> cardUid2Pos       = 3;    //卡牌站位 cardUid -> pos\n    map<int64, int32> buildUid2Pos      = 4;    //建筑站位 buildUid -> pos\n    int32 leaderCardId                  = 5;    //队长角色 id\n    repeated BurstOrderSetting burstOrderSetting = 6;    //总攻技能释放顺序设置\n}\n\nmessage SaveStagePrepareInfoRsp {\n}\n\n//获取上次挑战的阵容信息\nmessage GetStagePrepareInfoReq {\n    int32 sceneType = 1;    //sp_scene.proto    enum SCENE_TYPE\n    int32 stageId   = 2;    //关卡 id (竞技场传 0)\n    string extData  = 3;    //透传信息\n    int32 prepareStoreSceneType = 4;    //战斗阵容存储类型\n    bool quickBattle = 5;   //是否是快速战斗\n    int32 guildWarCompensateUid = 6;    //公会战 使用的补偿阵容uid\n    bool simulate               = 7;   //是否是模拟战斗\n}\n\nmessage GetStagePrepareInfoRsp {\n    StagePrepareInfo info       = 1;\n    BattleTeamState teamState1  = 2;    //战斗结束后左边队伍卡牌状态\n    BattleTeamState teamState2  = 3;    //战斗结束后右边队伍卡牌状态\n    string extData              = 4;    //透传信息\n    bool quickBattle = 5;   //是否是快速战斗\n    int32 guildWarCompensateUid = 6;    //公会战 使用的补偿阵容uid\n    int32 guildWarCompensateTime= 7;    //公会战 使用的补偿阵容的补偿时长\n    repeated CardSimple guildWarAssistCardInfos = 8;  //公会战 可助战角色信息\n}\n\n//退出布阵界面\nmessage ExitStagePrepareReq {\n    int32 sceneType = 1;\n    int32 guildWarBossIndex = 2;    //公会战 boss 位置索引\n}\n\nmessage ExitStagePrepareRsp {\n}\n\n//好友切磋,获取对方的防守阵容\nmessage GetFriendDefenceFormationReq {\n    int32 opponentUin = 1;\n}\n\nmessage GetFriendDefenceFormationRsp {\n    int32 opponentUin           = 1;\n    BattleFormation formation   = 2;\n}\n\n//获取战斗回放数据\nmessage GetBattleRecordReq {\n    int64 battleUid     = 1;\n}\n\nmessage GetBattleRecordRsp {\n    BattleRecord record = 1;\n}\n\nenum BATTLE_CHALLENGE_CONDITION {\n    BCC_NONE                = 0;\n    REMAIN_TIME             = 1;    //剩余时间\n    DEAD_COUNT              = 2;    //阵亡角色人数\n    DEAD_JOB_COUNT          = 3;    //阵亡角色中指定职业人数\n    EMBATTLE_COUNT          = 4;    //上阵角色人数\n    EMBATTLE_JOB_COUNT      = 5;    //上阵角色中指定职业人数\n    MIN_HP_JOB              = 6;    //指定职业的最低血量（万分比）\n    HP_PERCENT              = 7;    //总血量比例（万分比）\n}\n\nmessage ChallengeResultData {\n    int32 remainTime                             = 1;    //剩余时间\n    repeated ChallengeResultCard deadInfos       = 2;    //角色死亡情况（分职业统计）\n    repeated ChallengeResultCard embattleInfos   = 3;    //角色上阵情况（分职业统计）\n    repeated ChallengeResultCard minHpInfos      = 4;    //角色最低血量情况（万分比）（分职业统计）\n    int32 remainHpPercent                        = 5;    //剩余总血量（万分比）\n    int32 remainFrames                           = 6;    //剩余时间（帧数）\n    map<int32,int32>    buffList                 = 7;    //buff列表 ID->增加的层数\n    int32               score                    = 8;    //积分\n}\n\nmessage ChallengeResultCard {\n    int32 job              = 1;    //职业\n    int32 value            = 2;    //对应数据\n}\n\n\n\nmessage RewardLvShow {\n    int32       passId                  = 1;\n    repeated int32 rewardLvs            = 2;\n}\n\nmessage BattlePassShowInfo {\n    int32 passPortId                    = 1;    //通行证ID\n    bool isUnLock                       = 2;    //是否解锁\n    int32 lv                            = 3;    //当前等级\n    int32 exp                           = 4;    //当前经验\n    int32   expLimit                    = 5;    //经验限制进度\n    repeated    int32       openList    = 6;    //开启的子通行证\n    repeated TaskInfo dailyTask         = 7;    //每日任务\n    repeated TaskInfo weeklyTask        = 8;    //每周任务\n    repeated TaskInfo totalTask         = 9;    //当前任务\n    repeated RewardLvShow      rewards  = 10;    //领奖信息 passId->领奖状态\n    int64                     endStamp  = 11;   //到期时间\n}\n//请求通行证信息\nmessage GetBattlePassInfoReq {\n    \n}\nmessage GetBattlePassInfoRsp {\n    repeated BattlePassShowInfo info  = 1;\n}\n\n//通行证任务刷新\nmessage BattlePassTaskRefreshReq {\n    int32 phaseId               = 1;    //通行证期数  \n    int64 taskUid               = 2;    //任务uID\n}\nmessage BattlePassTaskRefreshRsp {\n    repeated TaskInfo taskList              = 1;    //当前的任务列表\n    map<int32,int32>      taskLimits        = 2;    //剩余的任务次数\n}\n//通行证任务领奖\nmessage BattlePassTaskRewardReq {\n    int32 phaseId               = 1;    //通行证期数  \n    int64 taskUid               = 2;    //任务uID\n}\nmessage BattlePassTaskRewardRsp {\n    int32 exp               = 1;    //奖励的经验\n    BattlePassShowInfo info = 2;         \n}\n\n\n//通行证等级购买\nmessage BattlePassBuyLevelReq {\n    int32 phaseId               = 1;    //通行证期数  \n    int32 buyLevel              = 2;    //购买等级\n}\nmessage BattlePassBuyLevelRsp {\n    int32 phaseId               = 1;    //通行证期数  \n    int32 level                 = 2;    //当前等级\n}\n//通行证奖励领取\nmessage BattlePassGetRewardReq {\n    int32 phaseId               = 1;    //通行证期数\n    int32 passId                = 2;    //子通行证ID\n    int32 rewardLv              = 3;    //领奖等级\n    bool  rewardAll             = 4;    //是否全部领取\n}\nmessage BattlePassGetRewardRsp {\n    repeated ItemTuple goods    = 1;    //领取的奖励\n    BattlePassShowInfo info     = 2;\n}\n\nmessage BattlePassBuySuccessNotify {\n    repeated BattlePassShowInfo allBattlePass = 1;\n}\n//boss挑战\n\n\n\n\n\n\n\nmessage BossRankInfo {\n    int64 uin       = 1;\n    int32 rank      = 2;\n    int32 rankRatio = 3;\n}\n//获取boss挑战信息\nmessage GetBossInfoReq {\n    \n}\n\nmessage GetBossInfoRsp {\n    int32   season          = 1;    //当前赛季\n    int64 endStamp          = 2;    //结束时间\n    int64 nextStartStamp    = 3;    //下期开始时间\n    int32 fighterCount      = 4;    //普通挑战次数\n    int32 challengeCount    = 5;    //高难挑战次数\n    int64 highScore         = 6;    //最高积分 \n    int32   curChapter      = 7;    //当前章节\n    int32   curStage        = 8;    //当前关卡\n    int64   bossHpMax       = 9;   //boss上限血量\n    int64   bossHpCur       = 10;   //boss当前血量\n    int32 rank              = 11;   //排名 绝对排名\n    int32 rankRatio         = 12;   //排名 万分比\n    repeated BossChallengeRecord challenge   = 13;    //当前挑战数据\n    bool isStart            = 14;\n    repeated int32  rewardStages             = 15;  //已领取奖励\n    int32 highScoreDiff     = 16;\n    int32 phase             = 17;   //发奖周期\n}\n\n//玩家排行信息\nmessage BossRankActorInfo {\n    int64 uin                   = 1;\n    int32 level                 = 2;    //等级\n    int32 faceId                = 3;    //头像ID\n    string name                 = 4;    //名字\n    int64 guildUid              = 5;    //所在公会 uid\n    string guildName            = 6;    //所在公会名字\n    int32   rank                = 7;    //排行\n    int64 score                 = 8;    //积分\n    int32 scoreDiff             = 9;\n    ActorHead actorHead         = 10;   //头像信息\n}\n\n//获取boss排行榜信息\nmessage GetBossTopRankReq {\n    int32 index = 1;    //\n}\n\nmessage GetBossTopRankRsp {\n    int32       rank                        = 1;    //自己排名\n    int32 rankRatio                         = 2;\n    repeated    BossRankActorInfo rankList  = 3;\n    int32 index                             = 4;\n    int32 rankCount                         = 5;    //榜单人数\n}\n//开始挑战\nmessage StartBossChallengeReq {\n}\nmessage StartBossChallengeRsp {\n}\n//放弃挑战\nmessage GiveupBossChallengeReq {\n    int32 stage = 1;\n}\n\nmessage GiveupBossChallengeRsp {\n\n}\n//积分变化通知\nmessage BossChallengeHighScoreNotify {\n    int32 curRank       = 1;\n    int32 curRankRatio  = 2;\n    int32 upRank        = 3;\n    int64 highScore     = 4;\n    int32 highScoreDiff = 5;\n}\n\n//领取奖励\nmessage RewardBossChallengeReq {\n    int32 stage = 1;  \n}\n\nmessage RewardBossChallengeRsp {\n    repeated DropTuple rewards    = 1;    //奖励列表\n    repeated int32  rewardStages  = 2;  //已领取奖励\n}\n\n//获取boss排行榜玩家挑战信息\nmessage GetBossRankActorRecordReq {\n    int64 uin       = 1;    //uin\n}\n\nmessage GetBossRankActorRecordRsp {\n    int64 uin   = 1;\n    repeated BossChallengeRecord challenges = 2;\n}\n\nmessage CacheChallengeRecord {\n    repeated BossChallengeRecord challenges   = 1;    //当前挑战数据\n}\n\nmessage BossChallengeInfo {\n    int32 season        = 1;\n    int64 startTime     = 2;\n    int64 endTime       = 3;\n    int64 endStartTime  = 4;\n    int32 chapter       = 5;\n    int32 settle        = 6;\n    int32 rewardCount   = 7;\n    int32 rewardCycle   = 8;\n    \n}\n\n\n\n\n//获取所有卡牌\nmessage GetAllCardsReq {\n    int64 syncKey = 1;  //重新登录后发 0\n}\n\n\nmessage GetAllCardsRsp {\n    repeated CardInfo cardList  = 1;\n    int64 syncKey               = 2;    //客户端更新本地的 syncKey\n}\n\n\n//卡牌状态更新通知\nmessage CardUpdateNotify {\n    repeated CardInfo addCardList   = 1;    //新增的卡牌\n    repeated int64 delCardUidList   = 2;    //需要删除的卡牌列表\n    int64 syncKey                   = 3;    //客户端更新本地的 syncKey\n}\n\n//卡牌升级\nmessage LevelupCardReq {\n    int32 cardId                    = 1;\n    map<int64, int32> itemUid2Count = 2;    //消耗的物品 itemUid -> count\n}\n\nmessage LevelupCardRsp {\n    CardUpdate updateInfo = 1;\n}\n\n//卡牌突破\nmessage QualityUpCardReq {\n    int32 cardId = 1;\n}\n\nmessage QualityUpCardRsp {\n    CardUpdate updateInfo = 1;\n}\n\n\n//卡牌技能升级\nmessage LevelupCardSkillReq {\n    int32 cardId  = 1;\n    int32 skillId = 2;\n}\n\nmessage LevelupCardSkillRsp {\n    CardUpdate updateInfo = 1;\n}\n\n//卡牌觉醒\nmessage GradeUpCardReq {\n    int32 cardId = 1;\n}\n\nmessage GradeUpCardRsp {\n    CardUpdate updateInfo = 1;\n}\n\n//卡牌多次觉醒\nmessage MultiGradeUpCardReq {\n    int32 cardId = 1;\n}\n\nmessage MultiGradeUpCardRsp {\n    CardUpdate updateInfo = 1;\n}\n\nmessage GetCardAllTeamReq {\n\n}\n\nmessage GetCardAllTeamRsp {\n    repeated CardTeamInfo teams = 1;\n}\n\nmessage SetCardTeamReq {\n    int32 teamId            = 1;\n    repeated int32 cardIds  = 2;\n    string name             = 3;\n}\n\nmessage SetCardTeamRsp {\n    CardTeamInfo teamInfo   = 1;\n}\n\nmessage ChangeCardTeamNameReq {\n    int32 teamId = 1;\n    string name  = 2;\n}\n\nmessage ChangeCardTeamNameRsp {\n    CardTeamInfo teamInfo   = 1;\n}\n\nmessage ChangeCardFashionReq {\n    int32 cardId    = 1;\n    int32 fashionId = 2;\n}\n\nmessage ChangeCardFashionRsp {\n    CardUpdate updateInfo = 1;\n}\n\nmessage GetAllShowFashionReq {\n}\n\nmessage GetAllShowFashionRsp {\n    repeated int64 fashionIds = 1;\n}\n\n//给角色投递卡牌刷新事件\nmessage EventRefreshCardSkill {\n    int32 cardId    = 1;\n    int32 skillId   = 2;\n}\n\nmessage GetAllCardFashionReq {\n}\n\nmessage GetAllCardFashionRsp {\n     map<int32, int64>  ownFashions = 1;\n}\n\n//领取图鉴奖励: 领取成功后客户端修改本地所有角色数据: CardInfo.handBookReward 设置为 true\nmessage FetchHandBookRewardReq {\n}\n\nmessage FetchHandBookRewardRsp {\n    repeated ItemTuple rewards = 1;\n}\n\n//激活图鉴成长\nmessage ActivateHandBookGrowReq {\n    int32 handBookGrowId = 1;\n}\n\nmessage ActivateHandBookGrowRsp {\n    ActorInfo info = 1;\n}\n\n//角色点击事迹上报\nmessage ClickCardStoryEventReportReq {\n    repeated CardClickedStoryEventInfo infos = 1;\n}\n\nmessage ClickCardStoryEventReportRsp {\n}\n\n//获取所有角色已点击事迹\nmessage GetCardClickedStoryEventsReq {\n}\n\nmessage GetCardClickedStoryEventsRsp {\n    repeated CardClickedStoryEventInfo infos = 1;\n}\n\n//查看别人的角色信息\nmessage GetOtherCardInfoReq {\n    int64 targetUin  = 1;\n    int64 cardUid    = 2;\n}\n\nmessage GetOtherCardInfoRsp {\n    CardInfo cardInfo               = 1;\n    repeated BadgeInfo badgeInfos   = 2;    //角色穿戴的徽章\n    repeated int32 allSealIds       = 3;    //所有生效的印章\n    repeated string sealBigAttrs    = 4;   //大印章属性 job:level:quality:addUpLevel\n    int32 handBookGrowId            = 5;    //角色图鉴养成 base_card_hand_book_grow.id\n}\n\nmessage CardRobotTestInitialReq {\n    repeated int32 cardIds = 1;\n    int32 mainLineStageId  = 2;\n}\n\nmessage CardRobotTestInitialRsp {\n    repeated CardInfo cardInfos = 1;\n}\n\n//设置角色关注\nmessage SetCardFocusReq {\n    int32 cardId = 1;   //清除所有角色的关注\n    bool focus   = 2;   //是否关注, 如果要清楚所有角色的关注: cardId = 0, focused = false\n}\n\nmessage SetCardFocusRsp {\n    int32 cardId = 1;\n    bool focus   = 2;\n}\n\n//设置看板娘角色展示\nmessage SetCardFashionShowReq {\n    repeated int32 showFashionIds = 1;  //最多 5 个值\n}\n\nmessage SetCardFashionShowRsp {\n    ActorInfo actor = 1;\n}\n\n\n\n\nmessage CarnivelStageShow {\n    int32 stageId                   = 1;\n    repeated TaskInfo taskList      = 2;    //当前任务列表\n}\n//请求通行证信息\nmessage GetCarnivalInfoReq {\n    int64 refreshStamp                          = 1;  \n}\nmessage GetCarnivalInfoRsp {\n    repeated CarnivelStageShow stageList        = 1;    //阶段信息\n    repeated int32 rewardTragets                = 2;    //已经领奖的目标\n    int64        closedStamp                    = 3;   //关闭时间\n    int64 refreshStamp                          = 4;  \n}\n\n\n\n//通行证奖励领取\nmessage CarnivalGetRewardReq {\n    int64 taskUid   = 1;    //领奖任务\n    int32  rewardId = 2;    //领奖目标\n}\nmessage CarnivalGetRewardRsp {\n    repeated DropTuple goods                    = 1;    //领取的奖励\n    repeated CarnivelStageShow stageList        = 2;    //阶段信息\n    repeated int32 rewardTragets                = 3;    //已经领奖的目标\n    int64        closedStamp                    = 4;   //关闭时间\n}\n\n\n\nmessage Head {\n    uint32 cmd          = 1;\n    int64 uin           = 2;\n    uint32 sequence     = 3;\n    int32 retCode       = 4;\n    string openId       = 5;\n    string gtwId        = 6;\n    string gameId       = 7;\n    string dbId         = 8;\n    string reply        = 9;\n    string serviceId    = 10;\n    bytes trace         = 11;\n    int32 platform      = 12;   //enum PLATFORM_TYPE\n    string errMsg       = 13;   //错误信息\n    bool resend         = 14;   //重发的请求\n}\n\nmessage Msg {\n    Head head  = 1;\n    bytes body = 2;\n}\n\nmessage KvPair {\n    string key      = 1;\n    string strValue = 2;\n    int64 intValue  = 3;\n}\n\nmessage IntPair {\n    uint32 key      = 1;\n    int64 value     = 2;\n}\n\nmessage Position {\n    int32 x = 1;\n    int32 y = 2;\n}\nenum SpecialItemId {\n    SID_NONE             = 0;\n    SID_BIND_DIAMOND     = 21000001; //绑定钻石\n    SID_DIAMOND          = 21000002; //钻石\n    SID_GOLD             = 21000003; //金币\n    SID_ENERGY           = 21000004; //体力\n    SID_ROLE_EXP         = 21000005; //主角经验\n    SID_BATTLEPASS_EXP   = 21000007; //主角经验\n    SID_GACHA1           = 21100001; //单抽券\n    SID_GACHA10          = 21100002; //十连券\n    SID_UP_GACHA1        = 21100004; //up 单抽券\n    SID_UP_GACHA10       = 21100003; //up 十连券\n    SID_MANOR_ACTION_VALUE  = 21000009;   //探险地图行动值\n    SID_MANOR_PLOT_VALUE    = 21000013;   //探险地图支线剧情点\n    SID_BOSS_CHALLENGE      = 21000014;   //BOSS挑战次数\n    SID_GUILD_EXP        = 21000016; //公会经验\n    SID_MONTH_CARD_ITEM  = 21000017; //月卡功能道具\n    SID_BATTLE_PASS_101  = 21000018; //秘银凭证道具\n    SID_BATTLE_PASS_102  = 21000019; //黑耀凭证道具\n    SID_SHOP_TOKEN_A     = 21000201; //商店代币A\n    SID_SHOP_TOKEN_B     = 21000202; //商店代币B\n    SID_DISPATCH_EXP     = 21000022; //派遣经验\n    SID_GUILD_WAR_SKILL_POINT = 21000021;   //公会战技能点\n    SID_SEAL_HOOK_EXP    = 21000030; //大刻印挂机经验\n}\nenum CMD {\n    NONE                                = 0;\n    REQ_RSP_INTERVAL                    = 100000;\n\n    DB_START                            = 100;\n    DB_QUERY_UNIQUE_DATA_REQ            = 101;      //DbQueryUniqueDataReq\n    DB_QUERY_UNIQUE_DATA_RSP            = 100101;   //DbQueryUniqueDataRsp\n    DB_QUERY_BATCH_DATA_REQ             = 102;      //DbQueryBatchDataReq\n    DB_QUERY_BATCH_DATA_RSP             = 100102;   //DbQueryBatchDataRsp\n    DB_DELETE_DATA_REQ                  = 103;      //DbDeleteDataReq\n    DB_DELETE_DATA_RSP                  = 100103;   //DbDeleteDataRsp\n    DB_INSERT_DATA_REQ                  = 104;      //DbInsertDataReq\n    DB_INSERT_DATA_RSP                  = 100104;   //DbInsertDataRsp\n    DB_UPDATE_DATA_REQ                  = 105;      //DbUpdateDataReq\n    DB_UPDATE_DATA_RSP                  = 100105;   //DbUpdateDataRsp\n    DB_UPDATE_BATCH_DATA_REQ            = 106;      //DbUpdateBatchDataReq\n    DB_UPDATE_BATCH_DATA_RSP            = 100106;   //DbUpdateBatchDataRsp\n    DB_CREATE_INDEX_REQ                 = 107;      //DbCreateIndexReq\n    DB_CREATE_INDEX_RSP                 = 100107;   //DbCreateIndexRsp\n    DB_ALLOC_GAME_REQ                   = 108;      //AllocGameReq\n    DB_ALLOC_GAME_RSP                   = 100108;   //AllocGameRsp\n    DB_QUERY_COUNT_REQ                  = 109;      //DbQueryCountReq\n    DB_QUERY_COUNT_RSP                  = 100109;   //DbQueryCountReq\n    DB_TRANSACTION_OP_REQ               = 110;      //DbTransactionOpReq\n    DB_TRANSACTION_OP_RSP               = 100110;   //DbTransactionOpRsp\n    DB_UPSERT_DATA_REQ                  = 111;      //DbUpsertDataReq\n    DB_UPSERT_DATA_RSP                  = 100111;   //DbUpsertDataRsp\n\tDB_TABLE_DROP_REQ                  \t= 112;      //DbTableDropReq\n    DB_TABLE_DROP_RSP                  \t= 100112;   //DbTableDropRsp\n    DB_QUERY_UNIQUE_AND_UPDATE_REQ      = 113;      //DbQueryOneAndUpdateReq\n    DB_QUERY_UNIQUE_AND_UPDATE_RSP      = 100113;   //DbQueryOneAndUpdateRsp\n    DB_END                              = 199;\n\n    SYS_START                           = 200;\n    SYS_GET_RES_VERSION_REQ             = 202;      //GetResVersionReq\n    SYS_GET_RES_VERSION_RSP             = 100202;   //GetResVersionRsp\n    SYS_ACTOR_INFO_UPDATED_REQ          = 204;      //SysActorInfoUpdatedReq\n    SYS_ACTOR_INFO_UPDATED_RSP          = 100204;   //SysActorInfoUpdatedRsp\n    SYS_EXIT_LUA_VM_REQ                 = 205;\n    SYS_EXIT_LUA_VM_RSP                 = 100205;\n    SYS_HOT_LOAD_REQ                    = 206;\n    SYS_HOT_LOAD_RSP                    = 100206;\n    SYS_RECHARGE_ORDER_DELIVERY_REQ     = 207;      //SysRechargeOrderDeliveryReq\n    SYS_RECHARGE_ORDER_DELIVERY_RSP     = 100207;   //SysRechargeOrderDeliveryRsp\n    SYS_INCR_GUILD_EXP_REQ              = 208;      //IncrGuildExpReq\n    SYS_KICK_OFF_USER_FROM_GAME_REQ     = 209;      //KickOffUserFromGameReq\n    SYS_KICK_OFF_USER_FROM_GAME_RSP     = 10209;    //KickOffUserFromGameRsp\n    SYS_UPDATE_GUILD_MEMBER_NAME_REQ    = 210;      //SysUpdateGuildMemberNameReq\n    SYS_RECHARGE_ORDER_REFUND_REQ       = 211;      //SysRechargeOrderRefundReq\n    SYS_RECHARGE_ORDER_REFUND_RSP       = 100211;   //SysRechargeOrderRefundRsp\n    SYS_GUILD_WAR_SETTLE_REQ            = 212;      //SysGuildWarBattleSettleReq\n    SYS_GUILD_WAR_SETTLE_RSP            = 100212;   //SysGuildWarBattleSettleRsp\n    SYS_GUILD_WAR_GET_PROGRESS_REQ      = 213;      //SysGetGuildWarProgressReq\n    SYS_GUILD_WAR_GET_PROGRESS_RSP      = 100213;   //SysGetGuildWarProgressRsp\n    SYS_ADD_GUILD_HEAD_REQ              = 214;      //SysAddGuildHeadReq\n    SYS_ADD_GUILD_HEAD_RSP              = 100214;   //SysAddGuildHeadRsp\n    SYS_CHECK_OWN_EMOJI_REQ             = 215;      //SysCheckOwnEmojiReq\n    SYS_CHECK_OWN_EMOJI_RSP             = 100215;   //SysCheckOwnEmojiRsp\n    SYS_END                             = 299;\n\n    GM_START                            = 300;\n    GM_SEND_GLOBAL_MAIL_REQ             = 301;      //SendGlobalMailReq\n    GM_SEND_GLOBAL_MAIL_RSP             = 100301;   //SendGlobalMailRsp\n    GM_SEND_PRIVATE_MAIL_REQ            = 302;      //SendPrivateMailReq\n    GM_SEND_PRIVATE_MAIL_RSP            = 100302;   //SendPrivateMailRsp\n    GM_FETCH_GLOBAL_MAIL_REQ            = 303;      //FetchGlobalMailReq\n    GM_FETCH_GLOBAL_MAIL_RSP            = 100303;   //FetchGlobalMailRsp\n    GM_GET_ALL_FASHIONS_REQ             = 304;      //GetAllOpFashionsReq\n    GM_GET_ALL_FASHIONS_RSP             = 100304;   //GetAllOpFashionsRsp\n    GM_GET_ALL_GIFTPACKAGE_REQ          = 305;      //GetAllGiftPackageReq\n    GM_GET_ALL_GIFTPACKAGE_RSP          = 100305;   //GetAllGiftPackageRsp\n    GM_GET_ALL_ACTICITY_REQ             = 306;      //GetAllOpActivityReq\n    GM_GET_ALL_ACTICITY_RSP             = 100306;   //GetAllOpActivityRsp\n    GM_GET_ALL_SHOP_LABEL_REQ           = 307;      //GetAllShopLabelReq\n    GM_GET_ALL_SHOP_LABEL_RSP           = 100307;   //GetAllShopLabelRsp\n    GM_END                              = 399;\n\n    NOTIFY_CLIENT_START                 = 400;\n    CARD_UPDATE_NOTIFY                  = 401;      //CardUpdateNotify\n    NEW_MESSAGE_NOTIFY                  = 402;      //NewMessageNotify\n    RELATION_CHANGED_NOTIFY             = 403;      //RelationChangedNotify\n    NEW_MAIL_NOTIFY                     = 404;      //NewMailNotify\n    KICK_OFF_NOTIFY                     = 405;      //KickOffNotify\n    MUTED_BY_SYSTEM_NOTIFY              = 406;      //MutedBySystemNotify\n    ACTOR_INFO_UPDATE_NOTIFY            = 407;      //ActorInfoUpdateNotify\n    NEW_BADGE_NOTIFY                    = 408;      //NewBadgeNotify\n    RELATION_DEL_APPLICANT_NOTIFY       = 409;      //RelationDelApplicantNotify\n    MANOR_EVENT_NOTIFY                  = 411;      //ManorEventUpdateNotify\n    GUILD_EVENT_NOTIFY                  = 412;      //GuildEventNotify\n    MANOR_CONVEY_NOTIFY                 = 413;      //ManorConveyNotify\n    MANOR_INFO_UPDATE_NOTIFY            = 414;      //ManorInfoUpdateNotify\n    BATTLEPASS_BUY_SUCCESS_NOTIFY       = 415;      //BattlePassBuySuccessNotify\n    BOSS_CHALLENGE_HIGH_SCORE           = 416;      //BossChallengeHighScoreNotify\n    ROGUE_CARD_UPDATE_NOTIFY            = 417;      //RogueCardUpdateNotify\n    FASHION_ADD_NOTIFY                  = 418;      //FashionAddNotify\n    NOTIFY_CLIENT_END                   = 499;\n\n\n    LOGIN_START                         = 1000;\n    LOGIN_AUTH_TOKEN_REQ                = 1001;     //AuthTokenReq\n    LOGIN_AUTH_TOKEN_RSP                = 101001;   //AuthTokenRsp\n    LOGIN_ENTER_GAME_REQ                = 1002;     //EnterGameReq\n    LOGIN_ENTER_GAME_RSP                = 101002;   //EnterGameRsp\n    LOGIN_KICK_OFF_REQ                  = 1003;     //KickOffReq\n    LOGIN_KICK_OFF_RSP                  = 101003;   //KickOffRsp\n    LOGIN_END                           = 1099;\n\n    ACTOR_START                         = 1100;\n    ACTOR_CREATE_ACTOR_REQ              = 1101;     //CreateActorReq\n    ACTOR_CREATE_ACTOR_RSP              = 101101;   //CreateActorRsp\n    ACTOR_GET_ACTOR_INFO_REQ            = 1102;     //GetActorInfoReq\n    ACTOR_GET_ACTOR_INFO_RSP            = 101102;   //GetActorInfoRsp\n    ACTOR_OFFLINE_REQ                   = 1104;     //OfflineReq\n    ACTOR_OFFLINE_RSP                   = 101104;   //OfflineRsp\n    ACTOR_HEART_BEAT_REQ                = 1105;     //HeartBeatReq\n    ACTOR_HEART_BEAT_RSP                = 101105;   //HeartBeatRsp\n    ACTOR_EVENT_NOTIFY_REQ              = 1106;     //EventNotifyReq\n    ACTOR_EVENT_NOTIFY_RSP              = 101106;   //EventNotifyRsp\n    ACTOR_GET_SIGN_IN_REQ               = 1107;     //GetActorSignInReq\n    ACTOR_GET_SIGN_IN_RSP               = 101107;   //GetActorSignInRsp\n    ACTOR_SIGN_IN_REQ                   = 1108;     //ActorSignInReq   \n    ACTOR_SIGN_IN_RSP                   = 101108;   //ActorSignInRsp\n    ACTOR_GM_REQ                        = 1109;     //ActorGmReq\n    ACTOR_GM_RSP                        = 101109;   //ActorGmRsp\n    ACTOR_GET_UNLOCKED_FEATURES_REQ     = 1110;     //GetUnlockedFeaturesReq\n    ACTOR_GET_UNLOCKED_FEATURES_RSP     = 101110;   //GetUnlockedFeaturesRsp\n    ACTOR_GET_EMOJI_REQ                 = 1111;     //GetEmojiReq\n    ACTOR_GET_EMOJI_RSP                 = 101111;   //GetEmojiRsp\n    ACTOR_REPORT_LATEST_EMOJI_REQ       = 1112;     //ReportLatestEmojiReq\n    ACTOR_REPORT_LATEST_EMOJI_RSP       = 101112;   //ReportLatestEmojiRsp\n    ACTOR_GET_OTHER_DETAIL_INFO_REQ     = 1113;     //GetOtherDetailInfoReq\n    ACTOR_GET_OTHER_DETAIL_INFO_RSP     = 101113;   //GetOtherDetailInfoRsp\n    ACTOR_GET_STORY_REQ                 = 1114;     //GetStoryListReq\n    ACTOR_GET_STORY_RSP                 = 101114;   //GetStoryListRsp\n    ACTOR_CHANGE_NAME_REQ               = 1115;     //ChangeNameReq\n    ACTOR_CHANGE_NAME_RSP               = 101115;   //ChangeNameRsp\n    ACTOR_SAVE_SETTINGS_REQ             = 1116;     //SaveSettingsReq\n    ACTOR_SAVE_SETTINGS_RSP             = 101116;   //SaveSettingsRsp\n    ACTOR_CHANGE_FACE_REQ               = 1117;     //ChangeFaceReq\n    ACTOR_CHANGE_FACE_RSP               = 101117;   //ChangeFaceRsp\n    ACTOR_FINISH_GUIDE_REQ              = 1118;     //FinishGuideReq\n    ACTOR_FINISH_GUIDE_RSP              = 101118;   //FinishGuideRsp\n    ACTOR_GET_GUIDE_PROGRESS_REQ        = 1119;     //GetGuideProgressReq\n    ACTOR_GET_GUIDE_PROGRESS_RSP        = 101119;   //GetGuideProgressRsp\n    ACTOR_CHECK_FEATURE_OPEN_REQ        = 1120;     //CheckFeatureOpenReq\n    ACTOR_CHECK_FEATURE_OPEN_RSP        = 101120;   //CheckFeatureOpenRsp\n    ACTOR_GET_ACTOR_MIRROR_INFO_REQ     = 1121;     //GetActorMirrorInfoReq\n    ACTOR_GET_ACTOR_MIRROR_INFO_RSP     = 101121;   //GetActorMirrorInfoRsp\n    ACTOR_FINISH_PLOT_REQ               = 1122;     //FinishPlotReq\n    ACTOR_FINISH_PLOT_RSP               = 101122;   //FinishPlotRsp\n    ACTOR_GET_ALL_FINISHED_PLOTS_REQ    = 1123;     //GetAllFinishedPlotsReq\n    ACTOR_GET_ALL_FINISHED_PLOTS_RSP    = 101123;   //GetAllFinishedPlotsRsp\n    ACTOR_GET_SELF_DETAIL_INFO_REQ      = 1124;     //GetSelfDetailInfoReq\n    ACTOR_GET_SELF_DETAIL_INFO_RSP      = 101124;   //GetSelfDetailInfoRsp\n    ACTOR_SET_PROFILE_DISPLAY_CARDS_REQ = 1125;     //SetProfileDisplayCardsReq\n    ACTOR_SET_PROFILE_DISPLAY_CARDS_RSP = 101125;   //SetProfileDisplayCardsRsp\n    ACTOR_SET_PROFILE_SHOW_RESOURCE_REQ = 1126;     //SetProfileShowResourceReq\n    ACTOR_SET_PROFILE_SHOW_RESOURCE_RSP = 101126;   //SetProfileShowResourceRsp\n    ACTOR_GET_ENERGY_RECOVER_INFO_REQ   = 1127;     //GetEnergyRecoverInfoReq\n    ACTOR_GET_ENERGY_RECOVER_INFO_RSP   = 101127;   //GetEnergyRecoverInfoRsp\n    ACTOR_CHANGE_PASSWORD_REQ           = 1128;     //ChangePasswordReq\n    ACTOR_CHANGE_PASSWORD_RSP           = 101128;   //ChangePasswordRsp\n    ACTOR_UPDATE_GUILD_OPERATE_STATE_REQ= 1129;     //UpdateGuildOperateStateReq\n    ACTOR_UPDATE_GUILD_OPERATE_STATE_RSP= 101129;   //UpdateGuildOperateStateRsp\n    ACTOR_GET_GUILD_OPERATE_STATE_REQ   = 1130;     //GetGuildOperateStateReq\n    ACTOR_GET_GUILD_OPERATE_STATE_RSP   = 101130;   //GetGuildOperateStateRsp\n    ACTOR_STORY_OPERATE_REPORT_REQ      = 1131;     //StoryOperateReportReq\n    ACTOR_STORY_OPERATE_REPORT_RSP      = 101131;   //StoryOperateReportRsp\n    ACTOR_REPORT_OPERATE_RECORD_REQ     = 1132;     //ReportOperateRecordReq\n    ACTOR_REPORT_OPERATE_RECORD_RSP     = 101132;   //ReportOperateRecordRsp\n    ACTOR_GET_OPERATE_RECORD_REQ        = 1133;     //GetOperateRecordReq\n    ACTOR_GET_OPERATE_RECORD_RSP        = 101133;   //GetOperateRecordRsp\n    ACTOR_BATCH_SYNC_RES_REQ            = 1134;     //BatchSyncResReq\n    ACTOR_BATCH_SYNC_RES_RSP            = 101134;   //BatchSyncResRsp\n    ACTOR_CHANGE_HEAD_REQ               = 1135;     //ChangeHeadReq\n    ACTOR_CHANGE_HEAD_RSP               = 101135;   //ChangeHeadRsp\n    ACTOR_USE_EXCHANGE_CODE_REQ         = 1136;     //UseExchangeCodeReq\n    ACTOR_USE_EXCHANGE_CODE_RSP         = 101136;   //UseExchangeCodeRsp\n    ACTOR_CLIENT_ABNORMAL_REPORT_REQ    = 1137;     //ClientAbnormalReportReq\n    ACTOR_CLIENT_ABNORMAL_REPORT_RSP    = 101137;   //ClientAbnormalReportRsp\n    ACTOR_OPERATE_STAR_SOUND_REQ        = 1138;     //OperateStarSoundReq\n    ACTOR_OPERATE_STAR_SOUND_RSP        = 101138;   //OperateStarSoundRsp\n    ACTOR_OPERATE_SOUND_PLAYLIST_REQ    = 1139;     //OperateSoundPlayListReq\n    ACTOR_OPERATE_SOUND_PLAYLIST_RSP    = 101139;   //OperateSoundPlayListRsp\n    ACTOR_SET_BIRTHDAY_REQ              = 1140;     //SetBirthdayReq\n    ACTOR_SET_BIRTHDAY_RSP              = 101140;   //SetBirthdayRsp\n    ACTOR_ACTIVATE_HAND_BOOK_GROW_REQ   = 1145;     //ActivateHandBookGrowReq\n    ACTOR_ACTIVATE_HAND_BOOK_GROW_RSP   = 101145;   //ActivateHandBookGrowRsp\n    ACTOR_END                           = 1199;\n\n    IM_START                            = 1200;\n    IM_SEND_MESSAGE_REQ                 = 1201;     //SendMessageReq\n    IM_SEND_MESSAGE_RSP                 = 101201;   //SendMessageRsp\n    IM_SYNC_MESSAGE_REQ                 = 1202;     //SyncMessageReq\n    IM_SYNC_MESSAGE_RSP                 = 101202;   //SyncMessageRsp\n    IM_SWITCH_WORLD_GROUP_REQ           = 1203;     //SwitchWorldGroupReq\n    IM_SWITCH_WORLD_GROUP_RSP           = 101203;   //SwitchWorldGroupRsp\n    IM_REPORT_USER_REQ                  = 1204;     //ReportUserReq\n    IM_REPORT_USER_RSP                  = 101204;   //ReportUserRsp\n    IM_SYNC_PRIVATE_HISTORY_MESSAGE_REQ = 1205;     //SyncPrivateHistoryMessageReq\n    IM_SYNC_PRIVATE_HISTORY_MESSAGE_RSP = 101205;   //SyncPrivateHistoryMessageRsp\n    IM_GET_WORLD_LINE_INFO_REQ          = 1206;     //GetWorldLineInfoReq\n    IM_GET_WORLD_LINE_INFO_RSP          = 101206;   //GetWorldLineInfoRsp\n    IM_GET_CHANNEL_NEWEST_MESSAGE_REQ   = 1207;     //GetChannelNewestMessageReq\n    IM_GET_CHANNEL_NEWEST_MESSAGE_RSP   = 101207;   //GetChannelNewestMessageRsp\n    IM_GET_PRIVATE_CHATTING_TARGET_REQ  = 1208;     //GetPrivateChattingTargetReq\n    IM_GET_PRIVATE_CHATTING_TARGET_RSP  = 101208;   //GetPrivateChattingTargetRsp\n    IM_CHANGE_PRIVATE_CHATTING_TARGET_REQ = 1209;   //ChangePrivateChattingTargetReq\n    IM_CHANGE_PRIVATE_CHATTING_TARGET_RSP = 101209; //ChangePrivateChattingTargetRsp\n    IM_GET_CHAT_STATE_REQ               = 1210;     //GetChatStateReq\n    IM_GET_CHAT_STATE_RSP               = 101210;   //GetChatStateRsp\n    IM_MARK_MESSAGE_READ_REQ            = 1211;     //MarkMessageReadReq\n    IM_MARK_MESSAGE_READ_RSP            = 101211;   //MarkMessageReadRsp\n    IM_END                              = 1299;\n\n    ITEM_START                          = 1300;\n    ITEM_GET_ITEMS_REQ                  = 1301;     //GetItemsReq\n    ITEM_GET_ITEMS_RSP                  = 101301;   //GetItemsRsp\n    ITEM_SYNC_ITEMS_REQ                 = 1302;     //SyncItemsReq\n    ITEM_SYNC_ITEMS_RSP                 = 101302;   //SyncItemsRsp\n    ITEM_BUY_COUNT_RESOURCE_REQ         = 1303;     //BuyCountResourceReq\n    ITEM_BUY_COUNT_RESOURCE_RSP         = 101303;   //BuyCountResourceRsp\n    ITEM_USE_ITEM_REQ                   = 1304;     //UseItemReq\n    ITEM_USE_ITEM_RSP                   = 101304;   //UseItemRsp\n    ITEM_SALE_ITEM_REQ                  = 1305;     //SaleItemReq\n    ITEM_SALE_ITEM_RSP                  = 101305;   //SaleItemRsp\n    ITEM_CONSUME_ITEM_REQ               = 1306;     //ConsumeItemReq\n    ITEM_CONSUME_ITEM_RSP               = 101306;   //ConsumeItemRsp\n    ITEM_CHECK_ENOUGH_REQ               = 1307;     //CheckItemEnoughReq\n    ITEM_CHECK_ENOUGH_RSP               = 101307;   //CheckItemEnoughReq\n    ITEM_EXCHANGE_CARD_FRAGMENT_REQ     = 1308;     //ExchangeCardFragmentReq\n    ITEM_EXCHANGE_CARD_FRAGMENT_RSP     = 101308;   //ExchangeCardFragmentRsp\n    ITEM_EXCHANGE_ENERGY_REQ            = 1309;     //ExchangeEnergyReq\n    ITEM_EXCHANGE_ENERGY_RSP            = 101309;   //ExchangeEnergyRsp\n    ITEM_GET_STORY_MONSTER_LIST_REQ     = 1310;     //GetStoryMonsterListReq\n    ITEM_GET_STORY_MONSTER_LIST_RSP     = 101310;   //GetStoryMonsterListRsp\n    ITEM_BATCH_USE_ITEMS_REQ            = 1311;     //BatchUseItemsReq\n    ITEM_BATCH_USE_ITEMS_RSP            = 101311;   //BatchUseItemsRsp\n    ITEM_CLICK_STORY_EVENT_REPORT_REQ   = 1312;     //ClickStoryEventReportReq\n    ITEM_CLICK_STORY_EVENT_REPORT_RSP   = 101312;   //ClickStoryEventReportRsp\n    ITEM_END                            = 1399;\n\n    CARD_START                          = 1400;\n    CARD_GET_ALL_CARDS_REQ              = 1401;     //GetAllCardsReq\n    CARD_GET_ALL_CARDS_RSP              = 101401;   //GetAllCardsRsp\n    CARD_LEVELUP_REQ                    = 1402;     //LevelupCardReq\n    CARD_LEVELUP_RSP                    = 101402;   //LevelupCardRsp\n    CARD_QUALITY_UP_REQ                 = 1403;     //QualityUpCardReq\n    CARD_QUALITY_UP_RSP                 = 101403;   //QualityUpCardRsp\n    CARD_LEVELUP_SKILL_REQ              = 1404;     //LevelupCardSkillReq\n    CARD_LEVELUP_SKILL_RSP              = 101404;   //LevelupCardSkillRsp\n    CARD_GRADE_UP_REQ                   = 1405;     //GradeUpCardReq\n    CARD_GRADE_UP_RSP                   = 101405;   //GradeUpCardRsp\n    CARD_GET_ALL_TEAM_REQ               = 1406;     //GetCardAllTeamReq\n    CARD_GET_ALL_TEAM_RSP               = 101406;   //GetCardAllTeamRsp\n    CARD_SET_TEAM_REQ                   = 1407;     //SetCardTeamReq\n    CARD_SET_TEAM_RSP                   = 101407;   //SetCardTeamRsp\n    CARD_CHANGE_TEAM_NAME_REQ           = 1408;     //ChangeCardTeamNameReq\n    CARD_CHANGE_TEAM_NAME_RSP           = 101408;   //ChangeCardTeamNameRsp\n    CARD_CHANGE_FASHION_ID_REQ          = 1409;     //ChangeCardFashionReq\n    CARD_CHANGE_FASHION_ID_RSP          = 101409;   //ChangeCardFashionRsp\n    CARD_GET_ALL_SHOW_FASHION_REQ       = 1410;     //GetAllShowFashionReq\n    CARD_GET_ALL_SHOW_FASHION_RSP       = 101410;   //GetAllShowFashionRsp\n    CARD_GET_FASHION_REQ                = 1411;     //GetAllCardFashionReq\n    CARD_GET_FASHION_RSP                = 101411;   //GetAllCardFashionRsp\n    CARD_CLICK_STORY_EVENT_REPORT_REQ   = 1412;     //ClickCardStoryEventReportReq\n    CARD_CLICK_STORY_EVENT_REPORT_RSP   = 101412;   //ClickCardStoryEventReportRsp\n    CARD_GET_CLICKED_STORY_EVENTS_REQ   = 1413;     //GetCardClickedStoryEventsReq\n    CARD_GET_CLICKED_STORY_EVENTS_RSP   = 101413;   //GetCardClickedStoryEventsRsp\n    CARD_GET_OTHER_CARD_INFO_REQ        = 1414;     //GetOtherCardInfoReq\n    CARD_GET_OTHER_CARD_INFO_RSP        = 101414;   //GetOtherCardInfoRsp\n    CARD_ROBOT_TEST_INITIAL_REQ         = 1415;     //CardRobotTestInitialReq\n    CARD_ROBOT_TEST_INITIAL_RSP         = 101415;   //CardRobotTestInitialRsp\n    CARD_MULTI_GRADE_UP_REQ             = 1416;     //MultiGradeUpCardReq\n    CARD_MULTI_GRADE_UP_RSP             = 101416;   //MultiGradeUpCardRsp\n    CARD_SET_FOCUS_REQ                  = 1417;     //SetCardFocusReq\n    CARD_SET_FOCUS_RSP                  = 101417;   //SetCardFocusRsp\n    CARD_SET_FASHION_SHOW_REQ           = 1418;     //SetCardFashionShowReq\n    CARD_SET_FASHION_SHOW_RSP           = 101418;   //SetCardFashionShowRsp\n    CARD_FETCH_HAND_BOOK_REWARD_REQ     = 1419;     //FetchHandBookRewardReq\n    CARD_FETCH_HAND_BOOK_REWARD_RSP     = 101419;   //FetchHandBookRewardRsp\n    CARD_ACTIVATE_HAND_BOOK_GROW_REQ    = 1420;     //ActivateHandBookGrowReq\n    CARD_ACTIVATE_HAND_BOOK_GROW_RSP    = 101420;   //ActivateHandBookGrowRsp\n    CARD_END                            = 1499;\n\n    SCENE_START                         = 1500;\n    SCENE_GET_SCENE_INFO_REQ            = 1501;     //GetSceneInfoReq\n    SCENE_GET_SCENE_INFO_RSP            = 101501;   //GetSceneInfoRsp\n    SCENE_GET_CHAPTER_STAGE_REQ         = 1502;     //GetChapterStageReq\n    SCENE_GET_CHAPTER_STAGE_RSP         = 101502;   //GetChapterStageRsp\n    SCENE_CHALLENGE_STAGE_REQ           = 1503;     //ChallengeStageReq\n    SCENE_CHALLENGE_STAGE_RSP           = 101503;   //ChallengeStageRsp\n    SCENE_GET_CHALLENGE_RECORD_REQ      = 1505;     //GetChallengeRecordReq\n    SCENE_GET_CHALLENGE_RECORD_RSP      = 101505;   //GetChallengeRecordRsp\n    SCENE_FETCH_CHAPTER_REWARD_REQ      = 1506;     //FetchSceneChapterRewardReq\n    SCENE_FETCH_CHAPTER_REWARD_RSP      = 101506;   //FetchSceneChapterRewardRsp\n    SCENE_GET_OPEN_STAGES_REQ           = 1507;     //GetOpenStagesReq\n    SCENE_GET_OPEN_STAGES_RSP           = 101507;   //GetOpenStagesRsp\n    SCENE_FETCH_STAGE_REWARD_REQ        = 1508;     //FetchSceneStageRewardReq\n    SCENE_FETCH_STAGE_REWARD_RSP        = 101508;   //FetchSceneStageRewardRsp\n    SCENE_SWEEP_STAGE_REQ               = 1509;     //SweepStageReq\n    SCENE_SWEEP_STAGE_RSP               = 101509;   //SweepStageRsp\n    SCENE_GET_FEATURE_SCHEDULE_REQ      = 1510;     //GetFeatureScheduleReq\n    SCENE_GET_FEATURE_SCHEDULE_RSP      = 101510;   //GetFeatureScheduleRsp\n    SCENE_GET_MULTI_DROP_ACTIVITY_REQ   = 1511;     //GetMultiDropActivityReq\n    SCENE_GET_MULTI_DROP_ACTIVITY_RSP   = 101511;   //GetMultiDropActivityRsp\n    SCENE_GET_RANK_REQ                  = 1515;     //GetSceneRankReq\n    SCENE_GET_RANK_RSP                  = 101515;   //GetSceneRankRsp\n    SCENE_END                           = 1599;\n\n    RELATION_START                      = 1600;\n    RELATION_GET_FRIENDS_REQ            = 1601;     //GetFriendsReq\n    RELATION_GET_FRIENDS_RSP            = 101601;   //GetFriendsRsp\n    RELATION_APPLY_ADD_FRIEND_REQ       = 1602;     //ApplyAddFriendReq\n    RELATION_APPLY_ADD_FRIEND_RSP       = 101602;   //ApplyAddFriendRsp\n    RELATION_AGREE_FRIEND_APPLY_REQ     = 1603;     //AgreeFriendApplyReq\n    RELATION_AGREE_FRIEND_APPLY_RSP     = 101603;   //AgreeFriendApplyRsp\n    RELATION_DISAGREE_FRIEND_APPLY_REQ  = 1604;     //DisagreeFriendReq\n    RELATION_DISAGREE_FRIEND_APPLY_RSP  = 101604;   //DisagreeFriendRsp\n    RELATION_BLOCK_TARGET_REQ           = 1605;     //BlockTargetReq\n    RELATION_BLOCK_TARGET_RSP           = 101605;   //BlockTargetRsp\n    RELATION_DELETE_RELATION_REQ        = 1606;     //DeleteRelationReq\n    RELATION_DELETE_RELATION_RSP        = 101606;   //DeleteRelationRsp\n    RELATION_SEARCH_TARGET_REQ          = 1607;     //SearchTargetReq\n    RELATION_SEARCH_TARGET_RSP          = 101607;   //SearchTargetRsp\n    RELATION_SET_REMARK_RELATION_REQ    = 1608;     //SetRelationRemarkReq\n    RELATION_SET_REMARK_RELATION_RSP    = 101608;   //SetRelationRemarkRsp\n    RELATION_GET_ALL_BLOCK_TARGET_REQ   = 1609;     //GetAllBlockTargetReq\n    RELATION_GET_ALL_BLOCK_TARGET_RSP   = 101609;   //GetAllBlockTargetRsp\n    RELATION_GET_FIGHT_RECORD_REQ       = 1610;     //GetFriendFightRecordReq\n    RELATION_GET_FIGHT_RECORD_RSP       = 101610;   //GetFriendFightRecordRsp\n    RELATION_END                        = 1699;\n\n    BADGE_START                         = 1700;\n    BADGE_GET_ALL_REQ                   = 1701;     //GetAllBadgesReq\n    BADGE_GET_ALL_RSP                   = 101701;   //GetAllBadgesRsp\n    BADGE_WEAR_REQ                      = 1702;     //WearBadgeReq\n    BADGE_WEAR_RSP                      = 101702;   //WearBadgeRsp\n    BADGE_TAKEOFF_REQ                   = 1703;     //TakeoffBadgeReq\n    BADGE_TAKEOFF_RSP                   = 101703;   //TakeoffBadgeRsp\n    BADGE_LEVELUP_REQ                   = 1704;     //LevelupBadgeReq\n    BADGE_LEVELUP_RSP                   = 101704;   //LevelupBadgeRsp\n    BADGE_DECOMPOSE_REQ                 = 1705;     //DecomposeBadgeReq\n    BADGE_DECOMPOSE_RSP                 = 101705;   //DecomposeBadgeRsp\n    BADGE_SET_LOCK_STATE_REQ            = 1706;     //SetBadgeLockStateReq\n    BADGE_SET_LOCK_STATE_RSP            = 101706;   //SetBadgeLockStateRsp\n    BADGE_CLEAR_NEW_TAG_REQ             = 1707;     //ClearBadgeNewTagReq\n    BADGE_CLEAR_NEW_TAG_RSP             = 101707;   //ClearBadgeNewTagRsp\n    BADGE_SWITCH_REQ                    = 1708;     //SwitchBadgeReq\n    BADGE_SWITCH_RSP                    = 101708;   //SwitchBadgeRsp\n    BADGE_END                           = 1799;\n\n    MAIL_START                          = 1800;\n    MAIL_GET_ALL_MAILS_REQ              = 1801;     //GetAllMailsReq\n    MAIL_GET_ALL_MAILS_RSP              = 101801;   //GetAllMailsRsp\n    MAIL_FETCH_MAIL_ATTACHMENT_REQ      = 1802;     //FetchMailAttachmentReq\n    MAIL_FETCH_MAIL_ATTACHMENT_RSP      = 101802;   //FetchMailAttachmentRsp\n    MAIL_DELETE_MAIL_REQ                = 1803;     //DeleteMailReq\n    MAIL_DELETE_MAIL_RSP                = 101803;   //DeleteMailRsp\n    MAIL_MARK_READ_REQ                  = 1804;     //MarkMailReadReq\n    MAIL_MARK_READ_RSP                  = 101804;   //MarkMailReadRsp\n    MAIL_END                            = 1899;\n\n    BATTLE_START                        = 1900;\n    BATTLE_PREPARE_REQ                  = 1901;     //PrepareBattleReq\n    BATTLE_PREPARE_RSP                  = 101901;   //PrepareBattleRsp\n    BATTLE_GET_STAGE_PREPARE_INFO_REQ   = 1902;     //GetStagePrepareInfoReq\n    BATTLE_GET_STAGE_PREPARE_INFO_RSP   = 101902;   //GetStagePrepareInfoRsp\n    BATTLE_GET_BATTLE_RECORD_REQ        = 1905;     //GetBattleRecordReq\n    BATTLE_GET_BATTLE_RECORD_RSP        = 101905;   //GetBattleRecordRsp\n    BATTLE_SAVE_STAGE_PREPARE_INFO_REQ  = 1906;     //SaveStagePrepareInfoReq\n    BATTLE_SAVE_STAGE_PREPARE_INFO_RSP  = 101906;   //SaveStagePrepareInfoRsp\n    BATTLE_EXIT_STAGE_PREPARE_REQ       = 1907;     //ExitStagePrepareReq\n    BATTLE_EXIT_STAGE_PREPARE_RSP       = 101907;   //ExitStagePrepareRsp\n    BATTLE_GET_FRIEND_DEFENCE_FORMATION_REQ = 1908;   //GetFriendDefenceFormationReq\n    BATTLE_GET_FRIEND_DEFENCE_FORMATION_RSP = 101908; //GetFriendDefenceFormationRsp\n    BATTLE_END                          = 1999;\n\n    BOSS_START                          = 2000;\n    BOSS_GET_BOSS_INFO_REQ              = 2001;     //GetBossInfoReq\n    BOSS_GET_BOSS_INFO_RSP              = 102001;   //GetBossInfoRsp\n    BOSS_GET_BOSS_TOP_RANK_REQ          = 2002;     //GetBossTopRankReq\n    BOSS_GET_BOSS_TOP_RANK_RSP          = 102002;   //GetBossTopRankRsp\n    BOSS_GET_BOSS_RANK_ACTOR_RECORD_REQ = 2003;     //GetBossRankActorRecordReq\n    BOSS_GET_BOSS_RANK_ACTOR_RECORD_RSP = 102003;   //GetBossRankActorRecordRsp\n    BOSS_GIVE_UP_BOSS_CHALLENGE_REQ     = 2004;     //GiveupBossChallengeReq\n    BOSS_GIVE_UP_BOSS_CHALLENGE_RSP     = 102004;   //GiveupBossChallengeRsp \n    BOSS_QUICK_BOSS_CHALLENGE_REQ       = 2005;     //QuickBossChallengeReq\n    BOSS_QUICK_BOSS_CHALLENGE_RSP       = 102005;   //QuickBossChallengeRsp \n    BOSS_START_BOSS_CHALLENGE_REQ       = 2006;     //StartBossChallengeReq\n    BOSS_START_BOSS_CHALLENGE_RSP       = 102006;   //StartBossChallengeRsp \n    BOSS_REWARD_BOSS_CHALLENGE_REQ      = 2007;     //RewardBossChallengeReq\n    BOSS_REWARD_BOSS_CHALLENGE_RSP      = 102007;   //RewardBossChallengeRsp \n    BOSS_END                            = 2099;\n\n    MANOR_START                         = 2100;\n    MANOR_GET_MANOR_INFO_REQ            = 2101;     //GetManorInfoReq\n    MANOR_GET_MANOR_INFO_RSP            = 102101;   //GetManorInfoRsp\n    MANOR_TRIGGER_EVENT_REQ             = 2102;     //ManorTriggerEventReq\n    MANOR_TRIGGER_EVENT_RSP             = 102102;   //ManorTriggerEventRsp\n    MANOR_REPORT_POSITION_REQ           = 2103;     //ManorReportPositionReq\n    MANOR_REPORT_POSITION_RSP           = 102103;   //ManorReportPositionRsp\n    MANOR_PROCESS_EVENT_REQ             = 2104;     //ManorProcessEventReq\n    MANOR_PROCESS_EVENT_RSP             = 102104;   //ManorProcessEventRsp\n    MANOR_FINISH_STORY_REQ              = 2105;     //ManorFinishStoryReq\n    MANOR_FINISH_STORY_RSP              = 102105;   //ManorFinishStoryRsp\n    MANOR_GET_MANOR_INFO_SIMPLE_REQ     = 2106;     //GetManorInfoSimpleReq\n    MANOR_GET_MANOR_INFO_SIMPLE_RSP     = 102106;   //GetManorInfoSimpleRsp\n    MANOR_REPORT_EVENT_POSITION_REQ     = 2107;     //ManorReportEventPositionReq\n    MANOR_REPORT_EVENT_POSITION_RSP     = 102107;   //ManorReportEventPositionRsp\n    MANOR_JUMP_STORY_EVENT_REQ          = 2108;     //ManorJumpStoryEventReq\n    MANOR_JUMP_STORY_EVENT_RSP          = 102108;   //ManorJumpStoryEventRsp\n    MANOR_GET_FEATURE_SCHEDULE_REQ      = 2109;     //GetManorFeatureScheduleReq\n    MANOR_GET_FEATURE_SCHEDULE_RSP      = 102109;   //GetManorFeatureScheduleRsp\n    MANOR_FETCH_ROOKIE_REWARD_REQ       = 2110;     //ManorFetchRookieRewardReq\n    MANOR_FETCH_ROOKIE_REWARD_RSP       = 102110;   //ManorFetchRookieRewardRsp\n    MANOR_GET_ACTIVITY_ROLE_PLOT_EVENT_REQ = 2111;  //ManorGetActivityRolePlotEventReq\n    MANOR_GET_ACTIVITY_ROLE_PLOT_EVENT_RSP = 102111;//ManorGetActivityRolePlotEventRsp\n    MANOR_BATCH_PROCESS_EVENT_REQ       = 2112;     //ManorBatchProcessEventReq\n    MANOR_BATCH_PROCESS_EVENT_RSP       = 102112;   //ManorBatchProcessEventRsp\n    MANOR_END                           = 2199;\n\n    //肉鸽\n    ROGUE_START                         = 2200;\n    ROGUE_GET_ROGUE_INFO_REQ            = 2201;     //GetRogueInfoReq\n    ROGUE_GET_ROGUE_INFO_RSP            = 102201;   //GetRogueInfoRsp\n    ROGUE_START_ROGUE_GAME_REQ          = 2202;     //StartRogueGameReq\n    ROGUE_START_ROGUE_GAME_RSP          = 102202;   //StartRogueGameRsp\n    ROGUE_GET_ROGUE_STATE_REQ           = 2203;     //GetRogueStateInfoReq\n    ROGUE_GET_ROGUE_STATE_RSP           = 102203;   //GetRogueStateInfoRsp\n    ROGUE_ENTER_ROGUE_NODE_REQ          = 2204;     //EnterRogueNodeReq\n    ROGUE_ENTER_ROGUE_NODE_RSP          = 102204;   //EnterRogueNodeRsp\n    ROGUE_EXIT_ROGUE_NODE_REQ           = 2205;     //ExitRogueNodeReq\n    ROGUE_EXIT_ROGUE_NODE_RSP           = 102205;   //ExitRogueNodeRsp\n    ROGUE_ENHANCE_CARD_ATTRIB_REQ       = 2206;     //EnhanceRogueCardAttribReq\n    ROGUE_ENHANCE_CARD_ATTRIB_RSP       = 102206;   //EnhanceRogueCardAttribRsp\n    ROGUE_ACTIVATE_TALENT_REQ           = 2207;     //ActivateRogueTalentReq\n    ROGUE_ACTIVATE_TALENT_RSP           = 102207;   //ActivateRogueTalentRsp\n    ROGUE_BUY_SHOP_TREASURE_REQ         = 2208;     //BuyRogueNodeShopTreasureReq\n    ROGUE_BUY_SHOP_TREASURE_RSP         = 102208;   //BuyRogueNodeShopTreasureRsp\n    ROGUE_REFRESH_SHOP_REQ              = 2209;     //RefreshRogueNodeShopReq\n    ROGUE_REFRESH_SHOP_RSP              = 102209;   //RefreshRogueNodeShopRsp\n    ROGUE_FETCH_NODE_REWARD_REQ         = 2210;     //FetchRogueNodeRewardReq\n    ROGUE_FETCH_NODE_REWARD_RSP         = 102210;   //FetchRogueNodeRewardRsp\n    ROGUE_QUIT_GAME_REQ                 = 2211;     //QuitRogueGameReq\n    ROGUE_QUIT_GAME_RSP                 = 102211;   //QuitRogueGameRsp\n    ROGUE_GET_PIC_NEW_STATE_REQ         = 2212;     //GetRoguePicNewStateReq\n    ROGUE_GET_PIC_NEW_STATE_RSP         = 102212;   //GetRoguePicNewStateRsp\n    ROGUE_CLEAR_PIC_NEW_STATE_REQ       = 2213;     //ClearRoguePicNewStateReq\n    ROGUE_CLEAR_PIC_NEW_STATE_RSP       = 102213;   //ClearRoguePicNewStateRsp\n    ROGUE_GET_ALL_PIC_REQ               = 2214;     //GetRogueAllPicReq\n    ROGUE_GET_ALL_PIC_RSP               = 102214;   //GetRogueAllPicRsp\n    ROGUE_GET_TRENDS_REQ                = 2215;     //GetRogueTrendsReq\n    ROGUE_GET_TRENDS_RSP                = 102215;   //GetRogueTrendsRsp\n    ROGUE_FETCH_THEME_LEVEL_REWARD_REQ  = 2216;     //FetchRogueThemeLevelRewardReq\n    ROGUE_FETCH_THEME_LEVEL_REWARD_RSP  = 102216;   //FetchRogueThemeLevelRewardRsp\n    ROGUE_GET_TOP_SCORE_RECORD_REQ      = 2217;     //GetRogueTopScoreRecordReq\n    ROGUE_GET_TOP_SCORE_RECORD_RSP      = 102217;   //GetRogueTopScoreRecordRsp\n    ROGUE_FETCH_TREND_TASK_REWARD_REQ   = 2218;     //FetchRogueTrendTaskRewardReq\n    ROGUE_FETCH_TREND_TASK_REWARD_RSP   = 102218;   //FetchRogueTrendTaskRewardRsp\n    ROGUE_FINISH_EVENT_STORY_REQ        = 2219;     //FinishRogueEventStoryReq\n    ROGUE_FINISH_EVENT_STORY_RSP        = 102219;   //FinishRogueEventStoryRsp\n    ROGUE_RECRUIT_INITIAL_CARD_REQ      = 2220;     //RecruitRogueInitialCardReq\n    ROGUE_RECRUIT_INITIAL_CARD_RSP      = 102220;   //RecruitRogueInitialCardRsp\n    ROGUE_CHOOSE_INITIAL_TREASURE_REQ   = 2221;     //ChooseRogueInitialTreasureReq\n    ROGUE_CHOOSE_INITIAL_TREASURE_RSP   = 102221;   //ChooseRogueInitialTreasureRsp\n    ROGUE_FINISH_EVENT_KEY_STORY_REQ    = 2222;     //FinishRogueEventKeyStoryReq\n    ROGUE_FINISH_EVENT_KEY_STORY_RSP    = 102222;   //FinishRogueEventKeyStoryRsp\n    ROGUE_CHOOSE_EVENT_BATTLE_STORY_REQ = 2223;     //ChooseRogueEventBattleStoryReq\n    ROGUE_CHOOSE_EVENT_BATTLE_STORY_RSP = 102223;   //ChooseRogueEventBattleStoryRsp\n    ROGUE_SWEEP_REQ                     = 2224;     //SweepRogueReq\n    ROGUE_SWEEP_RSP                     = 102224;   //SweepRogueRsp\n    ROGUE_END                           = 2299;\n\n    GUILD_WAR_START                     = 2300;\n    GUILD_WAR_GET_SCHEDULE_REQ          = 2301;     //GetGuildWarScheduleReq\n    GUILD_WAR_GET_SCHEDULE_RSP          = 102301;   //GetGuildWarScheduleRsp\n    GUILD_WAR_GET_ALL_INFO_REQ          = 2302;     //GetGuildWarAllInfoReq\n    GUILD_WAR_GET_ALL_INFO_RSP          = 102302;   //GetGuildWarAllInfoRsp\n    GUILD_WAR_GET_COMPENSATION_FORMATION_REQ = 2303;    //GetGuildWarCompensateFormationReq\n    GUILD_WAR_GET_COMPENSATION_FORMATION_RSP = 102303;  //GetGuildWarCompensateFormationRsp\n    GUILD_WAR_LEVEL_UP_SKILL_REQ        = 2304;     //LevelupGuildWarSkillReq\n    GUILD_WAR_LEVEL_UP_SKILL_RSP        = 102304;   //LevelupGuildWarSkillRsp\n    GUILD_WAR_SET_ASSIST_CARD_REQ       = 2305;     //SetGuildWarAssistCardReq\n    GUILD_WAR_SET_ASSIST_CARD_RSP       = 102305;   //SetGuildWarAssistCardRsp\n    GUILD_WAR_GET_RECOMMEND_FORMATION_REQ = 2306;   //GetGuildWarRecommendFormationReq\n    GUILD_WAR_GET_RECOMMEND_FORMATION_RSP = 102306; //GetGuildWarRecommendFormationRsp\n    GUILD_WAR_GET_RANK_INFO_REQ           = 2307;   //GetGuildWarRankReq\n    GUILD_WAR_GET_RANK_INFO_RSP           = 102307; //GetGuildWarRankRsp\n    GUILD_WAR_REWARD_TASK_REQ             = 2308;   //RewardGuildWarTaskReq\n    GUILD_WAR_REWARD_TASK_RSP             = 102308; //RewardGuildWarTaskRsp\n    GUILD_WAR_SET_SKILL_TEAM_REQ          = 2309;   //SetGuildWarSkillTeamReq\n    GUILD_WAR_SET_SKILL_TEAM_RSP          = 102309; //SetGuildWarSkillTeamRsp\n    GUILD_WAR_GET_BATTLE_RECORD_REQ       = 2310;   //GetGuildWarBattleRecordReq\n    GUILD_WAR_GET_BATTLE_RECORD_RSP       = 102310; //GetGuildWarBattleRecordRsp\n    GUILD_WAR_GET_IN_BATTLE_COUNT_REQ     = 2311;   //GetGuildWarInBattleCountReq\n    GUILD_WAR_GET_IN_BATTLE_COUNT_RSP     = 102311; //GetGuildWarInBattleCountRsp\n    GUILD_WAR_END                       = 2399;\n\n    SEAL_START                          = 2400;\n    GET_SEAL_WEAR_INFO_REQ              = 2401;     //GetSealWearInfoReq\n    GET_SEAL_WEAR_INFO_RSP              = 102401;   //GetSealWearInfoRsp\n    SEAL_WEAR_REQ                       = 2402;     //WearSealReq\n    SEAL_WEAR_RSP                       = 102402;   //WearSealRsp\n    SEAL_TAKE_OFF_REQ                   = 2403;     //TakeoffSealReq\n    SEAL_TAKE_OFF_RSP                   = 102403;   //TakeoffSealRsp\n    SEAL_COMPOSITE_REQ                  = 2404;     //CompositeSealReq\n    SEAL_COMPOSITE_RSP                  = 102404;   //CompositeSealRsp\n    SEAL_BIG_LEVELUP_REQ                = 2405;     //SealBigLevelupReq\n    SEAL_BIG_LEVELUP_RSP                = 102405;   //SealBigLevelupRsp\n    SEAL_BIG_QUALITY_UP_REQ             = 2406;     //SealBigQualityUpReq\n    SEAL_BIG_QUALITY_UP_RSP             = 102406;   //SealBigQualityUpRsp\n    SEAL_BIG_ADD_UP_REQ                 = 2407;     //SealBigAddUpReq\n    SEAL_BIG_ADD_UP_RSP                 = 102407;   //SealBigAddUpRsp\n    SEAL_BIG_GET_HOOK_INFO_REQ          = 2408;     //GetSealBigHookInfoReq\n    SEAL_BIG_GET_HOOK_INFO_RSP          = 102408;   //GetSealBigHookInfoRsp\n    SEAL_BIG_FETCH_HOOK_REWARD_REQ      = 2409;     //FetchSealBigHookRewardReq\n    SEAL_BIG_FETCH_HOOK_REWARD_RSP      = 102409;   //FetchSealBigHookRewardRsp\n    SEAL_BIG_QUIT_HOOK_CHALLENGE_REQ    = 2410;     //QuitSealBigHookChallengeReq\n    SEAL_BIG_QUIT_HOOK_CHALLENGE_RSP    = 102410;   //QuitSealBigHookChallengeRsp\n    SEAL_END                            = 2499;\n\n    GUILD_START                         = 10000;\n    GUILD_GET_MY_GUILD_INFO_REQ         = 10001;    //GetMyGuildInfoReq\n    GUILD_GET_MY_GUILD_INFO_RSP         = 110001;   //GetMyGuildInfoRsp\n    GUILD_CREATE_GUILD_REQ              = 10002;    //CreateGuildReq\n    GUILD_CREATE_GUILD_RSP              = 110002;   //CreateGuildRsp\n    GUILD_SEARCH_BY_NAME_REQ            = 10003;    //SearchGuildByNameReq\n    GUILD_SEARCH_BY_NAME_RSP            = 110003;   //SearchGuildByNameRsp\n    GUILD_GET_GUILD_MEMBERS_REQ         = 10004;    //GetGuildMembersReq\n    GUILD_GET_GUILD_MEMBERS_RSP         = 110004;   //GetGuildMembersRsp\n    GUILD_CHANGE_ICON_REQ               = 10005;    //ChangeGuildIconReq\n    GUILD_CHANGE_ICON_RSP               = 110005;   //ChangeGuildIconRsp\n    GUILD_CHANGE_NAME_REQ               = 10006;    //ChangeGuildNameReq\n    GUILD_CHANGE_NAME_RSP               = 110006;   //ChangeGuildNameRsp\n    GUILD_CHANGE_NOTICE_REQ             = 10007;    //ChangeGuildNoticeReq\n    GUILD_CHANGE_NOTICE_RSP             = 110007;   //ChangeGuildNoticeRsp\n    GUILD_SET_LEVEL_LIMIT_REQ           = 10008;    //SetGuildLevelLimitReq\n    GUILD_SET_LEVEL_LIMIT_RSP           = 110008;   //SetGuildLevelLimitRsp\n    GUILD_APPLY_TO_JOIN_REQ             = 10009;    //ApplyJoinGuildReq\n    GUILD_APPLY_TO_JOIN_RSP             = 110009;   //ApplyJoinGuildRsp\n    GUILD_CANCEL_JOIN_REQ               = 10010;    //CancelJoinGuildReq\n    GUILD_CANCEL_JOIN_RSP               = 110010;   //CancelJoinGuildRsp\n    GUILD_PROCESS_JOIN_APPLY_REQ        = 10011;    //ProcessGuildJoinApplyReq\n    GUILD_PROCESS_JOIN_APPLY_RSP        = 110011;   //ProcessGuildJoinApplyRsp\n    GUILD_OPERATE_VICE_LEADER_REQ       = 10012;    //OperateGuildViceLeaderReq\n    GUILD_OPERATE_VICE_LEADER_RSP       = 110012;   //OperateGuildViceLeaderRsp\n    GUILD_KICK_OUT_MEMBER_REQ           = 10013;    //KickOutGuildMemberReq\n    GUILD_KICK_OUT_MEMBER_RSP           = 110013;   //KickOutGuildMemberRsp\n    GUILD_TRANSFER_LEADER_REQ           = 10014;    //TransferGuildLeaderReq\n    GUILD_TRANSFER_LEADER_RSP           = 110014;   //TransferGuildLeaderRsp\n    GUILD_DISMISS_REQ                   = 10015;    //DismissGuildReq\n    GUILD_DISMISS_RSP                   = 110015;   //DismissGuildRsp\n    GUILD_EXIT_REQ                      = 10016;    //ExitGuildReq\n    GUILD_EXIT_RSP                      = 110016;   //ExitGuildRsp\n    GUILD_GET_RECOMMEND_REQ             = 10017;    //GetRecommendGuildReq\n    GUILD_GET_RECOMMEND_RSP             = 110017;   //GetRecommendGuildRsp\n    GUILD_START_IMPEACH_LEADER_REQ      = 10018;    //StartImpeachGuildLeaderReq\n    GUILD_START_IMPEACH_LEADER_RSP      = 110018;   //StartImpeachGuildLeaderRsp\n    GUILD_VOTE_IMPEACH_LEADER_REQ       = 10019;    //VoteImpeachGuildLeaderReq\n    GUILD_VOTE_IMPEACH_LEADER_RSP       = 110019;   //VoteImpeachGuildLeaderRsp\n    GUILD_NOTIFY_CONSUME_ENERGY_REQ     = 10020;    //NotifyGuildConsumeEnergyReq\n    GUILD_NOTIFY_CONSUME_ENERGY_RSP     = 110020;   //NotifyGuildConsumeEnergyRsp\n    GUILD_QUICK_JOIN_REQ                = 10021;    //QuickJoinGuildReq\n    GUILD_QUICK_JOIN_RSP                = 110021;   //QuickJoinGuildRsp\n    GUILD_AUTO_JOIN_REQ                 = 10022;    //AutoJoinGuildReq\n    GUILD_AUTO_JOIN_RSP                 = 110022;   //AutoJoinGuildRsp\n    GUILD_GET_USER_GUILD_UID_REQ        = 10023;    //GetUserGuildUidReq\n    GUILD_GET_USER_GUILD_UID_RSP        = 110023;   //GetUserGuildUidRsp\n    GUILD_GET_APPLIED_GUILDS_REQ        = 10024;    //GetAppliedGuildsReq\n    GUILD_GET_APPLIED_GUILDS_RSP        = 110024;   //GetAppliedGuildsRsp\n    GUILD_SET_TARGET_REQ                = 10025;    //SetGuildTargetReq\n    GUILD_SET_TARGET_RSP                = 110025;   //SetGuildTargetRsp\n    GUILD_GET_IMPEACH_INFO_REQ          = 10026;    //GetImpeachInfoReq\n    GUILD_GET_IMPEACH_INFO_RSP          = 110026;   //GetImpeachInfoRsp\n    GUILD_GET_MY_GUILD_SIMPLE_INFO_REQ  = 10027;    //GetMyGuildSimpleInfoReq\n    GUILD_GET_MY_GUILD_SIMPLE_INFO_RSP  = 110027;   //GetMyGuildSimpleInfoRsp\n    GUILD_GET_PRACTICE_RANK_REQ         = 10028;    //GetGuildPracticeRankReq\n    GUILD_GET_PRACTICE_RANK_RSP         = 110028;   //GetGuildPracticeRankRsp\n    GUILD_GET_PRACTICE_RECORD_REQ       = 10029;    //GetGuildPracticeRecordReq\n    GUILD_GET_PRACTICE_RECORD_RSP       = 110029;   //GetGuildPracticeRecordRsp\n    GUILD_SAVE_PRACTICE_RECORD_REQ      = 10030;    //SaveGuildPracticeRecordReq\n    GUILD_SAVE_PRACTICE_RECORD_RSP      = 110030;   //SaveGuildPracticeRecordRsp\n    GUILD_SET_POLICY_REQ                = 10031;    //SetGuildPolicyReq\n    GUILD_SET_POLICY_RSP                = 110031;   //SetGuildPolicyRsp\n    GUILD_SEARCH_BY_CONDITIONS_REQ      = 10032;    //SearchGuildByConditionsReq\n    GUILD_SEARCH_BY_CONDITIONS_RSP      = 110032;   //SearchGuildByConditionsRsp\n    GUILD_WAR_GET_RANK_INFO_EXT_REQ     = 10033;   //GetGuildWarRankExtReq\n    GUILD_WAR_GET_RANK_INFO_EXT_RSP     = 110033;  //GetGuildWarRankExtRsp\n    GUILD_END                           = 10099;\n\n    ARENA_START                         = 10100;\n    ARENA_GET_ALL_REQ                   = 10101;    //ArenaGetAllReq\n    ARENA_GET_ALL_RSP                   = 110101;   //ArenaGetAllRsp\n    ARENA_GET_MATCH_REQ                 = 10102;    //ArenaGetMatchReq\n    ARENA_GET_MATCH_RSP                 = 110102;   //ArenaGetMatchRsp\n    ARENA_GET_RECORD_REQ                = 10103;    //ArenaGetRecordReq\n    ARENA_GET_RECORD_RSP                = 110103;   //ArenaGetRecordRsp\n    ARENA_FIGHT_REQ                     = 10104;    //ArenaFightReq\n    ARENA_FIGHT_RSP                     = 110104;   //ArenaFightRsp\n    ARENA_SWITCH_RANK_REQ               = 10105;    //ArenaSwitchRankReq\n    ARENA_SWITCH_RANK_RSP               = 110105;   //ArenaSwitchRankRsp\n    ARENA_SET_DEFENSE_REQ               = 10106;    //ArenaSetDefenseReq\n    ARENA_SET_DEFENSE_RSP               = 110106;   //ArenaSetDefenseRsp\n    ARENA_UPDATE_ACTOR_MIRROR_REQ       = 10107;    //ArenaUpdateActorMirrorReq\n    ARENA_UPDATE_ACTOR_MIRROR_RSP       = 110107;   //ArenaUpdateActorMirrorRsp\n    ARENA_GET_TOP_RANK_REQ              = 10108;    //ArenaGetTopRankReq\n    ARENA_GET_TOP_RANK_RSP              = 110108;   //ArenaGetTopRankRsp\n    ARENA_GET_OPPONENT_FORMATION_REQ    = 10112;    //ArenaGetOpponentFormationReq\n    ARENA_GET_OPPONENT_FORMATION_RSP    = 110112;   //ArenaGetOpponentFormationRsp\n    ARENA_GET_ROLE_FORMATION_REQ        = 10113;    //ArenaGetRoleFormationReq \n    ARENA_GET_ROLE_FORMATION_RSP        = 110113;   //ArenaGetRoleFormationRsp\n    ARENA_REFRESH_ARENA_CD_REQ          = 10114;    //ArenaRefreshFightCDReq \n    ARENA_REFRESH_ARENA_CD_RSP          = 110114;   //ArenaRefreshFightCDRsp\n    ARENA_RESET_ARENA_FIGHT_NUM_REQ     = 10115;    //ArenaResetFightNumReq \n    ARENA_RESET_ARENA_FIGHT_NUM_RSP     = 110115;   //ArenaResetFightNumRsp\n    ARENA_GET_RANK_REWARD_REQ           = 10116;    //ArenaGetRankRewardReq \n    ARENA_GET_RANK_REWARD_RSP           = 110116;   //ArenaGetRankRewardRsp\n    ARENA_GET_ALL_DEFENSE_REQ           = 10117;    //ArenaGetAllDefenseReq\n    ARENA_GET_ALL_DEFENSE_RSP           = 110117;   //ArenaGetAllDefenseRsp\n    ARENA_SAVE_BATTLE_RECORD_REQ        = 10118;    //ArenaSaveBattleRecordReq\n    ARENA_SAVE_BATTLE_RECORD_RSP        = 110118;   //ArenaSaveBattleRecordRsp\n    ARENA_END                           = 10199;\n    \n    SHOP_START                          = 10200;\n    SHOP_GET_LIST_REQ                   = 10201;    //GetShopInfoReq\n    SHOP_GET_LIST_RSP                   = 110201;   //GetShopInfoRsp\n    SHOP_BUY_GOODS_REQ                  = 10202;    //BuyShopGoodsReq\n    SHOP_BUY_GOODS_RSP                  = 110202;   //BuyShopGoodsRsp\n    SHOP_REFRESH_GOODS_REQ              = 10203;    //RefreshShopGoodsReq\n    SHOP_REFRESH_GOODS_RSP              = 110203;   //RefreshShopGoodsRsp\n    SHOP_BUY_SEAL_GOODS_REQ             = 10204;    //BuySealShopGoodsReq\n    SHOP_BUY_SEAL_GOODS_RSP             = 110204;   //BuySealShopGoodsRsp\n    SHOP_END                            = 10299;\n\n    BATTLE_PASS_START                   = 10300;\n    BATTLE_PASS_GET_INFO_REQ            = 10301;    //GetBattlePassInfoReq\n    BATTLE_PASS_GET_INFO_RSP            = 110301;   //GetBattlePassInfoRsp\n    BATTLE_PASS_TASK_REFRESH_REQ        = 10302;    //BattlePassTaskRefreshReq\n    BATTLE_PASS_TASK_REFRESH_RSP        = 110302;   //BattlePassTaskRefreshRsp\n    BATTLE_PASS_TASK_RWEARD_REQ         = 10303;    //BattlePassTaskRewardReq\n    BATTLE_PASS_TASK_RWEARD_RSP         = 110303;   //BattlePassTaskRewardRsp\n    BATTLE_PASS_BUYLEVEL_REQ            = 10304;    //BattlePassBuyLevelReq\n    BATTLE_PASS_BUYLEVEL_RSP            = 110304;   //BattlePassBuyLevelRsp\n    BATTLE_PASS_GET_REWARD_REQ          = 10305;    //BattlePassGetRewardReq\n    BATTLE_PASS_GET_REWARD_RSP          = 110305;   //BattlePassGetRewardRsp\n    BATTLE_PASS_END                     = 10399;\n    \n    CARNIVAL_START                      = 10400;\n    CARNIVAL_GET_INFO_REQ               = 10401;    //GetCarnivalInfoReq\n    CARNIVAL_GET_INFO_RSP               = 110401;   //GetCarnivalInfoRsp\n    CARNIVAL_GET_REWARD_REQ             = 10402;    //CarnivalGetRewardReq\n    CARNIVAL_GET_REWARD_RSP             = 110402;   //CarnivalGetRewardRsp\n    CARNIVAL_END                        = 10499;\n    \n    GACHA_START                         = 10500;\n    GACHA_GET_INFO_REQ                  = 10501;    //GetGachaInfoReq\n    GACHA_GET_INFO_RSP                  = 110501;   //GetGachaInfoRsp\n    GACHA_DO_REQ                        = 10502;    //DoGachaReq   \n    GACHA_DO_RSP                        = 110502;   //DoGachaRsp\n    GACHA_EXCHANGE_REQ                  = 10503;    //ExchangeGachaReq\n    GACHA_EXCHANGE_RSP                  = 110503;   //ExchangeGachaRsp\n    GACHA_GET_RECORDS_REQ               = 10504;    //GetGachaRecordsReq\n    GACHA_GET_RECORDS_RSP               = 110504;   //GetGachaRecordsRsp\n    GACHA_SET_TARGET_REQ                = 10505;    //SetGachaTargetReq\n    GACHA_SET_TARGET_RSP                = 110505;   //SetGachaTargetRsp\n    GACHA_GET_EXTRA_REQ                 = 10506;    //GetGachaExtraReq\n    GACHA_GET_EXTRA_RSP                 = 110506;  //GetGachaExtraRsp\n    GACHA_END                           = 10599;\n    \n    PURCHASE_START                      = 10600;\n    PURCHASE_BUY_REQ                    = 10601;    //PurchaseBuyReq\n    PURCHASE_BUY_RSP                    = 110601;   //PurchaseBuyRsp\n    PURCHASE_GET_REQ                    = 10602;    //PurchaseGetReq\n    PURCHASE_GET_RSP                    = 110602;   //PurchaseGetRsp\n    PURCHASE_GET_PRODUCTS_REQ           = 10603;    //GetPurchaseProductsReq\n    PURCHASE_GET_PRODUCTS_RSP           = 110603;   //GetPurchaseProductsRsp\n    PURCHASE_BUY_FASHION_REQ            = 10604;    //FashionBuyReq\n    PURCHASE_BUY_FASHION_RSP            = 110604;   //FashionBuyRsp\n    PURCHASE_MONTHCARD_REWARD_REQ       = 10605;    //MonthCardDailyRewardReq\n    PURCHASE_MONTHCARD_REWARD_RSP       = 110605;   //MonthCardDailyRewardRsp\n    PURCHASE_BUY_BATTLEPASS_REQ         = 10606;    //BattlePassBuyReq\n    PURCHASE_BUY_BATTLEPASS_RSP         = 110606;   //BattlePassBuyRsp\n    PURCHASE_CREATE_PAY_ORDER_REQ       = 10607;    //CreatePayOrderReq\n    PURCHASE_CREATE_PAY_ORDER_RSP       = 110607;   //CreatePayOrderRsp\n    PURCHASE_CANCEL_PAY_ORDER_REQ       = 10608;    //CancelPayOrderReq\n    PURCHASE_CANCEL_PAY_ORDER_RSP       = 110608;   //CancelPayOrderRsp\n    PURCHASE_FINISH_PAY_ORDER_REQ       = 10609;    //FinishPayOrderReq\n    PURCHASE_FINISH_PAY_ORDER_RSP       = 110609;   //FinishPayOrderRsp\n    PURCHASE_FETCH_WEEK_PAY_REWARD_REQ  = 10610;    //FetchWeekPayRewardReq\n    PURCHASE_FETCH_WEEK_PAY_REWARD_RSP  = 110610;   //FetchWeekPayRewardRsp\n    PURCHASE_END                        = 10699;\n    \n    EXPEDITION_START                    = 10700;    \n    EXPEDITION_GET_INFO_REQ             = 10701;    //GetExpeditionInfoReq\n    EXPEDITION_GET_INFO_RSP             = 110701;   //GetExpeditionInfoRsp\n    EXPEDITION_GET_REWARD_REQ           = 10703;    //GetExpeditionRewardReq\n    EXPEDITION_GET_REWARD_RSP           = 110703;   //GetExpeditionRewardRsp\n    EXPEDITION_END                      = 10799;\n    \n    ACTIVITY_START                      = 10800;\n    ACTIVITY_GET_ALL_REQ                = 10801;    //GetActivityAllReq\n    ACTIVITY_GET_ALL_RSP                = 110801;   //GetActivityAllRsp\n    ACTIVITY_SIGNIN_REQ                 = 10802;    //ActivitySignInReq\n    ACTIVITY_SIGNIN_RSP                 = 110802;   //ActivitySignInRsp\n    ACTIVITY_STAGE_SHOP_BUY_REQ         = 10803;    //ActivityStageShopBuyReq\n    ACTIVITY_STAGE_SHOP_BUY_RSP         = 110803;   //ActivityStageShopBuyRsp\n    ACTIVITY_STAGE_TASK_REWARD_REQ      = 10804;    //ActivityStageTaskRewardReq\n    ACTIVITY_STAGE_TASK_REWARD_RSP      = 110804;   //ActivityStageTaskRewardRsp\n    ACTIVITY_SEARCH_REQ                 = 10805;    //ActivitySearchReq\n    ACTIVITY_SEARCH_RSP                 = 110805;   //ActivitySearchRsp\n    ACTIVITY_GET_BANNER_REQ             = 10806;    //GetAllBannerReq\n    ACTIVITY_GET_BANNER_RSP             = 110806;   //GetAllBannerRsp\n    ACTIVITY_GET_OP_ACTIVITY_BY_ID_REQ  = 10807;    //GetOpActivityByIdReq\n    ACTIVITY_GET_OP_ACTIVITY_BY_ID_RSP  = 110807;   //GetOpActivityByIdRsp\n    ACTIVITY_GET_RECOMMEND_IMG_REQ      = 10808;    //GetAllRecommendImgReq\n    ACTIVITY_GET_RECOMMEND_IMG_RSP      = 110808;   //GetAllRecommendImgRsp\n    ACTIVITY_STAGE_SIGNIN_REQ           = 10809;    //ActivityStageSignInReq\n    ACTIVITY_STAGE_SIGNIN_RSP           = 110809;   //ActivityStageSignInRsp\n    ACTIVITY_STAGE_GET_MINIGAME_REQ     = 10810;    //ActivityGetMiniGameReq\n    ACTIVITY_STAGE_GET_MINIGAME_RSP     = 110810;   //ActivityGetMiniGameRsp\n    ACTIVITY_STAGE_PLAY_MINIGAME_REQ    = 10811;    //ActivityPlayMiniGameReq\n    ACTIVITY_STAGE_PLAY_MINIGAME_RSP    = 110811;   //ActivityPlayMiniGameRsp\n    ACTIVITY_STAGE_RWRAD_MINIGAME_REQ   = 10812;    //ActivityRewardMiniGameReq\n    ACTIVITY_STAGE_RWRAD_MINIGAME_RSP   = 110812;   //ActivityRewardMiniGameRsp\n    ACTIVITY_RETURN_SIGN_IN_REQ         = 10813;    //ActivityReturnSignInReq\n    ACTIVITY_RETURN_SIGN_IN_RSP         = 110813;   //ActivityReturnSignInRsp\n    ACTIVITY_GET_REVIEW_REQ             = 10814;    //GetActivityReviewInfoReq\n    ACTIVITY_GET_REVIEW_RSP             = 110814;   //GetActivityReviewInfoRsp\n    ACTIVITY_REVIEW_SHOP_BUY_REQ        = 10815;    //ActivityReviewShopBuyReq\n    ACTIVITY_REVIEW_SHOP_BUY_RSP        = 110815;   //ActivityReviewShopBuyRsp\n    ACTIVITY_REVIEW_UNLOCK_REQ          = 10816;    //ActivityReviewUnlockReq\n    ACTIVITY_REVIEW_UNLOCK_RSP          = 110816;   //ActivityReviewUnlockRsp\n    ACTIVITY_DO_TURNTABLE_REQ           = 10817;    //ActivityDoTurnTableReq\n    ACTIVITY_DO_TURNTABLE_RSP           = 110817;   //ActivityDoTurnTableRsp\n    ACTIVITY_TURNTABLE_GET_FREE_REQ     = 10818;   //ActivityTurnTableGetFreeReq\n    ACTIVITY_TURNTABLE_GET_FREE_RSP     = 110818;   //ActivityTurnTableGetFreeRsp\n    ACTIVITY_GET_GAME_TOP_RANK_REQ      = 10819;   //ActivityGetGameTopRankReq\n    ACTIVITY_GET_GAME_TOP_RANK_RSP      = 110819;   //ActivityGetGameTopRankRsp\n    ACTIVITY_DO_TURNTABLE_ROUND_REQ     = 10820;    //ActivityDoTurnTableRoundReq\n    ACTIVITY_DO_TURNTABLE_ROUND_RSP     = 110820;   //ActivityDoTurnTableRoundRsp\n    ACTIVITY_FETCH_ACCUM_RECHARGE_REWARD_REQ = 10821; //FetchAccumRechargeRewardReq\n    ACTIVITY_FETCH_ACCUM_RECHARGE_REWARD_RSP = 110821;//FetchAccumRechargeRewardRsp\n    ACTIVITY_RETURNPRO_SIGNIN_REQ       = 10822;    //ActivityReturnProSigninReq\n    ACTIVITY_RETURNPRO_SIGNIN_RSP       = 110822;   //ActivityReturnProSigninRsp\n    ACTIVITY_RETURNPRO_SHOP_BUY_REQ     = 10823;    //ActivityReturnProShopBuyReq\n    ACTIVITY_RETURNPRO_SHOP_BUY_RSP     = 110823;   //ActivityReturnProShopBuyRsp\n    ACTIVITY_RETURNPRO_TASK_REWARD_REQ  = 10824;    //ActivityReturnProTaskRewardReq\n    ACTIVITY_RETURNPRO_TASK_REWARD_RSP  = 110824;   //ActivityReturnProTaskRewardRsp\n    ACTIVITY_GET_STAGE_DROP_MULTI_REQ   = 10825;    //ActivityGetStageDropMultiReq\n    ACTIVITY_GET_STAGE_DROP_MULTI_RSP   = 110825;   //ActivityGetStageDropMultiRsp\n    ACTIVITY_END                        = 10899;\n    \n    PLANT_START                         = 10900;\n    PLANT_GET_INFO_REQ                  = 10901;    //GetPlantInfoReq\n    PLANT_GET_INFO_RSP                  = 110901;   //GetPlantInfoRsp\n    PLANT_FLOWER_REWARD_REQ             = 10902;    //RewardFlowerReq\n    PLANT_FLOWER_REWARD_RSP             = 110902;   //RewardFlowerRsp\n    PLANT_TASK_REWARD_REQ               = 10903;    //RewardPlantTaskReq\n    PLANT_TASK_REWARD_RSP               = 110903;   //RewardPlantTaskRsp\n    PLANT_END                           = 10999;\n    \n    COMMON_TASK_START                   = 11000;\n    COMMON_TASK_GET_INFO_REQ            = 11001;    //GetCommonTaskInfoReq\n    COMMON_TASK_GET_INFO_RSP            = 111001;   //GetCommonTaskInfoRsp\n    COMMON_TASK_REPLACE_REQ             = 11002;    //CommonTaskReplaceReq\n    COMMON_TASK_REPLACE_RSP             = 111002;   //CommonTaskReplaceRsp\n    COMMON_TASK_REWARD_REQ              = 11003;    //CommonTaskRewardReq\n    COMMON_TASK_REWARD_RSP              = 111003;   //CommonTaskRewardRsp\n    COMMON_TASK_REFRESH_REQ             = 11004;    //GetTaskRefreshStampReq\n    COMMON_TASK_REFRESH_RSP             = 111004;   //GetTaskRefreshStampRsp\n    COMMON_TASK_END                     = 11999;\n    \n    COMMON_GIFT_START                   = 12000;\n    COMMON_GIFT_GET_INFO_REQ            = 12001;    //GetGiftInfoReq\n    COMMON_GIFT_GET_INFO_RSP            = 112001;   //GetGiftInfoRsp\n    COMMON_GIFT_BUY_REQ                 = 12002;    //BuyGiftReq\n    COMMON_GIFT_BUY_RSP                 = 112002;   //BuyGiftRsp\n    COMMON_GIFT_REWARD_REQ              = 12003;    //GetGiftRewardReq\n    COMMON_GIFT_REWARD_RSP              = 112003;   //GetGiftRewardRsp\n    COMMON_GIFT_END                     = 12999;\n    \n    SUPPLY_START                        = 13000;\n    SUPPLY_GET_INFO_REQ                 = 13001;    //GetSupplyInfoReq\n    SUPPLY_GET_INFO_RSP                 = 113001;   //GetSupplyInfoRsp\n    SUPPLY_REWARDED_REQ                 = 13002;    //RewardSupplyReq\n    SUPPLY_REWARDED_RSP                 = 113002;   //RewardSupplyRsp\n    SUPPLY_END                          = 13999;\n    \n    BUFF_STAGE_START                    = 14000;\n    BUFF_STAGE_GET_INFO_REQ             = 14001;    //BuffStageGetInfoReq\n    BUFF_STAGE_GET_INFO_RSP             = 114001;   //BuffStageGetInfoRsp\n    BUFF_STAGE_REWARD_REQ               = 14002;    //BuffStageRewardReq\n    BUFF_STAGE_REWARD_RSP               = 114002;   //BuffStageRewardRsp\n    BUFF_STAGE_END                      = 14999;\n    \n    CYCLE_TASK_START                    = 15000;\n    CYCLE_TASK_GET_INFO_REQ             = 15001;    //GetCycleTaskInfoReq\n    CYCLE_TASK_GET_INFO_RSP             = 115001;   //GetCycleTaskInfoRsp\n    CYCLE_TASK_REWARD_REQ               = 15002;    //CycleTaskRewardReq\n    CYCLE_TASK_REWARD_RSP               = 115002;   //CycleTaskRewardRsp\n    CYCLE_TASK_END                      = 15999;\n    \n    AGREEMENT_START                     = 16000;\n    AGREEMENT_GET_INFO_REQ              = 16001;    //GetAgreementInfoReq\n    AGREEMENT_GET_INFO_RSP              = 116001;   //GetAgreementInfoRsp\n    AGREEMENT_REWARD_REQ                = 16002;    //RewardAgreementReq\n    AGREEMENT_REWARD_RSP                = 116002;   //RewardAgreementRsp\n    AGREEMENT_END                       = 16999;\n    \n    DISPATCH_START                      = 17000;\n    DISPATCH_GET_INFO_REQ               = 17001;    //GetDispatchInfoReq\n    DISPATCH_GET_INFO_RSP               = 117001;   //GetDispatchInfoRsp\n    DISPATCH_START_REQ                  = 17002;    //StartDispatchInfoReq\n    DISPATCH_START_RSP                  = 117002;   //StartDispatchInfoRsp\n    DISPATCH_REWARD_REQ                 = 17003;    //RewardDispatchInfoReq\n    DISPATCH_REWARD_RSP                 = 117003;   //RewardDispatchInfoRsp\n    CANCEL_REWARD_REQ                   = 17004;    //CancelDispatchInfoReq\n    CANCEL_REWARD_RSP                   = 117004;   //CancelDispatchInfoRsp\n    DISPATCH_END                        = 17999;\n    \n    LIMIT_CHALLENGE_START               = 18000;\n    LIMIT_CHALLENGE_GET_INFO_REQ        = 18001;    //GetLimitChallengeInfoReq\n    LIMIT_CHALLENGE_GET_INFO_RSP        = 118001;   //GetLimitChallengeInfoRsp\n    LIMIT_CHALLENGE_RESET_REQ           = 18002;    //ResetLimitChallengeReq\n    LIMIT_CHALLENGE_RESET_RSP           = 118002;   //ResetLimitChallengeRsp\n    LIMIT_CHALLENGE_REWARD_TASK_REQ     = 18003;    //RewardLimitChallengeTaskReq\n    LIMIT_CHALLENGE_REWARD_TASK_RSP     = 118003;   //RewardLimitChallengeTaskRsp\n    LIMIT_CHALLENGE_END                 = 18999;\n}\n\nenum RET_CODE {\n    RC_OK                               = 0;                //正常\n    RC_INTERNAL_SERVER_ERROR            = 500;              //内部服务错误\n    RC_PARAM_ERROR                      = 1000;             //参数错误\n    RC_PB_ERROR                         = 1001;             //proto buffer序列化反序列化错误\n    RC_NO_MSG_HANDLER                   = 1002;             //没有找到消息处理器\n    RC_DB_NOT_EXIST                     = 1003;             //数据库不存在\n    RC_DB_OP_ERROR                      = 1004;             //DB操作失败\n    RC_DATA_NOT_FOUND                   = 1005;             //未查询到数据\n    RC_RPC_ERROR                        = 1006;             //RPC调用失败\n    RC_ID_EXHAUSTED                     = 1007;             //ID耗尽\n    RC_DELAY_RESPONSE                   = 1008;             //延时回复\n    RC_SERVICE_ABNORMAL                 = 1009;             //服务异常\n    RC_SERVICE_TIMEOUT                  = 1010;             //服务超时\n    RC_REDIS_ABNORMAL                   = 1011;             //redis服务异常\n    RC_INTERNAL_DATA_ERROR              = 1012;             //内部数据错误\n    RC_TRANSACTION_OP_NOT_SUPPORTED     = 1013;             //不支持的事务操作\n    RC_DB_DUPLICATE_KEY_ERROR           = 1014;             //DB键值重复\n    RC_RSP_PKG_CACHE_EXPIRE             = 1015;             //缓存的回复包过期\n    RC_SERVICE_CLOSED                   = 1016;             //服务器未开启\n    RC_SERVICE_BUSY                     = 1017;             //服务器忙，排队等待\n    RC_GAIN_DISTRIBUTE_LOCK_FAIL        = 1018;             //获取分布式锁失败\n    RC_ALL_GAME_SERVER_FULL             = 1019;             //服务器人数已满, 暂时无法登录\n    RC_RPC_NATS_ABNORMAL                = 1020;             //RPC nats 异常\n    RC_ALLOC_WORKER_ID_FAIL             = 1021;             //workerId 分配失败\n    RC_NO_AVAILABLE_GAME_NODE           = 1022;             //没有可用的 gamesvr 节点\n    RC_RESEND_CACHE_MISS                = 1023;             //重发请求缓存 miss\n\n    \n    RC_ACCOUNT_EXIST                    = 1100;             //账号已存在\n    RC_WRONG_ACCOUNT_OR_PASSWORD        = 1101;             //账号不存在或密码错误\n    RC_TOKEN_INVALID                    = 1102;             //token失效\n    RC_TOKEN_EXPIRE                     = 1103;             //token已过期\n    RC_TOKEN_NOT_AUTHED                 = 1104;             //未验证token\n    RC_TOKEN_ILLEGAL                    = 1105;             //token不合法\n    RC_ENTER_GAME_FAIL                  = 1106;             //进入gameSvr失败\n    RC_ACTOR_NOT_EXIST                  = 1107;             //角色不存在\n    RC_ACTOR_OFFLINE                    = 1108;             //角色离线\n    RC_CONFIG_DATA_NOT_EXIST            = 1109;             //配置数据不存在\n    RC_CONFIG_DATA_ERROR                = 1110;             //配置数据错误\n    RC_ACTOR_LEVEL_LOW                  = 1111;             //团队等级不达标\n    RC_ACCOUNT_NOT_EXIST                = 1112;             //账号不存在\n    RC_FUNCTION_NOT_UNLOCK              = 1113;             //功能未开启\n    RC_SERVER_IN_MAINTAIN               = 1114;             //服务器维护中\n    RC_NO_PRIVILEGE                     = 1115;             //无权限\n    RC_REACH_USER_CREATE_LIMIT          = 1116;             //已达到服务器创建角色数量限制\n\n    RC_INHERIT_CODE_OR_PASSWORD_WRONG   = 1150;             //引继码或密码错误\n    RC_INHERIT_CODE_INVALID             = 1151;             //引继码已失效\n    RC_INHERIT_ACCOUNT_EXIST            = 1152;             //引继账号已存在\n\n    RC_ITEM_NOT_ENOUGH                  = 1200;             //物品不足\n    RC_ITEM_NOT_EXIST                   = 1201;             //物品不存在\n    RC_ITEM_BUY_TIMES_MAX               = 1202;             //购买次数达到上限\n    RC_ITEM_COUNT_NOT_ENOUGH            = 1203;             //物品数量不足\n    RC_ITEM_CANNOT_SALE                 = 1204;             //物品不能卖出\n    RC_ITEM_NOT_CONFORM_EXCHANGE_RULE   = 1205;             //不符合兑换规则\n    RC_ITEM_COUNT_MAX                   = 1206;             //资源数量上限\n    RC_ITEM_EMOJI_NOT_OWN               = 1207;             //暂未获得该表情\n\n    RC_MAIL_NOT_EXIST                   = 1250;             //邮件不存在\n    RC_MAIL_ATTACHMENT_FETCHED          = 1251;             //已领取附件\n    RC_MAIL_EXPIRED                     = 1252;             //邮件已过期\n    RC_MAIL_CANNOT_DELETE               = 1253;             //该邮件不能删除\n\n    RC_CARD_LEVEL_LIMIT                 = 1300;             //卡牌等级达到上限\n    RC_CARD_QUALITY_LIMIT               = 1301;             //卡牌突破达到上限\n    RC_CARD_NOT_EXIST                   = 1302;             //卡牌不存在\n    RC_CARD_SKILL_NOT_UNLOCKED          = 1303;             //卡牌技能未解锁\n    RC_CARD_SKILL_LEVEL_LIMIT           = 1304;             //卡牌技能等级达到上限\n    RC_CARD_GRADE_LIMIT                 = 1305;             //卡牌觉醒达到上限\n    RC_CARD_LEVEL_NOT_MAX               = 1306;             //卡牌等级未达到上限\n    RC_CARD_QUALITY_NOT_SATISFIED       = 1307;             //卡牌突破等级不足\n    RC_CARD_NOT_OWN_FASHION             = 1308;             //卡牌没有该时装\n    RC_CARD_GRADE_UP_MATERIAL_ENOUGH    = 1311;             //已拥有足够的觉醒材料\n\n    RC_SCENE_CHAPTER_NOT_OPEN           = 1400;             //章节未开启\n    RC_SCENE_PRE_NOT_PASS               = 1401;             //前置关卡未通过\n    RC_SCENE_CHALLENGE_COUNT_MAX        = 1403;             //关卡挑战次数已达上限\n    RC_SCENE_NOT_UNLOCKED               = 1404;             //副本未解锁\n    RC_SCENE_NOT_OPEN                   = 1405;             //副本暂未开放\n    RC_SCENE_SVR_BATTLE_CALC_UN_MATCH   = 1406;             //服务器计算的战斗结果和客户端的不一致\n    RC_SCENE_BATTLE_INIT_DATA_ERROR     = 1407;             //战斗初始化数据错误\n    RC_SCENE_CHAPTER_REWARD_FETCHED     = 1408;             //章节奖励已领取\n    RC_SCENE_NOT_PASS_CHAPTER           = 1409;             //未通关章节\n    RC_SCENE_CUR_STAGE_NOT_OPEN         = 1410;             //当前关卡未开启\n    RC_SCENE_STAGE_REWARD_FETCHED       = 1411;             //关卡奖励已领取\n    RC_SCENE_NOT_PASS_STAGE             = 1412;             //未通过该关卡\n\n    RC_RELATION_BEEN_FRIEND             = 1500;             //已建立好友关系\n    RC_RELATION_APPLYING                = 1502;             //已申请添加对方为好友\n    RC_RELATION_BLOCK_TARGET            = 1503;             //已屏蔽对方, 不能添加好友\n    RC_RELATION_BLOCKED_BY_TARGET       = 1504;             //已被对方屏蔽\n    RC_RELATION_FRIEND_MAX              = 1506;             //当前好友数量达到上限\n    RC_RELATION_TARGET_FRIEND_MAX       = 1507;             //对方好友数量达到上限\n    RC_RELATION_FRIEND_AND_APPLYING_MAX = 1508;             //当前好友和已申请数量达到上限\n    RC_RELATION_APPLY_CANCELED          = 1510;             //好友申请已被取消\n    RC_RELATION_BLOCK_MAX               = 1511;             //屏蔽列表达到上限\n    RC_RELATION_REMARK_NON_FRIEND       = 1512;             //不是好友, 无法设置备注名\n    RC_RELATION_CANNOT_BLOCK_FRIEND     = 1513;             //无法屏蔽好友\n    RC_RELATION_TARGET_FUNC_NOT_OPEN    = 1514;             //对方的好友功能未开启\n    RC_RELATION_NEED_REM_BLOCK          = 1515;             //该玩家在屏蔽列表中，请先移除屏蔽\n\n\n    RC_TASK_NOT_FINISHED                = 1600;             //任务未完成\n    RC_TASK_HAS_FETCH_REWARD            = 1601;             //已领取奖励\n    RC_TASK_NOT_EXIST                   = 1602;             //任务不存在\n\n    RC_BADGE_LEVEL_MAX                  = 1702;             //徽章等级达到上限\n    RC_BADGE_NOT_ACTIVATED              = 1703;             //徽章未激活\n    RC_BADGE_HAS_WEAR                   = 1704;             //角色已穿戴该徽章\n    RC_BADGE_NOT_WEAR                   = 1705;             //未穿戴该徽章\n    RC_BADGE_NO_DECOMPOSE               = 1706;             //没有可分解的徽章\n\n    RC_GM_REPEATED_MAIL                 = 1800;             //重复发送邮件\n    RC_GM_SYSTEM_MAIL_HAS_SEND          = 1801;             //系统邮件已发送\n\n    RC_BOSS_NOT_EXIST                   = 1903;             //boss不存在\n    RC_ACTIVITY_BOSS_CLOSED             = 1905;             //活动 boss 已关闭\n\n    RC_OP_ACTIVITY_ITEM_NOT_OFF_SHELF   = 2000;             //活动条目未处于下架状态\n    RC_OP_ACTIVITY_ITEM_NOT_REMOVED     = 2001;             //活动条目未处于移除状态\n    RC_OP_ACTIVITY_ITEM_WAIT_VERIFY     = 2002;             //活动条目审核中\n    RC_OP_ACTIVITY_ITEM_CANNOT_SELL     = 2003;             //无法出售\n    RC_OP_LOGIN_NOTICE_EXIST            = 2004;             //登录公告已存在\n    RC_OP_MAIL_ITEM_EXCEED_LIMIT        = 2005;             //邮件附件物品数量超出限制\n    RC_OP_GM_OPERATE_USER_FAIL          = 2006;             //GM 操作玩家失败\n    RC_OP_NO_TARGET_CHANNEL             = 2007;             //没有目标渠道\n\n    RC_MANOR_NOT_FOUND_EVENT            = 2100;             //未找到事件\n    RC_MANOR_EVENT_HAS_FINISHED         = 2101;             //事件已完成\n    RC_MANOR_PRE_NODE_NOT_FINISHED      = 2102;             //前置节点未完成\n    RC_MANOR_EVENT_CANNOT_TRIGGER       = 2103;             //事件不能触发\n    RC_MANOR_NOT_IN_EVENT_GRID          = 2104;             //不在事件格子中\n    RC_MANOR_PRE_EVENT_NOT_FINISHED     = 2106;             //前置事件未完成\n    RC_MANOR_PLOT_EVENT_EXIST_IN_GROUP  = 2107;             //同组支线事件已存在\n    RC_MANOR_PLOT_EVENT_NODE_CONFIG_ERR = 2108;             //支线事件节点配置错误\n    RC_MANOR_FIX_BUILDING_TIMES_OVER    = 2109;             //固定建筑次数已用完\n    RC_MANOR_NO_PLOT_EVENT_CARD         = 2110;             //没有支线事件的角色\n    RC_MANOR_MAP_SUB_NOT_OPEN           = 2111;             //当前不在目标的地图区域中\n    RC_MANOR_PLOT_BATTLE_HAS_FINISHED   = 2112;             //剧情战斗已完成\n    RC_MANOR_ACTIVITY_ROLE_PLOT_SUSPEND = 2113;             //活动支线暂停中\n    RC_MANOR_EVENT_EXPIRE               = 2114;             //该事件已过期\n\n    RC_ROGUE_GAME_RUNNING               = 2200;             //肉鸽: 当前主题局内正在进行中\n    RC_ROGUE_DIFFICULTY_LEVEL_LOCKED    = 2201;             //肉鸽: 该难度等级未解锁\n    RC_ROGUE_CARD_ATTRIB_LEVEL_MAX      = 2202;             //肉鸽: 角色属性升级已达上限\n    RC_ROGUE_TALENT_HAS_LEVELUP         = 2203;             //肉鸽: 天赋已升级\n    RC_ROGUE_PRE_TALENT_NOT_LEVELUP     = 2204;             //肉鸽: 前置天赋未升级\n    RC_ROGUE_PRE_NODE_NOT_FINISHED      = 2205;             //肉鸽: 前置节点未完成\n    RC_ROGUE_CUR_NODE_NOT_FINISHED      = 2206;             //肉鸽: 当前节点未完成\n    RC_ROGUE_RANDOM_POOL_ERR            = 2207;             //肉鸽: 随机池错误\n    RC_ROGUE_NODE_REWARD_NOT_FETCHED    = 2208;             //肉鸽: 还有节点奖励未领取\n    RC_ROGUE_NODE_REWARD_FETCHED        = 2209;             //肉鸽: 该奖励已领取\n    RC_ROGUE_CARD_RECRUITED             = 2210;             //肉鸽: 该角色已招募\n    RC_ROGUE_HAS_OWN_TREASURE           = 2211;             //肉鸽: 已拥有该宝物\n    RC_ROGUE_SHOP_TREASURE_NOT_EXIST    = 2212;             //肉鸽: 商店没有该宝物\n    RC_ROGUE_SHOP_RESET_MAX             = 2213;             //肉鸽: 商店重置次数达到上限\n    RC_ROGUE_GAME_NOT_RUNNING           = 2214;             //肉鸽: 本局未开始\n    RC_ROGUE_THEME_LEVEL_LOW            = 2215;             //肉鸽: 主题等级不足\n    RC_ROGUE_INITIAL_RECRUIT_DONE       = 2216;             //肉鸽: 已完成初始招募\n    RC_ROGUE_NODE_FINISHED_CANNOT_REWARD= 2217;             //肉鸽: 该节点已完成,无法领取奖励\n    RC_ROGUE_OWN_ALL_TREASURE           = 2218;             //肉鸽: 已拥有该节点全部宝物，无法再获得\n    RC_ROGUE_NO_SWEEP_COUNT             = 2219;             //肉鸽: 没有快速探索次数\n    RC_ROGUE_CUR_NODE_FINISHED          = 2220;             //肉鸽: 当前节点已完成\n\n    RC_EXCHANGE_CODE_NOT_EXIST          = 2300;             //兑换码不存在\n    RC_EXCHANGE_CODE_USED               = 2301;             //该兑换码已使用\n    RC_EXCHANGE_CODE_USE_TIMES_MAX      = 2302;             //该兑换码的兑换次数已达上限\n    RC_EXCHANGE_CODE_EXPIRE             = 2303;             //兑换码已过期\n    RC_EXCHANGE_CODE_NO_PERMISSION      = 2304;             //没有该兑换码使用权限\n    RC_EXCHANGE_CODE_LEVEL_LOW          = 2306;             //无法使用该兑换码, 等级需要达到%s级\n    RC_EXCHANGE_CODE_LEVEL_HIGH         = 2307;             //无法使用该兑换码, 等级不能超过%s级\n\n    //公会战\n    RC_GUILD_WAR_NOT_START              = 2400;             //公会战未开启\n    RC_GUILD_WAR_SKILL_NOT_EXIST        = 2401;             //不存在该战术技能\n    RC_GUILD_WAR_SKILL_LEVEL_MAX        = 2402;             //该战术技能已达最高等级\n    RC_GUILD_WAR_NOT_PARTICIPATE        = 2403;             //暂未参与公会战\n    RC_GUILD_WAR_BOSS_DEAD              = 2404;             //该 boss 已阵亡\n    RC_GUILD_WAR_NO_FIGHT_COUNT         = 2405;             //今日挑战次数已用完\n    RC_GUILD_WAR_COMPENSATE_NOT_EXIST   = 2406;             //不存在该延长阵容\n    RC_GUILD_WAR_CANNOT_REPEAT_USE_CARD = 2407;             //不能重复使用角色\n    RC_GUILD_WAR_FIGHT_STATE_FINISHED   = 2408;             //公会战挑战期已结束\n    RC_GUILD_WAR_BOSS_DEAD_BEFORE       = 2409;             //该 boss 已先阵亡,结算失败\n    RC_GUILD_WAR_FIGHT_CANNOT_EXIT      = 2410;             //公会战挑战期间不能退出公会\n    RC_GUILD_WAR_FIGHT_CANNOT_DISMISS   = 2411;             //公会战挑战期间不能解散\n    RC_GUILD_WAR_FIGHT_CANNOT_KICK      = 2412;             //公会战挑战期间不能踢出成员\n\n    //印章\n    RC_SEAL_LEVEL_MAX                   = 2413;             //印章已达最高级\n    RC_SEAL_BIG_LEVEL_LIMIT             = 2414;             //大印章等级已达到上限\n    RC_SEAL_BIG_QUALITY_MAX             = 2415;             //大印章突破已达到上限\n    RC_SEAL_BIG_ADD_UP_MAX              = 2416;             //大印章增幅已达到上限\n    RC_SEAL_BIG_LEVEL_LOW               = 2417;             //大印章等级不足\n\n    // 第三方 sdk 返回的错误码转换\n    //bilbili 错误码\n    RC_BILIBILI_ACCOUNT_NOT_LOGIN       = 3000;             //帐号未登陆\n    RC_BILIBILI_ACCOUNT_BANNED          = 3001;             //账号被封停\n    RC_BILIBILI_PARAM_ERROR             = 3002;             //请求参数错误\n    RC_BILIBILI_SERVER_INTERNAL_ERROR   = 3004;             //服务器内部错误\n    RC_BILIBILI_CALL_TOO_RAPID          = 3005;             //调用速度过快\n    RC_BILIBILI_USER_NOT_ACTIVE         = 3006;             //游戏封测，用户未激活\n    //bilbili 错误码---end\n\n    RC_IM_GROUP_MAX_MEMBERS             = 5202;             //群聊成员数量达上限\n    RC_IM_WORLD_GROUP_NOT_EXIST         = 5204;             //世界频道不存在\n    RC_IM_CHANNEL_IN_CD                 = 5205;             //频道 cd 中\n    RC_IM_MUTED_BY_SYSTEM               = 5206;             //被系统禁言中\n    RC_IM_MUTED_REASON_SENSITIVE        = 5207;             //禁言原因: 多次发送敏感词\n    RC_IM_MUTED_REASON_REPORT_SENSITIVE = 5208;             //禁言原因: 被多人举报且含有敏感词\n    RC_IM_MUTED_REASON_REPORT           = 5209;             //禁言原因: 被多人举报\n    RC_IM_MUTED_REASON_REPEAT_MSG       = 5210;             //禁言原因: 连续发送重复消息\n    RC_IM_MUTED_REASON_GM               = 5211;             //禁言原因: 被 GM 禁言\n\n    RC_GUILD_NOT_EXIST                  = 5300;             //公会不存在\n    RC_GUILD_NOT_IN                     = 5301;             //未在公会中\n    RC_GUILD_HAS_IN                     = 5302;             //已在公会中\n    RC_GUILD_IN_JOIN_CD                 = 5303;             //申请加入公会CD中\n    RC_GUILD_MEMBER_MAX                 = 5304;             //公会成员达到上限\n    RC_GUILD_APPLICANT_MAX              = 5305;             //公会申请人达到上限\n    RC_GUILD_USER_APPLIED_MAX           = 5306;             //玩家申请的公会数量达到上限\n    RC_GUILD_APPLICANT_NOT_EXIST        = 5307;             //该申请人不存在\n    RC_GUILD_VICE_LEADER_MAX            = 5308;             //副队长数量达到上限\n    RC_GUILD_NOT_MEMBER                 = 5309;             //对方不是公会成员\n    RC_GUILD_NO_PERMISSION              = 5310;             //没有操作权限\n    RC_GUILD_NAME_OCCUPIED              = 5311;             //公会名字已被占用\n    RC_GUILD_IN_RECOMMEND_CD            = 5312;             //公会推荐 CD 中\n    RC_GUILD_IMPEACHING                 = 5313;             //正在弹劾中\n    RC_GUILD_NOT_MEET_IMPEACH_COND      = 5314;             //不满足弹劾条件\n    RC_GUILD_NO_IMPEACH_VOTE_PERMISSION = 5315;             //目前没有投票权限\n    RC_GUILD_NOT_IMPEACHING             = 5316;             //目前不在弹劾期\n    RC_GUILD_IMPEACH_VOTED              = 5317;             //弹劾队长已投票\n    RC_GUILD_IMPEACH_INITIATOR_NO_EXIT  = 5318;             //弹劾期间发起人不能退出公会\n    RC_GUILD_IMPEACH_INITIATOR_NO_KICK  = 5319;             //不能踢出弹劾发起人\n    RC_GUILD_NOT_FOUND_PROPER_GUILD     = 5320;             //未找到合适的公会\n    RC_GUILD_NO_QUICK_JOIN_LEVEL_LIMIT  = 5321;             //不能快速加入设置了等级条件的公会\n    RC_GUILD_REJECT_JOIN                = 5322;             //探险队拒绝加入\n    RC_GUILD_CHAT_BLOCKED_BY_GM         = 5323;             //探险队聊天被 GM 屏蔽\n    RC_GUILD_NOT_OWN_HEAD_ID            = 5324;             //暂未获得该头像\n\n    RC_ARENA_NOT_FOUND                  = 5400;             //未找到赛区\n    RC_ARENA_ACTOR_CLOSED\t            = 5402;             //竞技场关闭中\n    RC_ARENA_FIGHT_NUM_EXIST\t        = 5403;             //还有挑战次数不能重置\n    RC_ARENA_FIGHT_CD\t                = 5404;             //竞技场挑战CD中\n    RC_ARENA_FIGHT_NO_NUM   \t        = 5405;             //竞技场挑战次数不足\n    RC_ARENA_OPPONENT_CHANGE       \t    = 5407;             //竞技场对手已经变化\n    RC_ARENA_TARGET_CANT_FIGHT          = 5408;             //竞技场对上无法挑战\n    \n    RC_SHOP_GOODS_NOT_EXIST             = 5501;             //商品不存在\n    RC_SHOP_GOODS_SOLD_OUT              = 5502;             //商品已售完\n    RC_SHOP_GRID_NOT_UNLOCKED           = 5504;             //商品未解锁\n    \n    RC_GACHA_POOL_LOCKED                = 5601;             //卡池未解锁\n    RC_GACHA_COUNT_MAX                  = 5602;             //已经达到抽取次数上限\n    RC_GACHA_POINT_NOT_ENOUGH           = 5603;             //积分不足\n    RC_GACHA_EXCHANGE_LIMIT_MAX         = 5604;             //兑换达到上限\n    RC_GACHA_EXTRA_REWARDED             = 5605;             //额外奖励已经领取\n    RC_GACHA_EXTRA_CARD_NOT_FOUND       = 5606;             //额外奖励卡片不存在\n\n    RC_SIGN_HAS_SIGNED                  = 5701;             //已经签过到\n    \n    RC_ACTOR_BANNED                     = 5801;             //角色被ban\n    \n    RC_BATTLEPASS_OUT_TIME              = 5901;             //通行证未在有效期\n    RC_BATTLEPASS_EXP_MAX               = 5902;             //通行证经验上限\n    RC_BATTLEPASS_NO_TASK               = 5903;             //通行证没有可以刷新的任务\n    \n    RC_CARNIVAL_REWARDED                = 6001;             //嘉年华奖励已经领取\n    RC_CARNIVAL_CLOSED                  = 6002;             //嘉年华活动已关闭\n\n    RC_PURCHASE_MONTHCARD_REWARDED      = 6100;             //月卡已经领取过\n    RC_PURCHASE_MONTHCARD_EXPIRED       = 6101;             //月卡已经到期\n    RC_PURCHASE_MONTHCARD_MAX           = 6102;             //月卡天数已满\n    \n    RC_ACTIVITY_NOT_EXIST               = 6201;             //活动不存在\n    RC_ACTIVITY_CAN_NOT_SIGNIN          = 6202;             //无法签到\n    RC_ACTIVITY_ON_SHELF_EXIST          = 6203;             //该活动已上架过\n    \n    RC_BOSS_CHALLENGE_NOT_EXIST         = 6301;             //当前没有挑战活动\n    RC_BOSS_CHALLENGE_FIGHT_NOT_ENOUGH  = 6302;             //挑战次数不足\n    RC_BUFF_STAGE_CHALLENGE_NOT_REACH   = 6303;             //buff stage目标未达成\n    \n    RC_AGREEMENT_REWARDED               = 6401;             //密约已经领取了\n    RC_AGREEMENT_NOT_OPEN               = 6402;             //密约未开放\n}\n\n//日志类型\nenum LOG_ID {\n    LI_NONE                          = 0;\n    //消耗\n    CONSUME_LEVELUP                  = 10001;             //卡牌升级\n    CONSUME_QUALITY_UP               = 10002;             //卡牌突破\n    CONSUME_SKILL_LEVELUP            = 10003;             //卡牌技能升级\n    CONSUME_GRADE_UP                 = 10004;             //卡牌觉醒\n    CONSUME_CHALLENGE_STAGE          = 10005;             //挑战关卡消耗\n    CONSUME_BADGE_ACTIVATE           = 10006;             //徽章激活\n    CONSUME_BADGE_GRADE_UP           = 10007;             //徽章觉醒\n    CONSUME_BADGE_LEVELUP            = 10008;             //徽章升级\n    CONSUME_BUY_ENERGY               = 10009;             //购买体力\n    CONSUME_USE_PACKAGE              = 10011;             //使用礼包时消耗\n    CONSUME_ITEM_EXPIRED             = 10012;             //物品过期后自动删除\n    CONSUME_CREATE_GUILD             = 10013;             //创建公会消耗\n    CONSUME_EXCHANGE_ITEM            = 10014;             //兑换物品消耗\n    CONSUME_CHANGE_GUILD_NAME        = 10015;             //修改公会名字消耗\n    CONSUME_CHANGE_NAME              = 10016;             //修改名字消耗\n    CONSUME_EXCHANGE_ENERGY          = 10018;             //体力药水兑换体力\n    CONSUME_PROCESS_MANOR_EVENT      = 10019;             //处理探索地图事件消耗\n    CONSUME_CLI_GM                   = 10020;             //通过 gm 指令消耗\n    CONSUME_BATCH_USE_ITEMS          = 10021;             //批量使用物品\n    CONSUME_GACHA_COST               = 10022;             //抽卡消耗\n    CONSUME_BUY_BATTLEPASS_LEVEL     = 10023;             //购买通行证等级消耗\n    CONSUME_BUY_GIFT                 = 10024;             //礼包购买消耗\n    CONSUME_SALE_ITEM                = 10025;             //卖出物品消耗\n    CONSUME_TASK_ITEM_EXPIRE         = 10026;             //任务物品过期删除\n    CONSUME_RESET_ARENA_FIGHT_NUM    = 10027;             //重置竞技场次数消耗\n    CONSUME_REFRESH_ARENA_FIGHT_CD   = 10028;             //刷新竞技场挑战CD消耗\n    CONSUME_BUY_FASHION              = 10029;             //购买时装消耗\n    CONSUME_FORCE_REFRESH_SHOP_GOODS = 10030;             //强制刷新商店消耗\n    CONSUME_ACTIVITY_SLOT            = 10031;             //活动 slot 消耗\n    CONSUME_BUY_SHOP_GOODS           = 10032;             //购买商店物品消耗\n    CONSUME_DAILY_SUPPLY             = 10033;             //每日补给补领消耗\n    CONSUME_GM_DEDUCT                = 10034;             //GM 扣除\n    CONSUME_ROGUE_ENHANCE_CARD       = 10035;             //肉鸽: 强化角色消耗\n    CONSUME_ROGUE_ACTIVATE_TALENT    = 10036;             //肉鸽: 激活天赋消耗\n    CONSUME_ROGUE_REVIVE_CARD        = 10037;             //肉鸽: 复活角色消耗\n    CONSUME_ROGUE_AUTO_CLEAN         = 10038;             //肉鸽: 单局结束后自动清理资源\n    CONSUME_ROGUE_BUY_TREASURE       = 10039;             //肉鸽: 购买宝物消耗\n    CONSUME_ROGUE_RESET_SHOP         = 10040;             //肉鸽: 重置商店节点消耗\n    CONSUME_ROGUE_RECRUIT            = 10041;             //肉鸽: 招募角色消耗\n    CONSUME_ROGUE_EVENT_STORY        = 10042;             //肉鸽: 事件节点剧情消耗\n    CONSUME_RECHARGE_REFUND_DEDUCT   = 10050;             //充值退款扣除\n    CONSUME_GUILD_WAR_SKILL_LEVELUP  = 10051;             //公会战: 战术技能升级消耗\n    CONSUME_DISPATCH_EXTRA           = 10052;             //额外派遣\n    CONSUME_GUILD_WAR_SEASON_RESET   = 10053;             //公会战: 赛季重置自动扣除\n    CONSUME_WEAR_SEAL                = 10054;             //穿戴印章消耗\n    CONSUME_SEAL_COMPOSITE           = 10055;             //合成印章消耗\n    CONSUME_ACTIVITY_TURNTABLE       = 10056;             //活动转盘\n    CONSUME_ACTIVITY_REVIEW          = 10057;             //回归活动消耗\n    CONSUME_SEAL_BIG_LEVELUP         = 10058;             //大印章升级消耗\n    CONSUME_SEAL_BIG_QUALITY_UP      = 10059;             //大印章突破消耗\n    CONSUME_SEAL_BIG_ADD_UP          = 10060;             //大印章增幅消耗\n    CONSUME_SEAL_HOOK_FAST_COLLECT   = 10061;             //刻印挂机快速采集消耗\n\n    //获得\n    GAIN_ROLE_INITIAL                = 20001;             //获得初始资源\n    GAIN_AUTO_RECOVER                = 20002;             //物品自动回复\n    GAIN_MAIN_LINE_STAGE             = 20003;             //主线剧情副本\n    GAIN_MAIL_ATTACHMENT             = 20004;             //邮件附件\n    GAIN_BUY_ENERGY                  = 20005;             //购买体力\n    GAIN_BUY_SHOP_GOODS              = 20007;             //购买商店商品\n    GAIN_USE_PACKAGE                 = 20009;             //使用礼包时获得\n    GAIN_BATTLEPASS_REWARD           = 20010;             //通行证领奖\n    GAIN_TASK_REWARD                 = 20011;             //任务领奖\n    GAIN_GACHA_REWARD                = 20013;             //招募奖励\n    GAIN_EXCHANGE_ITEM               = 20014;             //兑换物品获得\n    GAIN_BUY_BATTLEPASS_LV           = 20015;             //购买通行证等级\n    GAIN_REWARD_ARENA_TASK           = 20019;             //领取竞技场任务奖励\n    GAIN_REWARD_CARNIVAL             = 20020;             //领取通行证\n    GAIN_PURCHASE_BUY                = 20022;             //内购\n    GAIN_MONTHCARD_REWARD            = 20023;             //月卡领奖\n    GAIN_CHAPTER_REWARD              = 20024;             //章节奖励\n    GAIN_FETCH_STAGE_REWARD          = 20025;             //领取的关卡奖励\n    GAIN_ACTIVITY_SIGNIN             = 20026;             //活动签到\n    GAIN_ACTIVITY_SHOP               = 20027;             //活动商店\n    GAIN_ACTIVITY_TASK               = 20028;             //活动任务\n    GAIN_ACTIVITY_MINIGAME           = 20029;             //活动小游戏\n    GAIN_PLANT_FLOWER_REWARD         = 20032;             //植物花朵奖励\n    GAIN_FINISH_PLOT                 = 20033;             //完成剧情的奖励\n    GAIN_ACTIVITY_SEARCH             = 20034;             //搜索活动\n    GAIN_EXCHANGE_ENERGY             = 20035;             //体力药水兑换体力\n    GAIN_PROCESS_MANOR_EVENT         = 20036;             //处理探索地图事件\n    GAIN_CLI_GM                      = 20037;             //通过 gm 指令获得\n    GAIN_GACHA_EXCHANGE              = 20038;             //招募兑换\n    GAIN_GACHA_EXTRA                 = 20039;             //招募额外奖励\n    GAIN_BATCH_USE_ITEMS             = 20040;             //批量使用物品获得\n    GAIN_NORMAL_SIGNIN               = 20041;             //普通签到\n    GAIN_SALE_ITEM                   = 20042;             //卖出物品获得\n    GAIN_PLAYER_LEVELUP_REWARD       = 20043;             //玩家升级奖励\n    GAIN_BUY_GIFT_PACKAGE            = 20044;             //购买礼包时获得奖励\n    GAIN_DECOMPOSE_BADGE             = 20045;             //分解徽章获得\n    GAIN_BADGE_LEVELUP_RETURN        = 20046;             //徽章升满级时的材料返还\n    GAIN_EXPEDITION_REWARD           = 20047;             //远征奖励\n    GAIN_GIFT_REWARD                 = 20048;             //礼包奖励\n    GAIN_ACTIVITY_TRANS              = 20049;             //活动转化\n    GAIN_ACTIVITY_STAGE              = 20050;             //活动关卡\n    GAIN_DAILY_SUPPLY                = 20051;             //每日补给\n    GAIN_BOSS_CHAllENGE_FIGHT        = 20052;             //boss挑战战斗奖励\n    GAIN_BUFF_STAGE_REWARD           = 20053;             //buff stage奖励\n    GAIN_ROGUE_NODE_REWARD_OPTION    = 20054;             //肉鸽: 节点奖励选项\n    GAIN_ROGUE_THEME_LEVEL_REWARD    = 20055;             //肉鸽: 主题等级奖励\n    GAIN_ROGUE_NEW_GAME              = 20056;             //肉鸽: 开局获得的奖励\n    GAIN_ROGUE_ENTER_NODE_REWARD     = 20057;             //肉鸽: 进入节点的奖励(宝物效果)\n    GAIN_ROGUE_ENTER_NEW_LAYER_REWARD= 20058;             //肉鸽: 进入下一层获得奖励(宝物效果)\n    GAIN_ROGUE_TREASURE_EFFECT_REWARD= 20059;             //肉鸽: 获得宝物触发的一次性奖励\n    GAIN_ROGUE_SETTLE_REWARD         = 20060;             //肉鸽: 结算奖励\n    GAIN_USE_EXCHANGE_CODE           = 20061;             //使用兑换码获得奖励\n    GAIN_AGREEMENT_REWARD            = 20062;             //密约领奖\n    GAIN_DISPATCH_REWARD             = 20063;             //派遣领奖\n    GAIN_DISPATCH_CANCEL_RETURN      = 20064;             //派遣取消返还\n    GAIN_RETURN_SIGN_IN              = 20070;             //回归签到\n    GAIN_SEAL_TAKE_OFF               = 20071;             //取下印章获得\n    GAIN_SEAL_COMPOSITE              = 20072;             //合成印章获得\n    GAIN_WEEK_ACCUM_PAY              = 20073;             //每周累充奖励\n    GAIN_ACTIVITY_TURNTABLE          = 20074;             //活动转盘获得\n    GAIN_SEAL_BIG_HOOK               = 20075;             //大刻印挂机奖励\n    GAIN_ACCUM_RECHARGE_REWARD       = 20076;             //累充奖励\n    GAIN_CARD_HAND_BOOK_REWARD       = 21001;             //角色图鉴奖励\n}\n\n//通知类型\nenum EVENT_TYPE {\n    ET_NONE                 = 0;\n    //推送给客户端的事件, 需要定义一个消息 cmd, 用于客户端导出\n    ET_CARD_UPDATE          = 1;        //CardUpdateNotify      卡牌更新通知\n    ET_IM_NEW_MESSAGE       = 2;        //NewMessageNotify      新消息通知\n    ET_ITEM_CHANGED         = 3;        //SyncItemsRsp          物品变更通知\n    ET_RELATION_CHANGED     = 4;        //RelationChangedNotify 好友请求\n    ET_NEW_MAIL             = 5;        //NewMailNotify         新邮件通知\n    ET_KICK_OFF             = 6;        //KickOffNotify         踢下线\n    ET_MUTED_BY_SYSTEM      = 7;        //MutedBySystemNotify   被系统禁言通知\n    ET_ACTOR_UPDATE         = 8;        //ActorInfoUpdateNotify 玩家信息更新通知\n    ET_NEW_BADGE            = 9;        //NewBadgeNotify        新增徽章通知\n    ET_RELATION_DEL_APPLICANT = 10;     //RelationDelApplicantNotify    删除好友请求通知\n    ET_MANOR_EVENT          = 12;       //ManorEventUpdateNotify    探险地图事件更新\n    ET_GUILD_EVENT          = 13;       //GuildEventNotify      公会事件通知\n    ET_MANOR_CONVEY         = 14;       //ManorConveyNotify     探险地图传送通知\n    ET_MANOR_INFO_UPDATE    = 15;       //ManorInfoUpdateNotify 探险地图信息更新通知\n    ET_BUY_BATTLEPASS_SUCCESS    = 16;     //BattlePassBuySuccessNotify      通行证购买成功通知\n    ET_BOSS_CHALLENGE_HIGH_SCORE = 17;     //BossChallengeHighScoreNotify      boss挑战最高积分通知\n    ET_ROGUE_CARD_UPDATE         = 18;     //RogueCardUpdateNotify  肉鸽角色信息更新通知\n    ET_FASHION_ADD          = 19;     //FashionAddNotify  肉鸽角色信息更新通知\n\n    //服务内部事件\n\n    //玩家进入游戏        在枚举上面写注释,规避客户端导出工具可能出现问题\n    ET_SYS_USER_ENTER_GAME  = 1000;\n    //玩家心跳  HeartBeatNotify\n    ET_SYS_USER_HEARTBEAT   = 1001;\n    //玩家离线\n    ET_SYS_USER_OFFLINE     = 1002;\n    //举报其他玩家\n    ET_SYS_REPORT_USER      = 1003;\n    //通知其他 GuildSvr 节点更新公会的推荐信息  GuildRecommendInfo\n    ET_SYS_GUILD_RECOMMEND  = 1004;\n    //公会解散\n    ET_SYS_GUILD_DISMISSED  = 1005;\n    //玩家进入公会\n    ET_SYS_GUILD_MEMBER_IN  = 1006;\n    //玩家退出公会\n    ET_SYS_GUILD_MEMBER_OUT = 1007;\n    //玩家信息更新    ActorInfo\n    ET_SYS_ACTOR_INFO_UPDATED = 1008;\n    //重新加载系统时间\n    ET_RELOAD_SYS_TIME      = 1009;\n}\n\n//事件通知\nmessage EventNotifyReq {\n    int32 eventType     = 1;    //enum EVENT_TYPE\n    bytes notifyBody    = 2;    //根据eventType对应的结构体解析\n}\n\n//事件通知\nmessage EventNotifyRsp {\n    int32 eventType     = 1;    //enum EVENT_TYPE\n    bytes notifyBody    = 2;    //根据eventType对应的结构体解析\n}\n\n//属性组\nenum ATTRIB_GROUP {\n    AG_NONE     = 0;\n    AG_CARD     = 1;    //卡牌基础属性\n    AG_LEVEL    = 2;    //等级加成\n    AG_QUALITY  = 3;    //突破加成\n    AG_BADGE    = 4;    //徽章加成\n    AG_SKILL    = 5;    //技能加成\n    AG_ROGUE_ENHANCE    = 6;    //肉鸽属性强化加成\n}\n\n//会话信息\nmessage UserSession {\n    string gtwId    = 1;\n    string gameId   = 2;\n    string dbId     = 3;\n}\n\n//邮件信息\nmessage MailInfo {\n    int64 mailUid       = 1;\n    string identify     = 2;    //标识,防止全服邮件重复发送\n    string title        = 3;    //邮件标题\n    string senderName   = 4;    //寄件人姓名\n    string content      = 5;    //邮件内容\n    string attachment   = 6;    //邮件附件 ItemTuple 三元组格式\n    int64 sendStamp     = 7;    //发送时间\n    int64 expireStamp   = 8;    //过期时间  只在发送邮件时设置为过期天数,其他时候都是真正的过期时间戳\n    int64 globalSeq     = 9;    //全服邮件 seq\n    bool canDelete      = 10;   //邮件是否能手动删除\n    bool fetched        = 11;   //是否已领取\n    bool read           = 12;   //是否已读\n\n    bool cliParse       = 13;   //如果为 true, title, senderName, content 字段发送的是文字表 id, 由客户端读取, 用下面几个字段进行参数替换\n    repeated string senderParams  = 14;     //寄件人姓名参数\n    repeated string titleParams   = 15;     //邮件标题中的参数\n    repeated string contentParams = 16;     //邮件内容中的参数\n    bool canPrior       = 17;   //邮件数量超出上限后能否被顶掉\n    string extra        = 18;    //扩充信息\n}\n\n//残血残怒状态\nmessage ObjectState {\n    int64 uid           = 1;\n    int32 id            = 2;    //cardId or monsterId\n    int32 position      = 3;    //位置\n    int64 maxHp         = 4;    //最大血量\n    int64 hp            = 5;    //当前血量\n}\n\n//游戏功能id\nenum FUNCTION_ID {\n    FD_NONE             = 0;\n    FD_BANNER           = 101;      //banner\n    FD_ACTIVITY_DROP    = 104;      //奖励翻倍活动\n    FD_GACHA            = 10103;    //扭蛋 \n    FD_BATTLE_PASS      = 10111;    //通行证\n    FD_ARENA            = 10303;    //竞技场\n    FD_BOSS_CHALLENGE   = 10304;    //BOSS挑战\n    FD_FRIEND           = 10115;    //好友\n    FD_ACTIVITY_SIGNIN  = 10118;    //签到活动\n    FD_ACTIVITY_STAGE   = 10119;    //关卡活动\n    FD_ACTIVITY_SEARCH  = 10123;    //搜索活动\n    FD_ACTIVITY_RETURN  = 10132;    //回归签到\n    FD_ACTIVITY_TURNTABLE  = 10134;    //转盘活动\n    FD_ACTIVITY_TURNTABLE_ROUND  = 10137;    //转盘（多轮）活动\n    FD_ACTIVITY_RETURN_PRO = 10138;    //玩家回归活动\n    FD_BUFF_STAGE       = 11315;    //buff关卡活动\n    FD_LIMIT_CHALLENGE  = 12601;    //限时挑战活动\n\n}\n\nenum ACTIVITY_GACHA_TYPE {\n    AGT_NONE            = 0;\n    AGT_OPNE            = 1;    //扭蛋活动开启\n    AGT_FREE            = 2;    //扭蛋活动免费次数\n}\nmessage DateTime {\n    int32 year      = 1;\n    int32 month     = 2;\n    int32 day       = 3;\n    int32 hour      = 4;\n    int32 minute    = 5;\n    int32 second    = 6;\n}\n\n\nenum CONDITION_TYPE {\n    CT_NONE         = 0;\n    CT_LEVEL        = 100;\n    CT_PASS_STAGE   = 200;\n    CT_CARD_EXP_ADD = 300;\n}\n//阵容类型\nenum BATTLE_FORMATION_TYPE {\n    BFT_NONE    = 0;\n    BFT_1       = 1;\n    BFT_2       = 2;\n    BFT_3       = 3;\n}\n\nenum PLATFORM_TYPE {\n    PFT_NONE         = 0;\n    PFT_ANDROID      = 1;\n    PFT_IOS          = 2;\n}\n\nenum TASK_BELONG_TYPE {\n    TBT_NONE            = 0;\n    TBT_BATTLEPASS      = 1;\n    TBT_CARNIVAL        = 2;\n    TBT_PLANT           = 3;\n    TBT_COMMON          = 4;\n}\nenum CHALLENGE_STAT_TYPE {\n    CST_NONE        = 0;\n    CST_FINISH      = 1;\n    CST_REWARDED    = 2;\n}\nenum TASK_CONDITION_TYPE {\n    TCT_NONE    = 0;\n    TCT_LEVEL                   = 100;  //玩家等级\n    TCT_PASS_STAGE              = 200;  //通关指定关卡\n    TCT_KILL_MONSTER_COUNT      = 201;  //击杀怪物数量\n    TCT_PASS_EXPERIMENT_COUNT   = 202;  //通过试炼次数\n    TCT_PASS_EXPERIMENT_DIFF    = 203;  //通关指定难度试炼\n    TCT_ARENA_FIGHT_COUNT       = 204;  //竞技场挑战次数\n    TCT_ARENA_REACH_RANK        = 205;  //竞技场到达排名 \n    TCT_PASS_EXPERIMENT_HIGH    = 206;  //远征历史最高关卡 \n    TCT_CLIMB_TOWER_COUNT       = 207;  //参与爬塔\n    TCT_BOSS_CHALLENGE          = 208;  //参与个人挑战战斗\n    TCT_GUILD_PRATICE           = 209;  //参与探险队演练\n    TCT_BOSS_CHALLENGE_DIFF     = 210;  //通过指定难度boss挑战\n    TCT_PASS_SPECIAL_STAGE_COUNT= 211;  //通过指定关卡数量\n    TCT_EXPEDITION_FIGHT_COUNT  = 251;  //远征挑战次数\n    TCT_BOSS_FIGHT_COUNT        = 252;  //BOSS挑战次数\n    TCT_BUILDING_FIGHT_COUNT    = 254;  //建筑关卡挑战次数\n    TCT_EXPLORE_ROUGE           = 255;  //成功探索肉鸽\n    TCT_PASS_STAGE_BY_CTYPE     = 256;  //通关指定章节type关卡\n    TCT_MINIGAME_TOTALSCORE     = 257;  //小游戏总计分数\n    TCT_MINIGAME_ONCESCORE      = 258;  //小游戏最高分数\n    TCT_MINIGAME_PLAY_COUNT     = 259;  //小游戏游玩次数\n    TCT_GUILD_WAR_FIGHT_COUNT   = 262;  //公会战挑战次数\n    TCT_GUILD_WAR_SCORE         = 263;  //工会战积分\n    TCT_ACTIVITY_PASS_STAGE_BY_CTYPE    = 264;  //通关活动指定章节类型关卡\n    TCT_ACTIVITY_MINIGAME_TOTALSCORE    = 265;  //活动小游戏总计分数\n    TCT_ACTIVITY_MINIGAME_ONCESCORE     = 266;  //活动小游戏最高分数\n    TCT_ACTIVITY_PLAY_COUNT     = 267;  //活动小游戏游玩次数\n    TCT_CARD_EXP_ADD_COUNT      = 300;  //卡片强化次数\n    TCT_CARD_LEVEL_UP_COUNT     = 301;  //卡片升级次数\n    TCT_CARD_BREAK_COUNT        = 302;  //卡片突破次数\n    TCT_CARD_LEVEL_NUM          = 351;  //卡牌指定等级数量\n    TCT_CARD_SKILL_NUM          = 352;  //卡牌指定技能数量\n    TCT_CARD_BREAK_NUM          = 353;  //卡牌指定突破数量\n    TCT_CARD_GRADE_NUM          = 354;  //卡牌指定觉醒数量\n    TCT_BADGE_LEVEL_NUM         = 355;  //徽章指定等级数量\n    TCT_BADGE_LEVEL_UP_COUNT    = 356;  //徽章指定突破数量\n    TCT_COST_RESOURCE_NUM       = 400;  //资源消耗数量\n    TCT_RESOURCE_NUM            = 401;  //持有资源数量\n    TCT_GET_COIN_NUM            = 451;  //累积获取金币\n    TCT_LOGIN_DAY               = 500;  //连续登陆天数\n    TCT_ONLINE_MIN              = 501;  //累积在线分钟\n    TCT_SHOP_BUY_COUNT          = 502;  //商店购买次数\n    TCT_ENERGY_BUY_COUNT        = 503;  //体力购买次数\n    TCT_GACHA_COUNT             = 504;  //招募次数\n    TCT_GUILD_REWARD_COUNT      = 505;  //工会补给领取次数\n    TCT_MANOR_EVENT_COUNT       = 600;  //大地图事件\n    TCT_MANOR_RESOURCE_NUM      = 601;  //大地图资源\n    TCT_MANOR_SPECIAL_EVENT_COUNT       = 602;  //大地图指定事件\n    TCT_ROGUE_DIFFICULTY_LEVEL_COUNT    = 701;  //指定主题下，通关指定难度N次\n    TCT_ROGUE_COST_TOKEN                = 702;  //指定主题下，单局中累计消耗N货券\n    TCT_ROGUE_EVENT_COUNT               = 703;  //指定主题下，单局中累计完成事件区域N次\n    TCT_ROGUE_TREASURE_PIC              = 704;  //指定主题下，图鉴中解锁N个宝物\n    TCT_ROGUE_COST_ATTRIB_POINT         = 705;  //指定主题下，单局中累计消耗N点荣誉\n    TCT_ROGUE_BATTLE_COUNT              = 706;  //指定主题下，累计通过战斗区域N次\n    TCT_ROGUE_TRIGGER_ENDING_COUNT      = 707;  //指定主题下，完成指定结局ID N次\n    TCT_ROGUE_GAIN_TOKEN                = 708;  //指定主题下，单局中累计获得N货券\n    TCT_ROGUE_SCORE                     = 709;  //指定主题下，指定难度下，单局最高评分达到XXX\n}\n\n\n//所有需要写入db的数据模型在这里定义,避免使用嵌套结构\n\n\n\nmessage UserLoginLog {\n    int64 uin       = 1;\n    string dbId     = 2;\n    string openId   = 3;\n}\n\n//用于分配自增 id 的表  route.incr_id_alloc\nmessage IncrIdAlloc {\n    string name     = 1;\n    int64 incrId    = 2;\n}\n\n//每个服务节点分配的 workerId    route.service_node\nmessage ServiceNodeInfo {\n    string serviceId  = 1;\n    int32 workerId    = 2;\n    int64 stamp       = 3;\n}\n\n//用户账户信息 account.account\nmessage AccountInfo {\n    string accountId    = 1;\n    string password     = 2;\n    string accountType  = 3;    //ssoul wx\n    string openId       = 4;\n    string imei         = 5;\n    string osVersion    = 6;\n    int32 platform      = 7;\n    string channel      = 8;\n    int64 createStamp   = 9;\n}\n\n//引继码 account.inherit_account\nmessage InheritAccountInfo {\n    string inheritCode      = 1;\n    string openId           = 2;\n    string password         = 3;\n    int64 createStamp       = 4;\n    string bindAccountId    = 5;    //该引继码绑定的 accountId\n    int32 used              = 6;\n}\n\n//数据库实例表 route.db_instance_info\nmessage DbInstanceInfo {\n    int32 instanceId    = 1;\n    string uri          = 2;\n    string username     = 3;\n    string password     = 4;\n    int32 mode          = 5;\n}\n\n//数据库路由表 route.db_route\nmessage DbRoute {\n    string dbId         = 1;    //全局唯一\n    string groupName    = 2;    //数据库组名,例如db.go文件中定义的GameDB,一个组下面可以有多个database\n    string database     = 3;    //数据库名字\n    int32 instanceId    = 4;    //DbInstanceInfo.instanceId\n}\n\n\n//用户game分配信息 route.user_game_alloc\nmessage UserGameAlloc {\n    string openId           = 1;    //本地游戏服使用的 openId\n    int64 uin               = 2;\n    string dbId             = 3;    //用户数据所在dbId,对应DbRoute.dbId\n    string deviceId         = 4;    //创建角色时的设备 id\n    string channel          = 5;    //创建角色时的渠道\n    int32 platform          = 6;    //创建角色时的平台 sp_common.proto   enum PLATFORM_TYPE\n    string sdkOpenId        = 7;    //第三方 sdk 的 openId\n}\n\n//用户\n//用户限制信息\nmessage ActorControl {\n    int64 uin           = 1;    //用户Uin\n    int64 banStamp      = 2;    //封号时间\n    int64 terminalStamp = 3;    //封号终止时间    0: 永久封号\n    string operator     = 4;    //操作人\n}\n\n//用户的角色信息 game.actor\nmessage ActorInfo {\n    string openId       = 1;\n    int64 uin           = 2;\n    int32 exp           = 3;\n    int32 level         = 4;\n    int32 power         = 5;\n    string name         = 6;\n    int32 faceId        = 8;\n    int64 createStamp   = 9;\n    int32 loginDays     = 10;   //登录天数\n    int32 platform      = 11;   //创建角色时的平台\n    string channel      = 12;   //渠道\n    string deviceId     = 13;   //创建角色时的设备 id\n    int32 curPlatform   = 16;   //当前平台\n    int32 changeNameCount = 17;  //改名次数\n    ActorHead actorHead = 18;  //头像数据\n    repeated int32 showFashionIds = 19;  //最多 5 个展示角色的 fashionId\n    int32 showFashionIndex = 20;    //当前展示第几个 fashion\n    int32 birthday      = 21;   // 月: birthday / 100   日: birthday % 100\n    int32 activeHandBookGrowId = 22;    //激活的图鉴成长进度 (base_card_hand_book_grow.id)\n}\n\nmessage ActorHead {\n    int32 fashionId   = 1; //头像，对应card fashion表\n    int32 headId      = 2; //头像，对应 base_item 表\n    int32 headRectId  = 3; //头像框，对应 base_item 表\n    int64 headRectStamp = 4;    //头像框到期时间\n    int32 headRectExtra = 5;    //头像框额外字段\n    int64 headRectItemUid = 6;\n}\n\n//需要重置的系统类型\nenum MODULE_RESET_TYPE {\n    MRT_NONE                = 0;\n    MRT_BOSS_DAILY          = 1;\n    MRT_SHOP_DAILY          = 2;\n    MRT_TASK_DAILY          = 3;\n    MRT_TASK_WEEKLY         = 4;\n    MRT_GACHA_DAILY         = 5;\n    MRT_ARENA_DAILY         = 6;\n    MRT_PURCHASE_DAILY      = 7;\n    MRT_PURCHASE_WEEKLY     = 8;\n    MRT_PURCHASE_MONTHLY    = 9;\n    MRT_CARNIVAL_DAILY      = 10;\n    MRT_BATTLE_PASS_WEEKLY  = 11;\n    MRT_EXPEDITION_WEEKLY   = 12;\n    MRT_PLANT_DAILY         = 13;\n    MRT_ARENA_WEEKLY        = 14;\n    MRT_MANOR               = 15;\n    MRT_BATTLE_PASS_DAILY   = 16;\n    MRT_GIFT_DAILY          = 17;\n    MRT_GIFT_WEEKLY         = 18;\n    MRT_GIFT_MONTHLY        = 19;\n    MRT_SUPPLY_DAILY        = 20;\n    MRT_BUFF_STAGE_WEEKLY   = 21;\n    MRT_ROGUE_WEEKLY        = 22;\n    MRT_AGREEMENT_WEEKLY    = 23;\n    MRT_ACTIVITY_DAILY      = 24;\n}\n\n//重置周期\nenum RESET_PERIOD {\n    RP_NONE     = 0;\n    RP_DAILY    = 1;    //每日重置\n    RP_WEEKLY   = 2;    //每周重置\n    RP_MONTHLY  = 3;    //每月重置\n}\n\n//用户状态信息,存储一些不需要下发给客户端的状态数据 game.actor_state\nmessage ActorState {\n    int64 uin                       = 1;\n    int64 globalMailSeq             = 2;    //收取全局邮件的seq\n    int64 lastResetStamp            = 3;    //上次数据重置时间\n    map<int32, int32> cntResources  = 4;    //次数资源\n    int32 signInState               = 5;    //签到状态\n    int64 lastSignInStamp           = 6;    //上次签到时间\n    map<int32, int64> item2RecoverStamp = 7;//物品上次自动恢复时间  itemId -> lastRecoverStamp\n    int64 lastArenaFightStamp       = 8;    //上次竞技场挑战时间\n    repeated string latestEmoji     = 9;    //最近使用的表情\n    bool resInitialed               = 10;   //初始资源是否已发放\n    int64 lastLoginStamp            = 11;   //上次登录时间\n    int32 loginDays                 = 12;   //登录天数\n    uint32 logLoginStamp            = 13;   //用于日志记录的登录时间\n    int32 totalPay                  = 14;   //累积充值额度\n    int32 onlineDuration            = 15;   //在线时长(分)\n    int64 levelupStamp              = 16;   //玩家上次升级时间\n    int32  allSignInDay             = 17;   //玩家总签到天数\n    map<int32, int64> resetStamps   = 18;   //各个系统的重置时间 MODULE_RESET_TYPE -> stamp\n    repeated int32 profileShowCards = 19;   //个人信息面板展示的卡牌\n    int32 winCount                  = 20;   //战斗胜利次数\n    int32 killMobCount              = 21;   //击退魔物数量\n    bool hideResource               = 22;   //是否对别人隐藏物资显示\n    int64 manorUnlockStamp          = 24;   //探险地图功能解锁时间\n    int32 guildOperateState         = 25;   //高 16 位: 是否创建过公会   低 16 位: 是否申请过公会\n    int32 mainLineStage             = 26;   //主线完成的最新关卡\n    int64 itemSyncKey               = 27;\n    int64 cardSyncKey               = 28;\n    int64 badgeSyncKey              = 29;\n    int32 rogueSweepCount           = 30;   //肉鸽扫荡次数\n    int32 badgeLevelCount           = 31;   //徽章累积升级等级\n    int32 rebateTag                 = 32;   //充值返利标识\n    int64 offlineStamp              = 33;   //离线时间\n    map<int32, int32> dropMulti     = 34;   //倍率掉落次数 enum MULTI_DROP_SCENE_GROUP -> cnt\n    int32 birthdayRewardYear        = 35;   //生日发奖年份\n}\n\n//用户客户端设置 game.actor_setting\nmessage ActorSetting {\n    int64 uin       = 1;\n    string settings = 2;\n}\n\n//全服玩家名字\nmessage GlobalActorName {\n    string name = 1;\n    int64 uin   = 2;\n    string dbId = 3;    //玩家所在的 DB\n    int64 stamp = 4;\n}\n\n//用户物品 game.actor_item\nmessage ItemInfo {\n    int64 itemUid       = 1;\n    int64 uin           = 2;\n    int64 count         = 3;\n    int32 itemId        = 4;\n    uint32 expireStamp  = 5;    //物品过期时间戳\n}\n\n//发给离线用户的物品 game.actor_item_offline\nmessage OfflineItem {\n    int64 uid           = 1;\n    int64 uin           = 2;\n    int64 stamp         = 3;\n    int32 logId         = 4;\n    string itemTupleRaw = 5;\n}\n\n//队伍 game.actor_card_team\nmessage CardTeamInfo {\n    int64 uin               = 1;\n    int32 teamId            = 2;\n    string name             = 3;\n    repeated int32 cardIds  = 4;\n}\n\n//用户卡牌 game.actor_card\nmessage CardInfo {\n    int64 cardUid                       = 1;    //卡片唯一标识\n    int64 uin                           = 2;    //所属角色唯一标识\n    int32 cardId                        = 3;    //卡片配置id\n    int32 level                         = 4;    //等级\n    int32 quality                       = 5;    //突破\n    int32 grade                         = 6;    //觉醒等级\n    int32 power                         = 7;    //战力\n    int32 exp                           = 8;    //经验\n    map<int32, int32> skill2Level       = 9;    //技能等级 skillId -> level\n    map<int32, int32> gradeUpSkills     = 10;   //觉醒影响的技能等级 skillId -> level\n    map<int32, int32> attributes        = 11;   //全量属性数据,给客户端下发的数据不包含徽章的加成\n    int32 fashionId                     = 12;   //正在使用的时装 id\n    map<int32, int64>  ownFashionIds    = 13;   //已拥有的时装 id 列表->获得时间\n    repeated int64 wearBadgeUids        = 14;   //当前穿戴的徽章物品 uid\n    repeated int32 badgeSuitIds         = 15;   //当前生效的套装 id\n    repeated string badgeAttributes     = 16;   //徽章加成的属性(单独存储) attrId:initValue:extraRatio\n    map<int32, int32> badgeId2Levels    = 17;   //当前穿戴徽章 badgeId -> level\n    bool focus                          = 18;   //是否关注\n    bool handBookReward                 = 19;   //是否已领取图鉴奖励\n}\n\n//卡牌精简信息\nmessage CardSimple {\n    int64 cardUid          = 1;    //卡片唯一标识\n    int64 uin              = 2;    //所属角色唯一标识\n    int32 cardId           = 3;    //卡片配置id\n    int32 level            = 4;    //等级\n    int32 quality          = 5;    //突破\n    int32 grade            = 6;    //觉醒等级\n    int32 fashionId        = 7;    //正在使用的时装 id\n    int32 position         = 8;    //布阵位置\n}\n\n//卡牌时装\nmessage CardFashions {\n    int64 uin                          = 1;     //所属角色唯一标识\n    map<int32, int64> ownFashionIds    = 2;     //已拥有的时装 id 列表->获得时间\n}\n//玩家卡牌数据更新\nmessage CardUpdate {\n    int32 cardId                            = 1;    //卡片配置id\n    map<int32, int32> basic                 = 2;    //卡牌基本属性变化  enum CARD_BASE_ATTR -> value\n    map<int32, int32> skill2Level           = 3;    //技能等级变化, skillId -> level, 如果要删除技能 level 填 -1\n    map<int32, int32> gradeUpSkills         = 4;    //觉醒影响的技能等级 skillId -> level\n    map<int32, int32> attributes            = 5;    //全量属性数据变化  enum ATTR_ID -> value\n    int64 syncKey                           = 6;\n    map<int32, int64> ownFashionIds         = 7;    //全部已有的时装id 列表->获得时间 直接覆盖之前的数据\n    map<int32, int32> skillUpFinishStamp    = 8;    //卡牌技能升级时间, 覆盖之前的数据\n}\n\nenum CARD_BASE_ATTR {\n    CBA_NONE          = 0;\n    LEVEL             = 1;    //等级\n    QUALITY           = 2;    //突破\n    WEAPON_LEVEL      = 3;    //专属武器等级\n    WEAPON_QUALITY    = 4;    //专属武器突破\n    GRADE             = 5;    //星级\n    POWER             = 6;    //战力\n    EXP               = 7;    //经验\n    FASHION           = 8;    //当前使用的时装\n}\n\nenum ATTR_ID {\n    AID_NONE    = 0;\n\tHP \t\t\t= 40000101;     //当前生命值\n\tMAX_HP \t\t= 40000102;     //生命值上限\n\tATK \t\t= 40000103;     //攻击力\n\tDEF \t\t= 40000104;     //防御力\n\tCRT \t\t= 40000201;     //暴击\n\tBLK \t\t= 40000202;     //格挡\n\tEVA \t\t= 40000203;     //闪避\n\tCRT_INT \t= 40000204;     //暴击伤害\n\tBLK_INT \t= 40000205;     //格挡强度\n\tSPD_MOVE \t= 40000301;     //移动速度\n\tSPD_ATK \t= 40000302;     //攻击速度\n\tRANGE_ATK \t= 40000303;     //攻击距离\n\tBLOCK_MAX \t= 40000304;     //阻挡数\n\tSTOIC \t\t= 40000305;     //易损值\n\tSHIELD \t\t= 40000306;     //护盾值\n\tMAX_RAGE \t= 40000307;     //最大怒气值\n\tRAGE \t\t= 40000308;     //当前怒气值\n\tRAGE_TIME   = 40000309;     //怒气时间回复\n\tRAGE_ATK    = 40000310;     //怒气攻击回复量\n\tRAGE_HIT    = 40000311;     //怒气受击回复量\n\tRAGE_KILL   = 40000313;     //怒气击杀回复\n\tBLOCK_COUNT = 40000314;     //自身阻挡计数\n    SPD_MOVE_ENHANCE = 40000315;     //移速增强\n    SPD_ATK_ENHANCE  = 40000316;     //攻速增强\n\tRESTRAINT_ADD1 = 40000401;  //对\"水\"属性英雄伤害加成\n\tRESTRAINT_ADD2 = 40000402;  //对\"火\"属性英雄伤害加成\n\tRESTRAINT_ADD3 = 40000403;  //对\"木\"属性英雄伤害加成\n\tRESTRAINT_ADD4 = 40000404;  //对\"暗\"属性英雄伤害加成\n\tRESTRAINT_ADD5 = 40000405;  //对\"光\"属性英雄伤害加成\n\tRESTRAINT_SUB1 = 40000406;  //受到\"水\"属性英雄伤害减免\n\tRESTRAINT_SUB2 = 40000407;  //受到\"火\"属性英雄伤害减免\n\tRESTRAINT_SUB3 = 40000408;  //受到\"木\"属性英雄伤害减免\n\tRESTRAINT_SUB4 = 40000409;  //受到\"暗\"属性英雄伤害减免\n\tRESTRAINT_SUB5 = 40000410;  //受到\"光\"属性英雄伤害减免\n\tDAMAGE_ADD  = 40000411;     //伤害加成\n\tDAMAGE_SUB  = 40000412;     //伤害减免\n\tTREAT_ADD   = 40000501;     //治疗加成%（技能用）\n\tBE_TREAT_ADD   = 40000502;  //受到治疗加成%（技能用）\n\tTENACITY       = 40000601;  //韧性\n    SHIELD_SPECIAL = 40000602;  //特殊护盾\n}\n\nmessage ItemTuple {\n    int32 tupleType  = 1;   //enum TUPLE_TYPE\n    int32 itemId     = 2;\n    int32 count      = 3;\n    int64 uid        = 4;\n}\n\nmessage DropTuple {\n    ItemTuple item                  = 1;\n    repeated ItemTuple changeItem   = 2;\n    bool        isNew               = 3;\n}\n//关卡信息 game.actor_stage\nmessage StageInfo {\n    int64 uin               = 1;\n    int32 stageId           = 2;    //关卡id\n    int32 sceneType         = 3;    //副本类型  enum SCENE_TYPE\n    int32 chapterId         = 4;    //章节id\n    int32 challengeCount    = 5;    //挑战次数\n    int64 challengeStamp    = 6;    //上次挑战时间,如果跨天就把 challengeCount 置0\n    int32 hpPercent         = 7;    //挑战后 关卡剩余血量百分比\n    int32 bottomMissCount   = 8;    //保底掉落 miss 次数\n}\n\n//副本进度信息\nmessage SceneProgressInfo {\n    int64 uin               = 1;\n    int32 sceneType         = 2;\n    int32 chapterId         = 3;    //章节进度\n    int32 passedStageId     = 4;    //当前已通关的最新关卡,适用于章节有前后置的副本,例如主线、爬塔\n    int32 rewardedChapter   = 5;    //已领取的章节奖励进度\n    map<int32, int32> chapter2PassedStageId = 6;  //各个章节已通关的最新关卡,适用于章节没有前后置关系的副本,例如 boss本、日常本\n    map<int32, int32> stage2BottomMissCount = 7;  //关卡掉落保底 miss 次数\n    repeated int32 rewardedStages           = 8;  //已手动领取奖励的关卡\n    int64 resetStamp        = 9;    //上次重置时间\n    repeated int32 allPassedStages = 10;   //所有已通关的关卡 id,仅日常本需要保存该字段,用于判断是否首通,因为日常本可以解锁后续多个关卡,不按照顺序打就会导致前面的关卡拿不到首通奖励\n    int32 maxStageId               = 11;   //历史通过最大关卡, 目前副本类型 61-63 记录该值\n}\n\n//战斗回放记录 battle.battle_record\nmessage BattleRecord {\n    int64 battleUid         = 1;    //战斗记录uid\n    int64 uin               = 2;    //发起方uin\n    int64 targetId          = 3;    //对方id  pvp: 对方uin, pve: 关卡id\n    int32 sceneType         = 4;    //副本类型  sp_scene.proto  enum BATTLE_TYPE\n    bool win                = 5;    //发起方是否胜利\n    int64 stamp             = 6;    //发生时间\n    bytes data              = 7;    //sp_battle.proto BattleCompleteData 序列化后的数据\n    int64 battleSeqId       = 8;    //战斗 seqId\n}\n\nmessage ArenaBattleRecord {\n    ActorMirrorInfo opponent    = 1;\n    bool   isWin                = 2;\n    int64   battleUid           = 3;\n    int64   stamp               = 4;\n    bool isDefend               = 5;\n}\n\nenum RELATION_STATE {\n    RS_NONE     = 0;\n    APPLYING    = 1;    //主动方 自己正请求加别人为好友\n    APPLIED     = 2;    //被动方 收到的别人的好友请求\n    FRIEND      = 3;    //好友状态\n    BLOCK       = 4;    //屏蔽状态\n    DELETE      = 5;    //删除 (仅用于客户端删除本地数据)\n}\n\n//好友关系数据 game.actor_relation\nmessage RelationInfo {\n    int64 uin       = 1;\n    int64 targetUin = 2;\n    int64 stamp     = 3;\n    int32 state     = 4;    //enum RELATION_STATE\n    string remark   = 5;    //备注\n}\n\n//徽章 game.actor_badge\nmessage BadgeInfo {\n    int64 uin               = 1;\n    int64 badgeUid          = 2;    //唯一标识\n    int32 badgeId           = 3;    //徽章id\n    int32 level             = 4;    //等级\n    int32 exp               = 5;    //经验\n    int32 mainAttribute     = 6;    //主属性 baseBadgeAttributeId\n    repeated int32 viceAttributes = 7;   //副属性 baseBadgeAttributeId\n    map<int32, int32> attributeLevels = 8;  //属性等级,包含主属性和副属性    baseBadgeAttributeId -> level\n    int32 wearCardId        = 9;    //当前穿戴该徽章的角色 id (只在内存中,变更时不写数据库)\n    bool locked             = 10;   //是否上锁\n    bool isNew              = 11;\n    int32 costGold          = 12;   //消耗的金币总量\n}\n\nenum TASK_STATE {\n    NORMAL      = 0; \n    FINISHED    = 1;    //已完成\n    REWARD      = 2;    //已领奖\n    OVERDUE     = 3;    //已过期\n}\n//用户任务 game.actor_task\nmessage TaskInfo {\n    int64 uin           = 1;\n    int64 uid           = 2;\n    int32 taskId        = 3;\n    int32 value         = 4;\n    int64 startStamp    = 5;\n    int32 state         = 6;    //enum TASK_STATE\n}\n\n//IM 小队群聊信息 message.group\nmessage IMGroupInfo {\n    string sessionId        = 1;\n    int32 memberCount       = 2;    //成员数量\n}\n\nenum MAIL_SCOPE {\n    MS_NONE     = 0;\n    MS_ALL      = 1;    //所有玩家\n    MS_SPECIFIC = 2;    //指定玩家\n    MS_LEVEL    = 3;    //等级区间\n}\n\n//全服邮件 game.global_mail\nmessage GlobalMail {\n    int64 mailUid       = 1;    //邮件唯一标识\n    string title        = 2;    //邮件标题\n    string senderName   = 3;    //寄件人姓名\n    string content      = 4;    //邮件内容\n    string attachment   = 5;    //邮件附件 ItemTuple 三元组格式\n    int64 sendStamp     = 6;    //发送时间\n    int64 expireStamp   = 7;    //过期时间\n    int32 userScope     = 8;    //玩家范围  enum MAIL_SCOPE\n    int64 createRoleFromStamp = 9;  //创角开始时间\n    int64 createRoleToStamp   = 10; //创角结束时间\n    int32 minLevel      = 11;   //等级范围\n    int32 maxLevel      = 12;\n    bool canDelete      = 13;    //是否能手动删除\n    repeated string targetChannels = 14;    //目标渠道\n}\n\n//玩家邮件 game.actor_mail\nmessage ActorMail {\n    int64 mailUid       = 1;    //邮件唯一标识\n    int64 uin           = 2;    //接受方 uin, 为0表示全服邮件\n    string title        = 3;    //邮件标题\n    string senderName   = 4;    //寄件人姓名\n    string content      = 5;    //邮件内容\n    string attachment   = 6;    //邮件附件 ItemTuple 三元组格式\n    int64 sendStamp     = 7;    //发送时间\n    int64 expireStamp   = 8;    //过期时间\n    int64 relateUid     = 9;    //如果是全服邮件,该值为全服邮件的 mailUid\n    bool canDelete      = 10;   //是否能手动删除\n    bool fetched        = 11;   //是否已领取附件\n    bool read           = 12;   //是否已读\n    bool cliParse       = 13;\n    repeated string senderParams  = 14;     //寄件人姓名参数\n    repeated string titleParams   = 15;     //邮件标题中的参数\n    repeated string contentParams = 16;     //邮件内容中的参数\n    bool canPrior       = 17;   //邮件数量超出上限后能否被顶掉\n    string extra        = 18;    //扩充信息\n}\n\n//公会信息 guild.guild\nmessage GuildInfo {\n    int64 guildUid              = 1;\n    string name                 = 2;\n    int64 ownerUin              = 3;\n    int64 createStamp           = 4;\n    int32 level                 = 5;    //公会等级\n    int32 exp                   = 6;    //公会经验\n    int32 activePoint           = 7;    //公会每日累积的活跃值\n    int32 activeLevel           = 8;    //活跃等级\n    int32 iconId                = 9;    //公会图标\n    int32 levelLimit            = 10;   //加入等级限制    -1:任何人可加入直接加入,无需审核  -2:拒绝申请\n    int32 memberCount           = 11;   //成员数量\n    string notice               = 12;   //公告\n//    repeated string allTargets  = 14;   //所有的公会目标\n//    repeated int32 targetIdxes  = 15;   //当前勾选的公会目标索引\n\n    int64 resetStamp            = 16;   //上次重置时间\n    int32 dayAverActivePointSum = 17;   //日人均活跃度之和\n    bool impeaching             = 18;   //是否在弹劾中\n    int64 impeachStamp          = 19;   //弹劾开始时间\n\n    bool applying               = 20;   //在搜索其他公会时,用来展示自己是否在申请该公会中,以及申请过期时间\n    int64 applyTimeout          = 21;   //申请还剩多久过期 秒\n    string leaderName           = 22;   //队长名字  不更新,下发给客户端时临时获取\n    int32 dayExp                = 23;   //当日已获得的经验值\n    int32 DayBeginLevel         = 24;   //当日开始等级\n    repeated int32 unlockedHeadIds = 25; //已解锁的头像\n    int32 lastGuildWarRank      = 26;   //上期公会战排名\n    int32 lastGuildWarActCnt    = 27;   //上期公会战参与公会数量\n    int32 policy                = 28;   //活动方针\n}\n\n//公会路由信息: 公会所在的guildSvr服务节点信息 route.guild_route\nmessage GuildRoute {\n    int64 guildUid          = 1;\n    string serviceId        = 2;\n}\n\n//玩家所在公会 route.user_guild\nmessage UserGuild {\n    int64 uin               = 1;\n    int64 guildUid          = 2;    //玩家所在公会 guildUid\n    int64 stamp             = 3;    //进入公会时间\n    string serviceId        = 4;\n}\n\n//公会成员信息 guild.guild_member\nmessage GuildMember {\n    int64 uin               = 1;\n    int64 guildUid          = 2;    //所在公会 uid\n    int64 joinStamp         = 3;    //加入公会时间\n    int32 roleType          = 4;    //角色类型 队长、副队长、普通成员  enum GUILD_ROLE_TYPE\n    int32 activePoint       = 5;    //公会成员每日累积的活跃值\n    int64 resetStamp        = 6;    //重置时间(活跃值)\n    int64 activeStamp       = 7;    //活跃时间\n    string name             = 8;    //姓名\n    int32 level             = 9;    //等级\n    int32 faceId            = 10;   //头像\n    bool isOnline           = 11;   //是否在线\n    bool autoJoin           = 12;   //是否自动加入\n}\n\nmessage GuildApplicant {\n    int64 uin               = 1;\n    string name             = 2;    //姓名\n    int32 level             = 3;    //等级\n    int32 faceId            = 4;    //头像\n    int64 expireStamp       = 5;    //过期时间\n    int64 activeStamp       = 6;    //活跃时间\n    bool isOnline           = 7;    //是否在线\n}\n\n//公会用于推荐的信息\nmessage GuildRecommendInfo {\n    int64 guildUid          = 1;\n    string name             = 2;\n    int32 level             = 3;    //等级\n    int32 activeLevel       = 4;    //活跃度\n    int32 memberCount       = 5;    //成员数量\n    int32 applicantCount    = 6;    //申请者人数\n    int32 levelLimit        = 7;    //加入等级限制\n    int32 iconId            = 8;\n//    repeated string allTargets = 9;   //所有的公会目标\n//    repeated int32 targetIdxes = 10;   //当前勾选的公会目标索引\n    string leaderName       = 11;   //队长名字\n    int32 lastGuildWarRank  = 12;   //上期公会战排名\n    int32 lastGuildWarActCnt= 13;   //上期公会战参与公会数量\n    int32 policy            = 14;   //活动方针\n}\n\n//竞技场人物信息\nmessage ActorMirrorInfo {\n    int64 uin                   = 1;\n    int64 createTime            = 2;    //账号创建时间\n    int64 fightScore            = 3;    //战斗积分\n    int32 level                 = 4;    //等级\n    int32 faceId                = 5;    //头像ID\n    string name                 = 6;    //名字\n    int64 guildUid              = 7;    //所在公会 uid\n    string guildName            = 8;    //所在公会名字\n    int32 arenaMedal            = 9;    //竞技场的勋章\n    int64 lastLoginStamp        = 10;   //上次登录时间\n    bytes   arenaFormation      = 11;   //竞技场阵容 (机器人专有)BattleFormation的二进制bytes数据\n    bool isOnline               = 12;   //是否在线\n    int32 cardCount             = 13;   //玩家卡牌数量\n    int32 randNameId            = 14;   //随机nameID\n    ActorHead actorHead         = 15;   //头像信息\n}\n//竞技场玩家信息\nmessage ActorArenaInfo {\n    int64 uin                   = 1;\n    int64 createTime            = 2;    //账号创建时间\n    int64 fightScore            = 3;    //战斗积分\n    int64 lastLoginStamp        = 4;    //上次登录时间\n}\n\n//阵容类型\nenum FORMATION_TYPE {\n    FORMATION_TYPE_ARENA          = 0;    //竞技场防守阵容\n    FORMATION_TYPE_FRIEND_FIGHT   = 1;    //好友切磋防守阵容\n}\n\n//竞技场防守阵容数据\nmessage ArenaDefenseFormation {\n    int32 level                     = 1;    //阵容等级(用以匹配防守方阵容)\n    map<int64, int32> cardUid2Pos   = 2;    //卡牌站位 cardUid -> pos\n    map<int64, int32> buildUid2Pos  = 3;    //建筑站位 buildUid -> pos\n    int32 arenaMapId                = 4;    //设置的防守地图 BaseArenaMap\n    int32 leaderCardId              = 5;    //队长角色 id\n    repeated BurstOrderSetting burstOrderSetting = 6;    //总攻技能释放顺序设置\n    int32 formationType             = 7;    //阵容类型  enum FORMATION_TYPE\n} \n\n//记录总攻技能释放顺序设置\nmessage BurstOrderSetting {\n    int32 job              = 1;    //职业\n    repeated int64 cardList = 2;    //角色优先级排序表\n}\n\nmessage ActorArenaZone {\n    int64 uin   = 1;\n    int32 zone  = 2;    //赛季赛区\n}\n//竞技场荣誉信息\nmessage ActorArenaHonor {\n    int64 uin           = 1;\n    int32 arenaMedal    = 2;\n}\n\n//boss挑战信息 game.actor_boss_consume\nmessage ActorBossConsume {\n    int64 uin                   = 1;\n    repeated int32 usedCardIds  = 2;    //阶段1已使用的卡牌\n    int32 challengeCount        = 3;    //阶段2的挑战次数\n}\n\n\n//boss挑战关卡信息 game.actor_boss\nmessage ActorBossInfo {\n    int64 uid                   = 1;\n    int64 uin                   = 2;\n    int64 activityUid           = 3;    //boss活动uid 常规boss为0\n    int32 chapterId             = 4;    //boss 章节id\n    int32 stageId               = 5;    //当前boss关卡id    如果是 boss 章节的第一个关卡,就在第一阶段\n    int32 stageIdx              = 6;    //章节中的第几个关卡\n    int32 position              = 7;    //手动添加的活动boss的位置 从1开始\n    int32 challengeCount        = 8;    //挑战次数\n    int32 winCount              = 9;   //胜利次数\n}\n\n//记录各种副本的残血残怒情况 game.actor_fight_state\nmessage ActorFightState {\n    int64 uid                   = 1;\n    int64 uin                   = 2;\n    int32 sceneType             = 3;    //副本类型\n    int32 extId                 = 4;    //扩展id\n    repeated ObjectState ownStates = 5;\n    repeated ObjectState targetStates = 6;\n}\n\n//玩家新手引导 game.actor_guide\nmessage GuideInfo {\n    int64 uin               = 1;\n    int32 guideId           = 2;\n    repeated int32 steps    = 3;\n    int64 stamp             = 4;\n}\n\n//玩家完成的剧情信息 game.actor_plot\nmessage PlotInfo {\n    int64 uin       = 1;\n    int64 stamp     = 2;\n    int32 plotId    = 3;\n}\n\n//玩家完成剧情已领取的奖励标识 game.actor_plot_reward\nmessage PlotReward {\n    int64 uin       = 1;\n    int32 stepId    = 2;\n    int32 plotId    = 3;\n    int64 stamp     = 4;\n}\n\n//商品信息\nmessage ShopGoodsInfo {\n    int32 gridId            = 1;    //格子ID\n    int32 goodsId           = 2;    //商品ID(通过配置表对应商品内容，购买消耗等)\n    int32 boughtNum         = 3;    //商品购买次数\n    int64 nextRefreshTime   = 4;    //下次刷新时间\n    bool unlocked           = 5;    //是否已解锁\n    int64 unlockTime        = 6;    //解锁时间\n}\n\n//商店信息\nmessage ShopInfo {\n    int64 uin                       = 1;\n    int32 typeId                    = 2;    //类型ID\n    int32 refreshNum                = 3;    //刷新次数\n    int64 nextRefreshTime           = 4;    //下次刷新时间\n    bool isOpen                     = 5;    //是否开启\n    map<int32,ShopGoodsInfo> goods  = 6;    //格子ID -> 商店商品\n}\n\n\n//通行证信息\nmessage BattlePassInfo {\n    int64 uin                           = 1;\n    int32 passPortId                    = 2;    //通行证ID\n    bool isUnLock                       = 3;    //是否解锁\n    int32 lv                            = 4;    //当前等级\n    int32 exp                           = 5;    //当前经验\n    int32   expLimit                    = 6;    //经验限制进度\n    repeated    int32       openList    = 7;    //开启的奖励类型\n    map<int32,bytes> rewards            = 8;   //领奖信息 typeid->领奖状态\n    repeated    int64 dailyTask         = 9;\n    repeated    int64 weeklyTask        = 10;\n    repeated    int64 totalTask         = 11;\n}\nmessage CarnivalStage {\n    repeated int64 taskUid              = 1;    //任务Uid\n}\n\n//嘉年华信息\nmessage CarnivalInfo {\n    int64 uin                           = 1;\n    int64 nextStamp                     = 2;    //开启时间\n    map<int32,CarnivalStage> stages     = 3;    //阶段数据\n    repeated int32 rewardList           = 4;    //领奖列表\n    int64   closeStamp                  = 5;    //记录id\n}\n\n//招募记录\nmessage GachaRecord {\n    int32 poolId                    = 1;\n    repeated ItemTuple gachaDrop    = 2;\n    int64   timestamp               = 3;\n    int64   uin                     = 4;\n    int32   index                   = 5;\n    int32   recordId                = 6;\n}\n\n//卡池信息\nmessage GachaPool {\n    int32 point                     = 1;    //兑换点数\n    map<int32,int32>   exchangeList = 2;    //卡片ID->兑换次数\n    repeated  GachaRecord records   = 3;    //timestamp->抽卡记录\n    int64 actUin                    = 4;    //活动Uid\n    int32 gachaCount                = 5;    //抽卡次数\n    int32   target                  = 6;    //目标卡\n    int32 targetCount               = 7;    //目标卡计数\n    int32 extraRewarded             = 8;    //领取的额外奖励卡片\n}\nmessage GachaFloor {\n    int32 reachNum      = 1;    //达成次数\n    int32 count         = 2;    //当前累计次数\n}\nmessage PoolGachaRecord {\n    repeated  GachaRecord records       = 1; //timestamp->抽卡记录\n}\n//招募信息\nmessage GachaInfo {\n    int64 uin                           = 1;\n    map<int32,GachaPool>    poolList    = 2; //卡池ID->卡池信息\n    map<int32,GachaFloor>    floor      = 3; //保底ID->累计次数\n    map<int32,int32>    dailyGachaCount = 4; //modid->每日抽卡次数\n    map<int32,int32>    totalGachaCount = 5; //modid->总计抽卡次数\n    map<int32,int32>    targetCount     = 6; //bottom_main_type->目标保底次数\n    map<int32,int32>    recordCount     = 7; //卡池记录count\n}\n\nmessage ExpeditionStateRecord {\n    int32 stageId               = 1;\n    repeated int32 challenged   = 2;    //完成的挑战\n    repeated int64 battleUid    = 3;\n}\n\nmessage ChapterInfo {\n    int32 chapterId             = 1;\n    int64 unlockStamp           = 2;\n    int32 buffID                = 3;\n}\n//远征信息\nmessage ExpeditionInfo {\n    int64 uin                               = 1;\n    int32 cycle                             = 2;    //当前周期\n    bool jumpRefresh                        = 3;    //是否垮周期更新\n    repeated ChapterInfo chapters           = 4;    //当前章节\n    int32 curStage                          = 5;    //当前进度\n    repeated ExpeditionStateRecord records  = 6;    //挑战记录  \n    repeated int32 rewardIndex              = 7;    //已经领取奖励index\n    int32   highPassStar                    = 8;    //最高通关关卡星数\n}\n\n//竞技场个人信息\nmessage ActorArenaPersonal {\n    int64 uin                                           = 1;\n    int32 highRank                                      = 2;    //赛季最高排名\n    repeated int32 rewardList                           = 3;    //领奖列表\n    int64 nextArenaFightStamp                           = 4;    //下次竞技场挑战时间\n    int32 buyFightNum                                   = 5;    //购买挑战次数\n    int32 fightNum                                      = 6;    //挑战次数\n    int32 arenaMedal                                    = 7;    //赛季勋章\n    ArenaDefenseFormation defenseFormation              = 8;   //防守阵容\n    int32 season                                        = 9;    //当前赛季\n    repeated int32 weeklyRewardList                     = 10;   //每周领奖列表\n    int32 historyHighRank                                 = 11;   //历史最高排名\n    ArenaDefenseFormation friendFightFormation          = 12;   //好友切磋的阵容\n}\n\nmessage BattleArrayData {\n    map<int64, int32> cardUid2Pos   = 1;    //卡牌站位 cardUid -> pos\n    map<int64, int32> buildUid2Pos  = 2;    //建筑站位 buildUid -> pos\n    int32 index                     = 3;    //\n    int32 leaderCardId              = 4;    //队长角色 id\n    repeated BurstOrderSetting burstOrderSetting = 5;    //总攻技能释放顺序设置\n}\n\n//game.actor_stage_prepare\nmessage StagePrepareInfo {\n    int64 uin                           = 1;\n    int64 uid                           = 2;\n    int32 sceneType                     = 3;    //sp_scene.proto    enum SCENE_TYPE\n    int32 stageId                       = 4;\n    map<int64, int32> cardUid2Pos       = 5;    //卡牌站位 cardUid -> pos\n    map<int64, int32> buildUid2Pos      = 6;    //建筑站位 buildUid -> pos\n    repeated BattleArrayData  specialArray    = 7;    //特殊布阵信息（当前远征使用）\n    int32 leaderCardId                  = 8;    //队长角色 id\n    repeated BurstOrderSetting burstOrderSetting = 9;    //总攻技能释放顺序设置\n}\n\n//内购订单信息\nmessage PurchaseOrder {\n    int64 uin                       = 1;\n    int64 purchaseUid               = 2;    //订单ID\n    int32 productId                 = 3;    //商品ID\n    int64 timestamp                 = 4;    \n}\n//内购信息\nmessage PurchaseInfo {\n    int64 uin                           = 1;\n    map<int32,int64> monthCard          = 2;    //MonthCardType -> 月卡截止时间\n    map<int32,bool>  monthDaily         = 3;    //\n    map<int32,int32>    boughtRecord    = 4;    //购买记录 basePayProduct.id -> 购买次数\n    repeated int32    firstBought       = 5;    //已经首冲的商品（额外存储，用于重置功能）\n    int64 firstRechargeResetStamp       = 6;    //首充重置时间\n}\n\nenum TIME_STATE {\n    TS_NONE         = 0;\n    TS_WAITING      = 1;    //未开启\n    TS_RUNNING      = 2;    //进行中\n    TS_FINISH       = 3;    //已结束\n    TS_SUSPEND      = 4;    //暂停状态\n}\n\nenum VERIFY_STATE {\n    VS_NONE         = 0;\n    VS_APPROVE      = 1;    //审核通过\n    VS_ON_SHELF     = 2;    //审核上架\n    VS_OFF_SHELF    = 3;    //审核下架\n    VS_MODIFY       = 4;    //审核修改\n    VS_REJECT       = 5;    //拒绝\n    VS_DRAFT        = 6;    //草稿\n}\n\nenum HARD_STATE {\n    HS_NONE         = 0;\n    HS_NORMAL       = 1;    //正常\n    HS_OFF_SHELF    = 2;    //下架\n    HS_REMOVED      = 3;    //移除\n}\n\n//运营 web 用户信息 gm.op_user\nmessage OpUser {\n    string username         = 1;    //用户名\n    string password         = 2;\n    repeated string roles   = 3;\n    string name             = 4;    //昵称\n    string avatar           = 5;    //头像\n    int64 createStamp       = 6;\n    string title            = 7;\n}\n\n//推荐图 gm.op_recommend_img gm.op_recommend_img_verify\nmessage OpRecommendImg {\n    int64 uid                   = 1;\n    int64 startStamp            = 2;    //开始时间\n    int64 endStamp              = 3;    //结束时间\n    int32 sortValue             = 4;    //排序值\n    int32 imgLayout             = 5;    //图片布局模板\n    int32 timeState             = 6;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 7;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 8;    //enum HARD_STATE\n    string remark               = 9;    //备注\n    repeated string images      = 10;   //图片 url 列表\n    repeated string jumpTargets = 11;   //图片跳转列表\n    repeated int32 jumpTypes    = 12;   //跳转类型 enum RECOMMEND_IMG_JUMP_TYPE  0: 无跳转   1: 跳转商店   2: 商店购买面板   3: 直接购买\n    string cnName               = 13;   //中文名字\n    string enName               = 14;   //英文名字\n    bool permanent              = 15;   //是否永久显示\n    bool boughtHide             = 16;   //是否购买后就不显示 下面 2 个字段用于判断是否已购买\n    int32 productType           = 17;   //推荐的商品类型  enum RECOMMEND_IMG_PRODUCT_TYPE  1: base_pay_product 2: base_fashion 3: base_gift\n    string productItemIds       = 18;   //推荐的商品 id\n    repeated string targetChannels = 19;//目标渠道\n    int32 levelLimit            = 20;   //玩家等级限制\n}\n\n//礼包 gm.op_gift_package gm.op_gift_package_verify\nmessage OpGiftPackage {\n    int64 uid                   = 1;\n    int64 startStamp            = 2;    //开始时间\n    int64 endStamp              = 3;    //结束时间\n    int32 sortValue             = 4;    //排序值\n    int32 timeState             = 5;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 6;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 7;    //enum HARD_STATE\n    string remark               = 8;    //备注\n    int32 shelfArea             = 9;    //上架区域      1: 精选组合     2: 超值优惠  大于10000000,则为上架的商店标签uid\n    int64 iosPackageId          = 10;   //ios 礼包 id\n    int64 androidPackageId      = 11;   //android 礼包 id\n}\n\n//时装 gm.op_fashion gm.op_fashion_verify\nmessage OpFashion {\n    int64 uid                   = 1;\n    int64 startStamp            = 2;    //开始时间\n    int64 endStamp              = 3;    //结束时间\n    int32 sortValue             = 4;    //排序值\n    int32 timeState             = 5;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 6;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 7;    //enum HARD_STATE\n    int64 fashionId             = 8;    //时装 id\n    bool newTag                 = 9;    //是否是新品标记\n}\n\n//通过活动上架的时装 上架过就一直展示 gm.op_fashion_show\nmessage OpFashionShow {\n    int64 uid                   = 1;    //OpFashion.uid\n    int64 fashionId             = 2;\n    int64 startStamp            = 3;\n}\n\n//礼包 gm.op_notice gm.op_notice_verify gm.op_notice_draft\nmessage OpNotice {\n    int64 uid                   = 1;\n    int64 startStamp            = 2;    //开始时间\n    int64 endStamp              = 3;    //结束时间\n    int32 sortValue             = 4;    //排序值\n    int32 timeState             = 5;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 6;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 7;    //enum HARD_STATE\n    string remark               = 8;    //备注\n    int32 shelfArea             = 9;    //上架区域      1: 精选组合     2: 超值优惠\n    int32 modelType             = 10;   //模板类型 1: 图文  2: 整图\n    string title                = 11;   //标题\n    string subTitle             = 12;   //副标题\n    string content              = 13;   //正文内容  用于图文\n    string picUrl               = 14;   //图片路径  用于整图\n    string jumpTarget           = 15;   //跳转目标\n    string cliTag               = 16;\n    repeated string targetChannels = 17;//目标渠道\n}\n\n//活动时间类型\nenum ACTIVITY_TIME_TYPE {\n    ATT_NONE        = 0;\n    ATT_FIXED       = 1;    //固定时间\n    ATT_WEEK_LOOP   = 2;    //每周循环\n    ATT_MONTH_LOOP  = 3;    //每月循环\n}\n\n//活动 gm.op_activity gm.op_activity_verify\nmessage OpActivity {\n    int64 uid                   = 1;\n    int32 timeState             = 2;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 3;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 4;    //enum HARD_STATE\n\n    int32 activityId            = 5;    //活动 ID\n\n    int32 timeType              = 6;    //时间类型 enum ACTIVITY_TIME_TYPE\n    int64 startStamp            = 7;    //开始时间 (固定时间使用)\n    int64 endStamp              = 8;    //结束时间 (固定时间使用)\n    int64 offShelfStamp         = 9;    //下架时间戳 (固定时间使用)\n\n    int32 startWeekDay          = 10;    //周几开始 (每周循环使用)\n    int32 endWeekDay            = 11;   //周几结束 (每周循环使用)\n    int32 offShelfWeekDay       = 12;   //周几下架 (每周循环使用)\n\n    int32 startMonthDay         = 13;   //每月几号开始 (每月循环使用)\n    int32 endMonthDay           = 14;   //每月几号结束 (每月循环使用)\n    int32 offShelfMonthDay      = 15;   //每月几号下架 (每月循环使用)\n\n    string startTime            = 16;   //开始时间点 例如: 12:00  每周循环和每月循环使用\n    string endTime              = 17;   //结束时间点\n    string offShelfTime         = 18;   //下架时间点\n\n    string remark               = 19;   //备注\n    bool suspend                = 20;   //是否暂停状态\n    string picUrl               = 21;   //活动图片地址\n}\n\n//系统邮件 gm.op_system_mail\nmessage OpSystemMail {\n    int64 uid                   = 1;\n    int32 timeState             = 2;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 3;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 4;    //enum HARD_STATE\n\n    repeated string targetChannels  = 5;    //渠道\n    int32 userScope             = 6;    //enum MAIL_SCOPE 玩家范围 1:所有玩家   2:指定玩家 uin  3:等级区间\n    string remark               = 7;    //备注\n    int64 createRoleFromStamp   = 8;    //创角开始时间\n    int64 createRoleToStamp     = 9;    //创角结束时间\n    bool scheduleSend           = 10;   //是否定时发送\n    int64 sendStamp             = 11;   //定时发送时间\n    int32 minLevel              = 12;   //userScope == 3 时, 等级区间\n    int32 maxLevel              = 13;\n    string receiverUins         = 14;   //userScope == 2 时, 玩家 uin 列表, |分割\n    string senderName           = 15;   //寄件人名字\n    string mailTitle            = 16;   //邮件标题\n    string mailContent          = 17;   //邮件内容\n    repeated ItemTuple attachments = 18;    //附件\n    int32 expireDays            = 19;   //过期天数\n    int32 totalCount            = 20;   //需要发送总数\n    int32 successCount          = 21;   //发送成功数量\n    bool saveAsDraft            = 22;   //是否存为草稿\n    bool sendDone               = 23;   //是否完成发送\n}\n\n//兑换码 gm.op_exchange_code\nmessage OpExchangeCode {\n    int64 uid                   = 1;\n    int32 timeState             = 2;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 3;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 4;    //enum HARD_STATE\n\n    repeated string targetChannels  = 5;    //渠道\n    string remark               = 6;    //备注\n    int64 startStamp            = 7;    //开始时间\n    int64 endStamp              = 8;    //结束时间\n    int32 generateType          = 9;   //生成方式 1:指定兑换码 2:批量生成 3:导入兑换码\n    int32 generateCount         = 10;   //生成数量\n    int32 maxExchangeCount      = 11;   //兑换次数上限\n    string exchangeCodePrefix   = 12;   //兑换码前缀\n    int32 exchangeCodeLength    = 13;   //兑换码长度\n    int32 userScope             = 14;    //enum MAIL_SCOPE 玩家范围 1:所有玩家   2:指定玩家 uin  3:等级区间\n    int32 minLevel              = 15;   //userScope == 3 时, 等级区间\n    int32 maxLevel              = 16;\n    string targetUins           = 17;   //userScope == 2 时, 玩家 uin 列表, |分割\n    repeated ItemTuple attachments = 18;    //附件\n    int32 successCount          = 19;   //已成功兑换人数\n}\n\n//gm 生成的兑换码 gm.exchange_code\nmessage ExchangeCode {\n    string code         = 1;\n    int64 uid           = 2;    //关联 OpExchangeCode.uid\n    int32 exchangeTimes = 3;    //已兑换次数\n}\n\n//玩家已使用的兑换码 game.actor_exchange_code\nmessage ActorExchangeCode {\n    int64 uin           = 1;\n    string code         = 2;\n    int64 stamp         = 3;    //兑换时间\n}\n\n//派遣信息 game.actor_battle_dispatch\nmessage BattleDispatchInfo {\n    int64 uin           = 1;\n    int32 activityId    = 2;    //活动本的活动 id, 非活动本传 0\n    int32 sceneType     = 3;    //副本类型\n    int32 stageId       = 4;    //关卡 id\n    bytes data          = 5;    //DispatchData 序列化后的数据\n}\n\n\n//ip 白名单 gm.whitelist_ip\nmessage WhitelistIP {\n    string ip           = 1;    //ip 地址\n    string remark       = 2;    //备注\n    string operator     = 3;\n    int64 createStamp   = 4;    //创建时间\n}\n\n//白名单类型\nenum WHITELIST_TYPE {\n    WLT_NONE            = 0;\n    IP                  = 1;    //ip 地址\n    ACCOUNT_ID          = 2;    //账号 id\n    UIN                 = 3;    //玩家 uin\n}\n\nmessage WhitelistInfo {\n    string whiteTag     = 1;\n    int32 whiteType     = 2;    //enum WHITELIST_TYPE\n    string remark       = 3;    //备注\n    string operator     = 4;\n    int64 createStamp   = 5;    //创建时间\n}\n\n//图片上传记录 gm.uploadPicRecord\nmessage UploadPicRecord {\n    string picName  = 1;\n    string picUrl   = 2;\n    int64 stamp     = 3;\n}\n\n\n//获得的 cg 和 bgm  game.actor_story_cgbgm_group\nmessage StoryCgBgmGroup {\n    int64 uin               = 1;\n    int32 groupId           = 2;\n    repeated int32 cgBgmIds = 3;\n}\n\n//音乐收藏 game.actor_sound\nmessage ActorSound {\n    int64 uin = 1;\n    repeated int32 staredSoundLst  = 2;    //收藏的音乐\n    repeated int32 soundPlaylist   = 3;    //播放列表\n}\n\nmessage ActivityItem {\n    int64 uid   = 1;\n    int32 id    = 2;\n    int32 count = 3;\n}\n//活动存储数据\nmessage ActivityStoreInfo {\n    int64 uin                       = 1;    //\n    int32 activityId                = 2;\n    int64 uid                       = 3;    //所属活动的uid   \n    bytes storeData                 = 4;    //根据活动类型存储\n    map <int32,ActivityItem> items  = 5;    //活动物品 id->物品\n    int64 lastItemResetStamp        = 6;    //上次物品重置时间\n}\n// 签到活动数据\nmessage SignInActInfo {\n    int32   curDay              = 1;    \n    int64 lastSignInStamp       = 2;\n}\n//搜索活动\nmessage SearchActInfo {\n    int64 lastSearchStamp = 1;\n    repeated ItemTuple dropRewards      = 2;    //掉落奖励\n    repeated ItemTuple showRewards      = 3;    //显示奖励\n    repeated ItemTuple specialRewards   = 4;    //额外奖励\n    repeated int32  choosePos           = 5;    //选择位置\n    int32 curCount                      = 6;\n}\n\n//回归签到活动\nmessage ReturnActInfo {\n    int32 returnDay = 1;  //已回归天数\n    int32 signDay   = 2;  //已签到的天数\n    int64 triggerStamp = 3; //回归触发时间\n}\n\n//转盘活动\nmessage TurnTableInfo {\n    map<int32,int32>  turnList = 1;\n    int32 freeGet              = 2;    //免费次数是否领取\n}\n//转盘活动多轮次(累充抽奖)\nmessage TurnTableRoundInfo {\n    map<int32,TurnTableInfo>  rounds = 1;\n    int64 freeStamp                  = 2;    //免费领取时间\n    int32 totalRechargeAmount        = 3;    //总充值金额\n    int32 fetchedRechargeLevel       = 4;    //已领取的充值奖励档位\n    int64 dailyRechargeRewardTime    = 5;    //累充每日领取时间\n    int32 resetCount                 = 6;    //重置次数\n}\nmessage MiniGameData {\n   repeated MiniGameRecord records          = 1;    //小游戏记录\n   int32 miniScore                          = 2;    //小游戏累积积分\n   int32 miniDailyStat                      = 3;    //小游戏每日奖励 TASK_STATE\n   int32 miniDailyScore                     = 4;    //小游戏每日累积积分\n   int32 miniHighScore                      = 5;    //小游戏最高积分\n   int32 miniDailyNum                       = 6;   //小游戏每日次数\n   map<int32,int32> extraCount              = 7;    //小游戏额外数据\n}\nmessage MiniGameRecord {\n    map<int32,int32> counts = 1;\n    int32           point   = 2;\n    int64           stamp   = 3;\n}\n//关卡活动数据\nmessage StageActInfo {\n   repeated int32 challengeStages           = 1;    //挑战通关关卡\n   map<int32,int32>    boughtItem           = 2;    //已经购买的商品 格子ID->购买数量\n   repeated   int32 signDay                 = 3;    //已经签到的天\n   int32 creamCount                         = 4;    //素材本挑战次数\n   repeated MiniGameRecord records          = 5;    //小游戏记录\n   int32 miniScore                          = 6;    //小游戏累积积分\n   int32 miniDailyStat                      = 7;    //小游戏每日奖励 TASK_STATE\n   int32 miniDailyScore                     = 8;    //小游戏每日累积积分\n   int32 miniHighScore                      = 9;    //小游戏最高积分\n   int32 miniDailyNum                       = 10;   //小游戏每日次数\n   map<int32,MiniGameData> miniGames        = 11;   //小游戏数据\n}\n\n//多倍掉落\nmessage DropMulti {\n    int32 type  = 1;\n    int32 multi = 2;\n    int32 count = 3;\n    int32 maxCount = 4;\n}\n\n//回归活动\nmessage ReturnProActInfo {\n    int32 triggerCount              = 1; //触发次数\n    int64 startStamp                = 2;\n    int64 endStamp                  = 3;\n    int32 freeReward                = 4;\n    int32 signReward                = 5;\n    repeated DropMulti dailyDrop    = 6;\n    map<int32,int32>    boughtItem  = 7;    //已经购买的商品 格子ID->购买数量\n    int64 dailyTaskUin              = 8;\n    int32 costItemCount             = 9;         \n}\n\n//掉落活动\nmessage DropMultiActInfo {\n    repeated DropMulti dailyDrops    = 1;\n}\n\n//探险领地信息\nmessage ActorManor {\n    int64 uin           = 1;\n    int32 mapId         = 2;    //当前所在地图\n    string coordinate   = 4;    //当前坐标\n    int32 mapLevel      = 6;    //地图等级\n    int32 tokenConsumeCount = 8;    //代币消耗数量\n    int32 shopFreeCount     = 9;    //深渊商店免费领取次数\n    bool rookieFinished     = 10;   //是否已通关新手区域\n    bool rookieReward       = 11;   //是否已领取新手区域奖励\n    string guildWarCoordinate = 12; //所在公会战地图坐标\n    map<int32,string> actCoordinates    = 13;   //活动地图坐标    mapId -> coordinate\n}\n\nmessage ManorStoryOption {\n    int32 storyId                   = 1;\n    repeated int32 optionIndexes    = 2;    //随机出来的选项索引,从 0 开始\n}\n\n//探险队领地事件 game.actor_manor_event\nmessage ManorEvent {\n    int64 uin           = 1;\n    int32 eventId       = 2;    //事件 id\n    int32 mapId         = 3;    //地图 id\n    int32 gridId        = 4;    //事件所在格子组 id\n    int32 plotNodeId    = 5;    //支线事件节点进度 当前完成的节点 id, 为 0 表示当前正在处理第一个节点\n    int64 plotNodeStamp = 6;    //支线事件节点处理事件    有的后置节点会间隔一段时间触发, 客户端以此来做定时\n    int32 nextPlotNodeId= 7;    //支线事件下一个待处理的节点\n    string coordinate   = 8;    //事件坐标位置\n    int64 resetStamp    = 9;    //事件重置时间   (如果是支线事件: 为 0 表示,这个事件还没有被创建出来,只是标识这个格子组会有这个事件,需要客户端来触发)\n    int64 finishStamp   = 10;   //事件结束时间   不为 0 表示事件已结束\n    int32 processTimes  = 11;   //处理次数\n    repeated ManorNodeProgress progress = 12; //若是支线事件并且已完成这里记录所有的进度信息\n    int32 parentId      = 13;   //所属 id\n    string parameter    = 14;\n    repeated int32 finishedStoryId    = 15; //当前完成的 storyId\n    repeated ManorStoryOption options = 16; //剧情中随机出来的选项\n    int32 coordinateVersion = 17;   //事件当前坐标版本  如果和当前配置不一致,就重新生成坐标\n    int64 nextResetStamp = 18;  //下次重置时间\n    bool suspend         = 19;  //事件是否暂停 用于活动支线事件, 暂停后不能继续处理\n    ManorStoryProgress storyProgress  = 20; //剧情进度\n    int32 eventType      = 21;  //事件类型\n}\n\n//探险队领地事件的位置\nmessage ManorEventPosition {\n    int64 uin                    = 1;\n    map<int32, string> positions = 2;   //eventId -> gridId|coordinate\n}\n\n//剧情进度\nmessage ManorStoryProgress {\n    repeated int32 stories = 1;     //记录剧情走向,仅记录分叉选择\n    int32 lastStory        = 2;     //最后触发的 story\n}\n\n//探险队领地事件结点处理记录\nmessage ManorNodeProgress {\n    int32 nodeId           = 1;     //当前结点Id\n    repeated int32 stories = 2;     //如果是剧情类型的话 记录剧情走向  优化: 仅记录分叉选择\n    int32 lastStory        = 3;     //最后触发的 story\n}\n\n//植物系统\nmessage PlantInfo {\n    int64 uin                           = 1;\n    map<int32,int32>  unlockFlower      = 2;//解锁的花朵 \n    int64   plantTaskUid                = 3;\n    int32   taskDailyRewarded           = 4;//每日任务奖励领取次数\n}\n//常规任务系统\nmessage ComTaskInfo {\n    int64 uin                       = 1;\n    map<int32,int64>    taskList    = 2;\n    repeated int32 dailyRewards     = 3;    //天目标已领奖阶段\n    repeated int32 totalRewards     = 4;    //总目标已领奖阶段\n}\n//任务系统\nmessage CycleTaskInfo {\n    int64 uin                       = 1;\n    repeated int64    taskList      = 2;\n    repeated int32 weeklyRewards    = 3;    //周目标已领奖阶段\n}\n//竞技场奖励类型\nenum ARENA_REWARD_TYPE {\n    ATR_NONE        = 0;\n    ATR_SEASON      = 2;    //赛季奖励\n    ATR_WEEKLY      = 3;    //周奖励\n}\n\n//怪物图鉴组 game.actor_story_monster_group\nmessage StoryMonsterGroup {\n    int64 uin                 = 1;\n    int32 groupId             = 2;   //组 id, 一个组保存 32 个 monsterId\n    repeated int32 monsterIds = 3;\n}\n\n//已点击事迹组 game.actor_clicked_story_group\nmessage ClickedStoryEventGroup {\n    int64 uin               = 1;\n    int32 groupId           = 2;    //组 id, 一个组保存 32 个 monsterId\n    repeated int32 eventIds = 3;\n}\n\n//角色的事迹信息\nmessage CardClickedStoryEventInfo {\n    int64 uin               = 1;\n    int32 cardId            = 2;\n    repeated int32 eventIds = 3;\n}\n\n//内部订单  game.actor_pay_transaction\nmessage PayTransaction {\n    int64 uin               = 1;\n    int64 uniqueId          = 2;\n    int32 productBaseId     = 3;    //base_pay_product.id\n    string productId        = 4;\n    int64 stamp             = 5;\n    int32 state             = 6;    //订单状态\n    string nonce            = 7;    //透传参数  uniqueId:transactionId\n}\n\n//通用充值订单 gm.common_recharge_order\nmessage CommonRechargeOrder {\n    string orderId          = 1;    //本次充值在平台上的订单号\n    string transactionId    = 2;    //商店订单号(由Apple, Google, Alipay, 微信等平台提供)\n    string productId        = 3;    //产品标识,作为充值依据\n    string sdkUid           = 4;    //sdk 玩家的唯一标识\n    int64 payStamp          = 5;   //支付时间\n    string srvId            = 6;    //游戏服务器ID\n    string nonce            = 7;    //充值透传参数(可选)\n    string payType          = 8;    //支付方式  (apple,googleplay,alipay,wechat,web,benefits)\n    int64 expireStamp       = 9;    //订阅过期时间戳(秒) 仅续订充值项有效\n    bool isFreeTrial        = 10;    //是否免费试用 仅续订充值项有效\n    string channel          = 11;   //充值 sdk 渠道\n    int32 money             = 12;   //支付金额(单位：分)\n    int32 pay_money         = 13;   //实际支付金额\n    int32 game_money        = 14;   //应用内货币\n    string currency         = 15;   //货币类型\n    string userIP           = 16;   //ip地址\n}\n\n//haoplay 充值平台的充值订单通知\nmessage HaoPlayRechargeOrder {\n    string productid        = 1;    //产品标识,作为充值依据\n    int64 uid               = 2;    //玩家的唯一标识\n    string order            = 3;    //本次充值在平台上的订单号\n    string transactionid    = 4;    //商店订单号(由Apple, Google, Alipay, 微信等平台提供)\n    string srvid            = 5;    //游戏服务器ID\n    string nonce            = 6;    //充值透传参数(可选)\n    string paytype          = 7;    //支付方式  (apple,googleplay,alipay,wechat,web,benefits)\n    int64 expires_date_ms   = 8;    //订阅过期时间戳(毫秒) 仅续订充值项有效\n    bool is_free_trial      = 9;    //是否免费试用 仅续订充值项有效\n    int32 price             = 10;\n    string currency         = 11;   //货币类型 例如: RMB, USD\n    string user_ip          = 12;\n}\n\n//充值平台的订阅订单通知\nmessage HaoPlaySubscribeOrder {\n    string productid        = 1;    //产品标识\n    int32 uid               = 2;    //玩家的唯一标识\n    string srvid            = 3;    //游戏服务器ID\n    string order            = 4;    //首次订阅原始平台订单号\n    string nonce            = 5;    //首次订阅原始订单透传参数\n    string expires_date_ms  = 6;    //订阅过期时间戳(毫秒)\n}\n\n//bilibili 充值平台回调通知\nmessage BiliRechargeOrder {\n    string id               = 1;    //订单ID\n    string order_no         = 2;    //bilibili游戏SDK服务器方订单号\n    string out_trade_no     = 3;    //游戏CP厂商支付订单号\n    string uid              = 4;    //B站用户ID\n    string username         = 5;    //用户名\n    string role             = 6;    //角色名\n    string money            = 7;    //支付金额(单位：分)\n    string pay_money        = 8;    //实际支付金额，单位：分\n    string game_money       = 9;    //应用内货币\n    string merchant_id      = 10;   //商户ID\n    string game_id          = 11;   //游戏ID\n    string zone_id          = 12;   //区服ID\n    string product_name     = 13;   //商品名称\n    string product_desc     = 14;   //商品描述\n    string pay_time         = 15;   //订单支付时间\n    string client_ip        = 16;   //客户端IP\n    string extension_info   = 17;   //额外信息，原样通知回来\n    int32 order_status      = 18;   //订单状态：1为已完成\n    string sign             = 19;   //md5加密后的签名\n}\n\n//退款等待封禁用户 gm.actor_refund_wait_block\nmessage ActorRefundWaitBlock {\n    int64 uin           = 1;\n    int32 diamondCount  = 2;    //退款扣为负数,进入名单时的钻石数量\n    int64 stamp         = 3;\n}\n\n//礼包系统\nmessage GiftItem {\n    int32 giftId                = 1;\n    int64 getStamp              = 2;    //获取时间\n    repeated int32 rewards      = 3;    //已经领奖的阶段\n    int32 boughtNum             = 4;    //购买次数\n}\nmessage GiftInfo {\n    int64 uin                     = 1;\n    repeated GiftItem gifts       = 2;    //已经购买的礼包\n    \n}\n\n//补给系统\nmessage SupplyInfo {\n    int64 uin               = 1;\n    repeated int32 rewards  = 2;\n}\n\n\n//探险队演练伤害记录 guild.guild_practice_record\nmessage GuildPracticeRecord {\n    int64 uin           = 1;\n    int32 stageId       = 2;    //关卡 id\n    int64 totalDamage   = 3;    //总伤害\n    int64 guildUid      = 4;\n    int64 stamp         = 5;\n    map<int32, CardInfo> pos2CardInfos = 6; //角色布阵位置     position -> CardInfo\n    map<int64, int64> cardUid2Damages  = 7; //每个角色的伤害   cardUid -> damage\n    int32 leaderCardId  = 8;    //队长角色 id\n}\nmessage CardFaceInfo {\n    int32 cardId = 1;\n    int32 fashionId = 2;\n}\nmessage BossChallengeRecord {\n    int64 score                     = 1;\n    map<int32,int32>  cardList      = 2;    //参战角色     id -> showid\n}\n//Boss挑战数据\nmessage BossInfo {\n    int64 uin               = 1;\n    int32 season            = 2;    //周期\n    int32 fighterCount      = 3;    //普通挑战次数\n    int32 challengeCount    = 4;    //高难挑战次数\n    int64 highScore         = 5;    //最高积分 \n    int32   curStage        = 6;    //当前关卡\n    repeated int32 finishStage                = 7;    //已经通关的关卡\n    repeated BossChallengeRecord challenges   = 8;    //当前挑战数据\n    bool isStart            = 9;\n    repeated int32  rewardStages              = 10;  //已领取奖励\n    int32 oldRank           = 11;   //老排名\n    int32 highRank          = 12;   //最高排名\n}\n\n//竞技场匹配的对手信息 game.actor_arena_match\nmessage ArenaMatchInfo {\n    int64 uin           = 1;\n    int32 seasonId      = 2;\n    bytes matchInfo     = 3;    //sproto.ArenaMatchData\n}\n\n//玩家操作记录 game.actor_operate_record\nmessage OperateRecord {\n    int64 uin               = 1;\n    int32 opType            = 2;    //操作类型值\n    repeated int32 values   = 3;\n}\nmessage BuffStage  {\n    int32 stageId               = 1;\n    int32 buffLayer             = 2;\n    map<int32,int32> targets    = 3; //KEY:cfg VALUE:CHALLENGE_STAT_TYPE\n    int64 openStamp             = 4;    //开启时间\n    int32 score                 = 5;    //积分\n    bool isUnLock               = 6;    //是否解锁\n}\n\nmessage BuffStageInfo {\n    int64 uin                   = 1;\n    int64 endStamp              = 2;\n    int32 chapterId             = 3;\n    map<int32,BuffStage> stages = 4;\n    int32 chapterTarget         = 5;    //CHALLENGE_STAT_TYPE\n    map<int32,int32>    highScore = 6;\n    map<int32,int32>    highBuffLayer = 7;\n}\n//密约信息\nmessage AgreementInfo {\n    int64 uin               = 1;\n    int32   season          = 2;\n    repeated int32 rewards  = 3;\n    repeated int32 openList = 4;\n}\nmessage AgreementData {\n    repeated int32 rewards  = 1;\n    repeated int32 openList = 2;\n    int64 refreshStamp      = 3;\n}\nmessage AgreementsInfo {\n    int64 uin                       = 1;\n    map<int32,AgreementData> infos  = 2;\n}\n\n\n\n\n\n//匹配条件,如果bsonRaw有数据,使用bsonRaw进行匹配,否则使用kvs按顺序进行匹配\nmessage DbFilter {\n    bytes bsonRaw          = 1;     //bson.D raw数据,用来支持复杂的查询条件,例如: { $or: [ {platform: {$gt:0}}, {password: \"123456\"} ] }, bson编码\n    repeated KvPair kvs    = 2;\n    DbSortKey sortKey      = 3;\n    bool secondaryPref     = 4;     //读策略是否为 SecondaryPreferred\n    uint32 modKey          = 5;\n}\n\nmessage DbSortKey {\n    string field           = 1;\n    bool ascend            = 2;    //true: 升序  false: 降序\n}\n\n//请求查询按条件匹配大批的数量\nmessage DbQueryCountReq {\n    string tableName       = 1;\n    DbFilter filter        = 2;\n}\n\nmessage DbQueryCountRsp {\n    int64 count = 1;\n}\n\n//按条件查询一行数据\nmessage DbQueryUniqueDataReq {\n    string tableName       = 1;\n    DbFilter filter        = 2;\n}\n\nmessage DbQueryUniqueDataRsp {\n    bytes raw             = 1;\n}\n\n//findOneAndUpdate\nmessage DbQueryOneAndUpdateReq {\n    string tableName       = 1;\n    DbFilter filter        = 2;\n    bytes raw              = 3;\n}\n\nmessage DbQueryOneAndUpdateRsp {\n    bytes raw             = 1;\n}\n\n//按条件查询多行数据\nmessage DbQueryBatchDataReq {\n    string tableName    = 1;\n    DbFilter filter     = 2;\n    int32 skip          = 3;\n    int32 limit         = 4;\n    repeated DbSortKey sortKeys = 5;\n}\n\nmessage DbQueryBatchDataRsp {\n    repeated bytes raws = 1;\n}\n\nmessage DbIndex {\n    repeated string fields  = 1;\n    bool unique             = 2;\n    bool useKv              = 3;    //是否使用 kvFields 字段创建索引\n    repeated KvPair kvFields= 4;\n}\n\n//创建索引\nmessage DbCreateIndexReq {\n    string database     = 1;\n    string tableName    = 2;\n    repeated DbIndex indexes = 3;\n}\n\nmessage DbCreateIndexRsp {\n\n}\n\n//按条件删除数据\nmessage DbDeleteDataReq {\n    string tableName       = 1;\n    DbFilter filter        = 2;\n}\n\nmessage DbDeleteDataRsp {\n    int64 deleteCount      = 1;\n}\n\n//插入数据\nmessage DbInsertDataReq {\n    string tableName    = 1;\n    repeated bytes raws = 2;\n}\n\nmessage DbInsertDataRsp {\n    int64 insertCount   = 1;\n}\n\n//按条件更新一行数据\nmessage DbUpdateDataReq {\n    string tableName    = 1;\n    DbFilter filter     = 2;\n    bytes raw           = 3;\n}\n\nmessage DbUpdateDataRsp {\n\n}\n\n//更新一条记录,不存在则插入\nmessage DbUpsertDataReq {\n    string tableName    = 1;\n    DbFilter filter     = 2;\n    bytes raw           = 3;\n}\n\nmessage DbUpsertDataRsp {\n\n}\n\n\n//按条件更新多行数据\nmessage DbUpdateBatchDataReq {\n    string tableName    = 1;\n    DbFilter filter     = 2;\n    bytes raw           = 3;\n}\n\nmessage DbUpdateBatchDataRsp {\n    int64 modifyCount   = 1;\n}\n\nmessage DbOp {\n    uint32 cmd      = 1;\n    bytes opRaw     = 2;\n}\n\n//在事务里执行多个操作\nmessage DbTransactionOpReq {\n    repeated DbOp ops = 1;\n    bool forceTx      = 2;  //强制事务执行\n}\n\nmessage DbTransactionOpRsp {\n\n}\n\nmessage AllocGameReq {\n    string openId   = 1;\n    string deviceId = 2;\n    string channel  = 3;\n    int32 platform  = 4;\n    string sdkOpenId = 5;    //第三方 sdk 的 openId\n}\n\nmessage AllocGameRsp {\n    string dbId     = 1;\n    string gameId   = 2;\n    int64 uin       = 3;\n}\n\nmessage DbTableDropReq {\n\tstring tableName    = 1;\n}\nmessage DbTableDropRsp {\n}\n\n\n\n//派遣信息\nmessage DispatchGroup {\n    repeated int32 cardId       = 1;\n    int64       overStamp       = 2;\n    ItemTuple extraCost         = 3;\n    bool    isExtra             = 4;\n    int32 rewardId              = 5;\n}\nmessage DispatchInfo {\n    int64 uin                           = 1;\n    int32 level                         = 2;\n    int32 exp                           = 3;\n    map <int32,DispatchGroup> groups    = 4;    //groupid->DispatchGroup\n    int64 levelUpStamp                  = 5;    //升级时间\n}\n\n\n//获取信息\nmessage GetDispatchInfoReq {\n}\n\nmessage DispatchGroupShow {\n    int32 groupId               = 1;\n    int32 rewardId              = 2;\n    repeated int32 cards        = 3;\n    int64       overStamp       = 4;\n    bool    isExtra             = 5;\n\n}\nmessage GetDispatchInfoRsp {\n    repeated DispatchGroupShow groups   = 1;\n    int32 level                         = 2;\n    int32 exp                           = 3;\n}\n//开始派遣\nmessage StartDispatchInfoReq {\n    int32 groupId           = 1;\n    int32 rewardId          = 2;\n    repeated int32 cards    = 3;\n    int32 extraPos          = 4;\n}\n\nmessage StartDispatchInfoRsp {\n    repeated DispatchGroupShow groups = 1;\n}\n\n//派遣领奖\nmessage RewardDispatchInfoReq {\n        int32 groupId  = 1;\n}\n\nmessage RewardDispatchInfoRsp {\n    repeated DropTuple drops = 1;\n    repeated DispatchGroupShow groups = 2;\n    int32 level                       = 3;\n    int32 exp                         = 4;\n}\n//取消派遣\nmessage CancelDispatchInfoReq {\n    int32 groupId  = 1;\n}\n\nmessage CancelDispatchInfoRsp {\n    repeated DispatchGroupShow groups = 1;\n    ItemTuple returnItem              = 2;\n}\n\n\n\n\n//获取远征信息\nmessage GetExpeditionInfoReq {\n\n}\n\nmessage GetExpeditionInfoRsp {\n    int32 curStage                          = 1;    //当前进度\n    repeated ChapterInfo chapters           = 2;    //当前章节\n    int64 nextRefreshStamp                  = 3;    //下次更新时间\n    repeated ExpeditionStateRecord records  = 4;    //挑战记录  \n    repeated int32 rewards                  = 5;    //已经领取奖励的index\n    int32 highPassStar                      = 6;    //最高通关关卡\n    int32 cycle                             = 7;    //周期(百位为周期类型,个位十位为周期)\n}\n\n\n//领取远征奖励\nmessage GetExpeditionRewardReq {\n    int32 rewardId          = 1;\n}\n\nmessage GetExpeditionRewardRsp {\n    repeated DropTuple goods            = 1;    //领取的奖励\n    repeated int32 rewards              = 2;    //已经领取的奖励\n}\n\n\n\n\n\n\n//请求招募信息\nmessage GetGachaInfoReq {\n\n    \n}\nmessage GachaPoolShow {\n    int32   poolId                  = 1;\n    int32 point                     = 2;    //兑换点数\n    map<int32,int32>   exchangeList = 3;    //卡片ID->兑换次数\n    int32   target                  = 4;    //目标卡\n    int32 extraRewarded             = 5;    //领取的额外奖励卡片\n    int32 gachaCount                = 6;    //抽卡次数\n    int32 floorMax                  = 7;    //保底上限\n    int32 floorCount                = 8;    //保底计数\n    bool isReach                    = 9;    //是否硬保底\n}\nmessage GetGachaInfoRsp {\n    map<int32,int64>           openList = 1;  //卡池ID->结束时间(-1为无限期)\n    repeated GachaPoolShow    poolList  = 2; //卡池ID->卡池信息\n    map<int32,int32>    dailyGachaCount = 3; //modid->每日已经抽卡次数\n    map<int32,int32>    totalGachaCount = 4; //modid->总计抽卡次数\n    map<int32,int32>    dailyFreeCount  = 5;//modid->每日免费抽卡次数\n}\n\n\n//招募\nmessage DoGachaReq {\n    int32 gachaMode = 1;\n}\n\nmessage DoGachaRsp {\n    repeated DropTuple drops            = 1;  \n    repeated GachaPoolShow poolInfo     = 2;\n    map<int32,int32>    dailyGachaCount = 3; //modid->每日抽卡次数\n    map<int32,int32>    totalGachaCount = 4; //modid->总计抽卡次数\n    map<int32,int64>           openList = 5;  //卡池ID->结束时间(-1为无限期)\n    map<int32,int32>    dailyFreeCount  = 6;//modid->每日免费抽卡次数\n    int32   poolId                      = 7;\n}\n\n\n//兑换招募物品\nmessage ExchangeGachaReq {\n    int32 poolId = 1;\n    int32 itemId = 2;   \n}\n\nmessage ExchangeGachaRsp {\n    DropTuple reward                = 1;\n    GachaPoolShow poolInfo          = 2;\n}\n\n//抽卡记录\nmessage GetGachaRecordsReq {\n    int32 poolId = 1;\n}\nmessage GetGachaRecordsRsp {\n    repeated  GachaRecord records       = 1; //timestamp->抽卡记录\n}\n\n//设置抽卡目标\nmessage SetGachaTargetReq {\n    int32 gachaId   = 1;\n    int32 cardId    = 2;\n}\n\nmessage SetGachaTargetRsp {\n    GachaPoolShow poolInfo          = 2;\n}\n\n//获取额外奖励\nmessage GetGachaExtraReq {\n    int32 gachaId   = 1;\n    int32 cardId    = 2;\n}\n\nmessage GetGachaExtraRsp {\n    DropTuple reward                = 1;  \n    GachaPoolShow poolInfo          = 2;\n}\n\n\n\n//发送全服邮件\nmessage SendGlobalMailReq {\n    GlobalMail mailInfo = 1;\n}\n\nmessage SendGlobalMailRsp {\n\n}\n\n//发送私人邮件\nmessage SendPrivateMailReq {\n    int64 toUin         = 1;    //接收方uin\n    MailInfo mailInfo   = 2;\n}\n\nmessage SendPrivateMailRsp {\n\n}\n\n//拉取全服邮件\nmessage FetchGlobalMailReq {\n    int64 seqId = 1;\n}\n\nmessage FetchGlobalMailRsp {\n    repeated GlobalMail mails = 1;\n    int64 globalMailSeq     = 2;\n}\n\n//封禁角色\nmessage BanActorReq {\n    int64 uin       = 1;\n    int32 banSecs   = 2;    //封禁秒数\n    DateTime banDate  = 3;    //封禁到某个时间点\n    \n}\n\nmessage BanActorRsp {\n}\n\n//踢掉角色\nmessage KickActorReq {\n    int64 uin       = 1;\n    int32 reason    = 2;\n}\nmessage KickActorRsp {\n}\n\n\n\n//公会成员角色类型\nenum GUILD_ROLE_TYPE {\n    GRT_NONE        = 0;\n    GRT_LEADER      = 1;    //队长\n    GRT_VICE_LEADER = 2;    //副队长\n    GRT_NORMAL      = 3;    //普通成员\n}\n\n//获取公会列表\nmessage GetGuildListReq {\n    int32 skip      = 1;\n    int32 count     = 2;\n}\n\nmessage GetGuildListRsp {\n    repeated GuildInfo infos = 1;\n}\n\n//创建公会\nmessage CreateGuildReq {\n    string name         = 1;\n    string targetSvcId  = 2;\n}\n\nmessage CreateGuildRsp {\n    GuildInfo info      = 1;\n    string serviceId    = 2;    //公会所在服务节点  公会内部的其他请求在消息头中设置 Head.serviceId\n\n    repeated GuildMember members = 3;   //公会成员\n}\n\n//获取自己所在公会信息\nmessage GetMyGuildInfoReq {\n    bool withMember     = 1;    //是否需要获取公会成员信息\n    string extData      = 2;\n}\n\n//弹劾信息\nmessage ImpeachInfo {\n    int64 initiatorUin  = 1;    //弹劾发起人 uin\n    int32 approveCount  = 2;    //支持数量\n    int32 opposeCount   = 3;    //反对数量\n    int32 myVote        = 4;    //自己的投票 0: 未投票  1: 支持   2: 反对   4: 没有投票权限\n    int64 endTimeout    = 5;    //还剩下多长时间弹劾结束 秒\n}\n\nmessage GetMyGuildInfoRsp {\n    GuildInfo info      = 1;\n    string serviceId    = 2;    //公会所在服务节点  公会内部的其他请求在消息头中设置 Head.serviceId\n\n    repeated GuildMember members        = 3;    //公会成员\n    ImpeachInfo impeachInfo             = 4;    //弹劾信息 如果 GuildInfo.impeaching == true, 才有数据\n\n    repeated GuildApplicant applicants  = 5;    //申请者列表\n    int64 joinCdStamp                   = 6;    //退出公会后重新加入新的公会 cd 截止时间戳\n    string extData                      = 7;\n    int32 roleType                      = 8;\n\n    bool createdGuild                   = 9;    //是否创建过公会\n    bool appliedGuild                   = 10;   //是否申请加入过公会\n}\n\n//获取别人的公会信息\nmessage GetOtherGuildInfoReq {\n    int64 guildUid = 1;\n}\n\nmessage GetOtherGuildInfoRsp {\n    GuildInfo info = 1;\n}\n\n//获取公会成员 uin 列表     服务端使用\nmessage GetGuildMembersReq {\n    bool simplify = 1;\n}\n\nmessage GetGuildMembersRsp {\n    int64 guildUid              = 1;\n    repeated int64 memberUinLst = 2;\n\n    repeated GuildMember members        = 3;    //公会成员\n    repeated GuildApplicant applicants  = 4;    //申请者列表\n}\n\n//通过名字搜索公会\nmessage SearchGuildByNameReq {\n    string name     = 1;\n    int32 offset    = 2;    //分页获取\n}\n\nmessage SearchGuildByNameRsp {\n    repeated GuildInfo infos = 1;\n    bool hasMore             = 2;   //是否需要还有需要分页\n}\n\n//修改公会图标\nmessage ChangeGuildIconReq {\n    int32 iconId = 1;\n}\n\nmessage ChangeGuildIconRsp {\n}\n\n//修改公会名字\nmessage ChangeGuildNameReq {\n    string name = 1;\n}\n\nmessage ChangeGuildNameRsp {\n}\n\n//修改公会公告\nmessage ChangeGuildNoticeReq {\n    string notice = 1;\n}\n\nmessage ChangeGuildNoticeRsp {\n    string notice = 1;\n}\n\n//设置公会加入等级限制\nmessage SetGuildLevelLimitReq {\n    int32 levelLimit = 1;\n}\n\nmessage SetGuildLevelLimitRsp {\n}\n\n//请求加入公会\nmessage ApplyJoinGuildReq {\n    int64 guildUid = 1;\n}\n\nmessage ApplyJoinGuildRsp {\n    GuildInfo info = 1;     //点击了申请加入公会,客户端刷新该公会的信息\n    bool hasIn     = 2;     //是否已经直接加入了公会\n}\n\n//撤销加入公会的申请\nmessage CancelJoinGuildReq {\n    int64 guildUid = 1;\n}\n\nmessage CancelJoinGuildRsp {\n}\n\n//处理公会的加入申请\nmessage ProcessGuildJoinApplyReq {\n    int64 applicantUin  = 1;    //申请者 uin, 为0则表示全部处理\n    bool agree          = 2;    //是否同意加入\n}\n\nmessage ProcessGuildJoinApplyRsp {\n}\n\n//操作公会副队长\nmessage OperateGuildViceLeaderReq {\n    int64 targetUin = 1;    //对方 uin\n    bool promote    = 2;    //true: 晋升为副队长  false: 降职副队长\n}\n\nmessage OperateGuildViceLeaderRsp {\n}\n\n//踢出公会成员\nmessage KickOutGuildMemberReq {\n    int64 targetUin = 1;\n}\n\nmessage KickOutGuildMemberRsp {\n}\n\n//移交公会队长给其他人\nmessage TransferGuildLeaderReq {\n    int64 targetUin = 1;\n}\n\nmessage TransferGuildLeaderRsp {\n}\n\n//解散公会\nmessage DismissGuildReq {\n}\n\nmessage DismissGuildRsp {\n}\n\n//退出公会\nmessage ExitGuildReq {\n}\n\nmessage ExitGuildRsp {\n}\n\n//获取推荐的公会\nmessage GetRecommendGuildReq {\n    bool firstRecommend = 1;    //第一次进界面发这个请求时设置为 true, 在界面内点击 \"刷新列表\" 就发 false\n}\n\nmessage GetRecommendGuildRsp {\n    repeated GuildInfo infos = 1;\n}\n\n//弹劾队长\nmessage StartImpeachGuildLeaderReq {\n}\n\nmessage StartImpeachGuildLeaderRsp {\n    ImpeachInfo impeachInfo = 1;\n}\n\n//弹劾投票\nmessage VoteImpeachGuildLeaderReq {\n    bool approve = 1;   //是否赞成弹劾\n}\n\nmessage VoteImpeachGuildLeaderRsp {\n    ImpeachInfo impeachInfo = 1;\n}\n\n//通知公会玩家消耗了体力\nmessage NotifyGuildConsumeEnergyReq {\n    int32 energyCount   = 1;\n}\n\n//快速加入公会\nmessage QuickJoinGuildReq {\n}\n\nmessage QuickJoinGuildRsp {\n}\n\n//自动加入公会    服务端内部使用\nmessage AutoJoinGuildReq {\n    int64 guildUid  = 1;\n}\n\nmessage AutoJoinGuildRsp {\n}\n\n//获取玩家公会的 guildUid\nmessage GetUserGuildUidReq {\n}\n\nmessage GetUserGuildUidRsp {\n    int64 guildUid  = 1;\n    string svcId    = 2;    //公会所在的服务节点 id\n}\n\n//获取已发送申请的公会列表\nmessage GetAppliedGuildsReq {\n}\n\nmessage GetAppliedGuildsRsp {\n    repeated GuildInfo guildInfos = 1;\n}\n\n//设置公会目标\nmessage SetGuildTargetReq {\n    repeated int32 targetIdxes = 1;   //当前勾选的公会目标索引\n}\n\nmessage SetGuildTargetRsp {\n}\n\n//获取弹劾信息\nmessage GetImpeachInfoReq {\n\n}\n\nmessage GetImpeachInfoRsp {\n    bool impeaching  = 1;   //是否在弹劾中\n    ImpeachInfo info = 2;   //弹劾信息\n}\n\n//获取自己公会的简要信息\nmessage GetMyGuildSimpleInfoReq {\n\n}\n\nmessage GetMyGuildSimpleInfoRsp {\n    int64 guildUid      = 1;    //公会 uid, 大于 0 表示在公会中\n    string guildName    = 2;    //公会名字\n    int32 roleType      = 3;    //玩家在公会中的职位     enum GUILD_ROLE_TYPE\n    string notice       = 4;    //当前公告内容\n}\n\nenum GUILD_EVENT_TYPE {\n    GE_NONE             = 0;\n    GE_APPROVE_JOIN     = 1;    //被同意加入公会\n    GE_KICK_OUT         = 2;    //被踢出公会\n}\n\n//公会状态变更通知\nmessage GuildEventNotify {\n    GUILD_EVENT_TYPE eventType  = 1;\n    string guildName            = 2;    //公会名字\n}\n\n//设置探险队的活动方针\nmessage SetGuildPolicyReq {\n    int32 policy = 1;\n}\n\nmessage SetGuildPolicyRsp {\n}\n\n//搜索探险队\nmessage SearchGuildByConditionsReq {\n    int32 offset        = 1;    //分页获取\n\n    string name         = 2;    //探险队名字\n    int32 MinMemberCnt  = 3;    //min 成员人数\n    int32 MaxMemberCnt  = 4;    //max 成员人数\n    int32 policy        = 5;    //活动方针\n    int32 guildWarRankOpt  = 7;    //上期公会战排名选项 0: 不限, 1: 1-5名, 2: 6-60名, 3: 前10%, 4: 前30%, 5: 前50%\n    int32 joinCondition = 8;    //加入条件 0: 不限  1: 自由加入  2: 需要审核\n}\n\nmessage SearchGuildByConditionsRsp {\n    repeated GuildInfo infos = 1;\n    bool hasMore             = 2;   //是否还有更多结果\n}\n\n\n\n\nmessage GuildPracticeRankData {\n    int64 uin           = 1;\n    string name         = 2;\n    int32 totalDamage   = 3;    //总伤害\n    int32 rank          = 4;    //排名 从 1 开始\n    int64  stamp        = 5;\n    int32 faceId        = 6;\n    ActorHead actorHead = 7;\n}\n\n//获取某个演练关卡的排名\nmessage GetGuildPracticeRankReq {\n    int32 stageId = 1;  //关卡 id\n}\n\nmessage GetGuildPracticeRankRsp {\n    int32 stageId = 1;\n    repeated GuildPracticeRankData rankDataLst = 2;\n}\n\n//获取某个演练关卡详细记录数据\nmessage GetGuildPracticeRecordReq {\n    int32 stageId   = 1;\n    int64 targetUin = 2;\n}\n\nmessage GetGuildPracticeRecordRsp {\n    GuildPracticeRecord record = 1;\n}\n\nmessage SaveGuildPracticeRecordReq {\n    GuildPracticeRecord record = 1;\n}\n\nmessage SaveGuildPracticeRecordRsp {\n    int64 historyDamageMax = 1;\n    int32 curRank          = 2; //当前排名\n}\n\n\n//公会战\n\n\n\n//公会战状态\nenum GuildWarState {\n    GWS_NONE            = 0;\n    GWS_NOTICE          = 1;    //公告期\n    GWS_FIGHT           = 2;    //挑战期\n    GWS_SETTLE_WAIT     = 3;    //结算等待期\n    GWS_SETTLE          = 4;    //结算期\n    GWS_CLOSE           = 5;    //关闭期\n}\n\n//公会战阶段信息\nmessage GuildWarSchedule {\n    int32 seasonId      = 1;    //赛季 id\n    int32 phase         = 2;    //BaseGuildWar 使用的 phase\n    int32 state         = 3;    //enum GuildWarState\n    int64 startStamp    = 4;\n    int64 endStamp      = 5;\n}\n\n//公会的公会战进度数据\nmessage GuildWarProgress {\n    int64 guildUid      = 1;\n    int32 seasonId      = 2;\n    int32 round         = 3;    //当前关卡最低轮次\n    int32 score         = 7;    //积分\n    repeated GuildWarBoss allBoss = 9;  //当前所有 boss 状态\n}\n\n//各个位置 boss 信息\nmessage GuildWarBoss {\n    int32 index         = 1;    //boss 位置索引 (1-5)\n    int32 round         = 2;    //boss 轮次\n    int32 stageId       = 3;    //当前关卡  0: 表示打通了所有 boss\n    int32 leftHpPercent = 4;    //剩余血量百分比, 临时计算\n    bool locked         = 5;    //是否锁定中\n    repeated ObjectState bossStates = 6;    //boss 状态\n}\n\nmessage GuildWarRankInfo {\n    int64 uin       = 1;\n    int32 rank      = 2;\n    int32 rankRatio = 3;\n}\n\n//战术技能编队\nmessage GuildWarSkillTeam {\n    int32 teamId            = 1;    //1 - 4\n    repeated int32 skillIds = 2;\n    bool used               = 3;    //是否当前使用中\n}\n\n//公会战玩家自己的数据\n//存储在 game 库  game.actor_guild_war\nmessage ActorGuildWar {\n    int64 uin                           = 1;\n    int32 seasonId                      = 2;    //当前数据所属的赛季,如果和当前系统赛季不一致,就需要重置数据\n    map<int32,int32> assistCardId2Count = 3;    //当前设置的助战角色的助战次数 cardId -> 助战次数\n    map<int32,int32> skill2Level        = 4;    //战术技能等级\n    int32 fightCount                    = 6;    //已挑战次数\n    int64 dailyResetStamp               = 7;    //每日重置时间\n    repeated int64  taskUid             = 8;    //任务列表\n    repeated int32 usedSelfCardIds      = 9;    //已使用的自己角色 cardId\n    repeated int32 usedAssistCardIds    = 10;   //已使用的助战角色 cardId\n    repeated GuildWarSkillTeam skillTeams = 11; //战术技能编队列表\n    int64 lastFightStamp                = 12;   //上次战斗时间\n}\n\n//补偿战斗阵容    game.actor_guildwar_compensate_formation\nmessage GuildWarCompensateFormation {\n    int64 uin               = 1;\n    int32 compensateUid     = 2; //补偿阵容uid(生成补偿阵容的关卡id)\n    int32 compensateTime    = 3; //补偿战斗时长\n    repeated CardSimple cardInfos                = 4;    //上阵角色数据, 包含自己的和助战的\n    int32 leaderCardId                           = 5;    //队长角色 id\n    repeated BurstOrderSetting burstOrderSetting = 6;    //总攻技能释放顺序设置\n}\n\n//公会战战斗结果数据\nmessage GuildWarBattleResult {\n    int32 compensateTime    = 1;    //获得的补偿时长(秒)\n    bool bossDeadBefore     = 2;    //true: 结算时 boss 已阵亡\n}\n\n//推荐阵容(一个关卡在 redis 保存伤害前 100 的阵容)\nmessage GuildWarRecommendFormation {\n    int32 stageId           = 1;    //关卡 id\n    int64 fighterUin        = 2;    //挑战者 uin\n    string fighterName      = 3;    //挑战者名字\n    repeated CardSimple cardInfos = 4;   //上阵角色列表\n    int64 damageHp          = 6;    //伤害值\n    int64 battleUid         = 7;    //战斗回放uid\n    repeated SkillLevel skillLevels = 8;    //使用的战术技能\n    int32 battleTime        = 9;    //战斗时长\n    int32 version           = 10;\n}\n\n//公会战战斗记录\nmessage GuildWarBattleRecord {\n    int32 stageId       = 1;    //关卡 id\n    int32 round         = 2;    //轮次\n    int64 damageHp      = 3;    //伤害值\n    int64 battleUid     = 4;    //战斗回放uid\n    int64 stamp         = 5;    //挑战时间\n    int32 version       = 6;\n}\n\n//获取公会战阶段信息\nmessage GetGuildWarScheduleReq {\n}\n\nmessage GetGuildWarScheduleRsp {\n    GuildWarSchedule schedule = 1;\n    bool inGuild              = 2;  //是否已加入公会\n}\n\n//获取公会战所有相关信息\nmessage GetGuildWarAllInfoReq {\n}\n\nmessage GetGuildWarAllInfoRsp {\n    GuildWarSchedule schedule       = 1;    //公会战赛程状态\n    GuildWarProgress progress       = 2;    //公会战进度\n    ActorGuildWar actorGuildWar     = 3;    //自己的信息\n    bool inGuild                    = 4;    //当前是否在公会中\n    repeated TaskInfo tasks         = 5;    //任务列表\n}\n\n//获取补偿阵容\nmessage GetGuildWarCompensateFormationReq {\n}\n\nmessage GetGuildWarCompensateFormationRsp {\n    repeated GuildWarCompensateFormation formations = 1;\n}\n\n//升级战术技能\nmessage LevelupGuildWarSkillReq {\n    int32 skillId = 1;\n}\n\nmessage LevelupGuildWarSkillRsp {\n    int32 skillId = 1;\n    int32 level   = 2;\n}\n\n//设置助战角色\nmessage SetGuildWarAssistCardReq {\n    repeated int32 cardIds = 1;\n}\n\nmessage SetGuildWarAssistCardRsp {\n    map<int32,int32> assistCardId2Count = 1;    //当前设置的助战角色的助战次数 cardId -> 助战次数\n}\n\n//获取推荐阵容\nmessage GetGuildWarRecommendFormationReq {\n    int32 stageId = 1;  //关卡 id\n}\n\nmessage GetGuildWarRecommendFormationRsp {\n    repeated GuildWarRecommendFormation formations = 1;\n}\n\n//设置战术技能方案\nmessage SetGuildWarSkillTeamReq {\n    GuildWarSkillTeam team = 1;\n}\n\nmessage SetGuildWarSkillTeamRsp {\n    repeated GuildWarSkillTeam skillTeams = 1;\n}\n\n//获取公会战战斗记录\nmessage GetGuildWarBattleRecordReq {\n}\n\nmessage GetGuildWarBattleRecordRsp {\n    repeated GuildWarBattleRecord records = 1;\n}\n\n//获取积分排行榜信息\nmessage GuildRankInfo {\n    int64 guildUid              = 1;\n    int32 level                 = 2;    //等级\n    int32 iconId                = 3;    //头像ID\n    string name                 = 4;    //名字\n    int32 rank                  = 5;    //排行\n    int64 score                 = 6;    //积分\n    int32 memberCount           = 7;    //成员数量\n    int32 actCount              = 8;    //参与数量\n    int32 round                 = 9;    //轮次\n}\n\nmessage GuildWarMemberRankInfo {\n    int64 uin                   = 1;\n    int32 level                 = 2;    //等级\n    string name                 = 3;    //名字\n    ActorHead actorHead         = 4;   //头像信息\n    int32   rank                = 5;    //排行\n    int64 score                 = 6;    //积分\n\n}\n\nmessage GetGuildWarRankReq {\n}\n\nmessage GetGuildWarRankRsp {\n    repeated    GuildRankInfo guildList          = 1;    //公会排名\n    repeated GuildWarMemberRankInfo memberList   = 2;    //成员排名\n    int32       rank                             = 3;    //自己公会排名\n    int32 rankRatio                              = 4;    //自己公会排名比例\n    GuildRankInfo mineGuild                      = 5;    //自己公会 \n    \n}\n\nmessage GetGuildWarRankExtReq {\n}\n\nmessage GetGuildWarRankExtRsp {\n    repeated    GuildRankInfo guildList          = 1;    //公会排名\n    repeated GuildWarMemberRankInfo memberList   = 2;    //成员排名\n    int32       rank                             = 3;    //自己公会排名\n    int32 rankRatio                              = 4;    //自己公会排名比例\n    GuildRankInfo mineGuild                      = 5;    //自己公会\n}\n\n//公会战任务\nmessage RewardGuildWarTaskReq {\n    int64 taskUid               = 1;    //领奖任务\n}\n\nmessage RewardGuildWarTaskRsp {\n    repeated DropTuple goods    = 1;    //领取的奖励\n    TaskInfo task               = 2;\n}\n\n//获取当前正在挑战的人数\nmessage GetGuildWarInBattleCountReq {\n\n}\n\nmessage GetGuildWarInBattleCountRsp {\n    map<int32, int32> index2BattleCnt = 2;    //每个关卡正在挑战人数 bossIndex -> cnt\n}\n\n\n\n//消息类型\nenum MSG_TYPE {\n    MSG_NONE        = 0;\n    MSG_TEXT        = 1;\n    MSG_EMOJI       = 2;\n    MSG_JOIN_GUILD  = 3;    //加入公会的提示信息 ChannelMsg.fromUin 字段标识加入公会玩家 uin\n}\n\n//会话类型\nenum IM_SESSION_TYPE {\n    IST_NONE    = 0;\n    PRIVATE     = 1;        //私聊\n    UNION       = 2;        //公会聊天\n    WORLD       = 3;        //世界聊天\n}\n\nmessage MutedBySystemNotify {\n    int32 muteReason            = 1;    //enum RET_CODE\n    int32 durationInSec         = 2;    //禁言时长 秒\n    repeated int32 muteChannels = 3;    //被禁言的频道 enum IM_SESSION_TYPE\n    bool mute                   = 4;    //是否已禁言\n}\n\nmessage ChannelMsg {\n    int32 msgType       = 1;    //enum MSG_TYPE\n    int32 cliSeq        = 2;    //客户端上传一个消息序列号\n    int64 msgId         = 3;    //消息id 服务器生成\n    int32 sessionType   = 4;    //enum IM_SESSION_TYPE\n    string sessionId    = 5;    //会话ID  只有世界频道聊天需要传频道的 sessionId\n    int64 fromUin       = 6;    //发送者uin\n    int64 toUin         = 7;    //接受者uin,群聊填0\n    int64 stamp         = 8;    //发送时间\n\tstring content      = 9;    //消息内容\n    int32 emojiId       = 10;   //消息类型为 MSG_EMOJI 时, 设置为该表情的 id\n}\n\n//消息读取进度\nmessage MsgProgress {\n    int64 uin           = 1;\n    int64 targetUin     = 2;    //聊天对象 id\n    int32 sessionType   = 3;    //enum IM_SESSION_TYPE\n    int64 newestMsgId   = 4;    //最新消息 id\n    int64 readMsgId     = 5;    //当前已读消息进度\n}\n\n//请求发送IM消息\nmessage SendMessageReq {\n    ChannelMsg  channelMsg = 1;\n}\n\n//发送IM消息回包\nmessage SendMessageRsp {\n    ChannelMsg  channelMsg = 1;\n}\n\n//请求拉取IM消息\nmessage SyncMessageReq {\n    int32 sessionType   = 1;    //enum IM_SESSION_TYPE    客户端维护这3个syncKey\n    string sessionId    = 2;\n    int64 syncKey       = 3;\n}\n\n//拉取IM消息回包\nmessage SyncMessageRsp {\n    int32 sessionType           = 1;    //enum IM_SESSION_TYPE\n    int64 syncKey               = 2;\n    bool hasMore                = 3;    //是否还有新消息需要继续拉取\n    repeated ChannelMsg msgList = 4;\n\n    repeated ActorMirrorInfo senderInfos = 5;    //消息发送方的信息 uin -> ActorMirrorInfo\n    map<int64,int64> uin2FlushMsgTime    = 6;    //uin -> stamp 世界频道中该玩家的消息时间小于这个值就过滤掉\n}\n\n//拉取私聊对象的历史消息\nmessage SyncPrivateHistoryMessageReq {\n    int64 targetUin     = 1;    //私聊对象的 uin\n    int64 msgId         = 2;    //第一次拉历史消息传 0, 后续分页拉取就传上次回复的第一条消息的 msgId    (目前不用)\n}\n\n//拉取历史消息回包\nmessage SyncPrivateHistoryMessageRsp {\n    int64 targetUin             = 1;\n    repeated ChannelMsg msgList = 2;\n    ActorMirrorInfo targetInfo  = 3;    //对方的信息\n    bool hasMore                = 4;    //是否还有历史消息可以继续拉取\n}\n\n//IM新消息通知\nmessage NewMessageNotify {\n    int32 sessionType           = 1;    //enum IM_SESSION_TYPE\n    ActorMirrorInfo senderInfo  = 2;    //发送方的信息\n\n    int64 syncKey               = 3;    //世界频道的聊天消息通知才会发 syncKey 和 channelMsg\n    ChannelMsg channelMsg       = 4;\n}\n\n//给玩家分配世界聊天线路\nmessage AllocUserWorldGroupReq {\n\n}\n\nmessage AllocUserWorldGroupRsp {\n    string sessionId = 1;\n}\n\nmessage WorldLineInfo {\n    int32 lineId        = 1;\n    string sessionId    = 2;    //线路的 sessionId\n    int32 loadPercent   = 3;    //负载万分比\n}\n\n//获取世界频道线路信息\nmessage GetWorldLineInfoReq {\n}\n\nmessage GetWorldLineInfoRsp {\n    repeated WorldLineInfo lineInfoLst = 1;\n}\n\n//切换世界聊天线路\nmessage SwitchWorldGroupReq {\n    string dstSessionId = 1;\n}\n\nmessage SwitchWorldGroupRsp {\n    WorldLineInfo lineInfo = 1;\n}\n\n//举报理由\nenum E_REPORT_REASON {\n    ERR_NONE        = 0;\n    ERR_PORN        = 1;    //色情\n    ERR_POLITICS    = 2;    //反动政治\n    ERR_ADS_FRAUD   = 3;    //广告欺诈\n    ERR_ABUSE       = 4;    //谩骂骚扰\n    ERR_OTHER       = 5;    //其他\n}\n\n//举报其他玩家\nmessage ReportUserReq {\n    int64 targetUin         = 1;    //被举报玩家 uin\n    repeated int32 reasons  = 2;    //enum E_REPORT_REASON\n    int64 msgId             = 3;    //被举报消息的 msgId\n    string sessionId        = 4;    //被举报消息所在的 sessionId\n    string content          = 5;    //被举报的消息内容\n}\n\nmessage ReportUserRsp {\n\n}\n\n//获取多个聊天频道(世界, 社团, 私聊)的最新的一条消息在主界面展示\nmessage GetChannelNewestMessageReq {\n\n}\n\nmessage GetChannelNewestMessageRsp {\n    repeated ChannelMsg msgList             = 1;\n    repeated ActorMirrorInfo senderInfos    = 2;\n    WorldLineInfo myLineInfo                = 3;    //自己所在线路信息\n    repeated int32 mutedChannels            = 4;    //被禁言的频道    enum IM_SESSION_TYPE\n    repeated int64 unReadTargetUinLst       = 5;    //有未读消息的聊天对象 uin\n    bool unionUnRead                        = 6;    //是否有未读的公会消息\n}\n\n//获取正在聊天的私聊对象\nmessage GetPrivateChattingTargetReq {\n\n}\n\nmessage GetPrivateChattingTargetRsp {\n    repeated ActorMirrorInfo infos = 1;\n}\n\n//修改私聊对象\nmessage ChangePrivateChattingTargetReq {\n    int64 addTargetUin  = 1;    //添加某个聊天对象的 uin\n    int64 delTargetUin  = 2;    //移除某个聊天对象的 uin\n}\n\nmessage ChangePrivateChattingTargetRsp {\n\n}\n\n//获取聊天相关状态\nmessage GetChatStateReq {\n\n}\n\nmessage GetChatStateRsp {\n    int32 muteReason            = 1;    //enum RET_CODE\n    int32 durationInSec         = 2;    //禁言时长 秒   mute = true 且 durationInSec = 0 表示永久禁言\n    repeated int32 muteChannels = 3;    //被禁言的频道 enum IM_SESSION_TYPE\n    bool mute                   = 4;    //是否被禁言\n}\n\n//设置聊天消息已读\nmessage MarkMessageReadReq {\n    int32 sessionType   = 1;    //enum IM_SESSION_TYPE\n    int64 targetUin     = 2;    //聊天对象 uin, 社团聊天就发 0\n    int64 msgId         = 3;    //最后一条消息的 msgId\n}\n\nmessage MarkMessageReadRsp {\n}\n\n\n\n\n\n//资源大种类\nenum TUPLE_TYPE {\n    TT_NONE     = 0;\n    ITEM        = 1;    //物品\n    CARD        = 2;    //卡牌\n    BADGE       = 3;    //徽章\n    T_FASHION   = 4;    //时装\n    CG          = 5;    //CG\n    BGM         = 6;    //bgm\n    STORY_MONSTER = 7;    //怪物图鉴\n    GIFT        = 8;    //礼包\n}\n\n//通用物品类型\nenum ITEM_TYPE {\n    IT_NONE             = 0;\n    BIND_DIAMOND        = 1;    //绑钻\n    RECHARGE_DIAMOND    = 2;    //充值钻\n    GAME_COIN           = 3;    //金币\n    ENERGY              = 4;    //体力\n    ROLE_EXP            = 5;    //玩家经验\n    CARD_EXP            = 6;    //卡牌经验\n    MONTH_CARD          = 11;  //月卡\n    BATTLE_PASS         = 12;  //通行证\n    BATTLE_PASS_SINIOR  = 13;  //通行证-高级\n    BATTLE_PASS_ACTIVITY= 14;  //通行证-活动\n    SEAL                = 16;   //印章\n    EXP_ITEM            = 101;  //经验药水\n    CONSUME_MATERIAL    = 102;  //消耗材料\n    UNIVERSAL_CARD      = 103;  //万能角色卡\n    SAME_NAME_CARD      = 104;  //同名角色卡\n    BADGE_EXP_ITEM      = 105;  //徽章经验药水\n    MANOR_SALEABLE_ITEM = 107;  //大地图可兑换道具\n    HEAD_ITEM           = 108;  //头像\n    HEAD_RECT_ITEM      = 109;  //头像框\n    EMOJI               = 110;  //表情\n    RANDOM_PACKAGE      = 201;  //随机礼包\n    CHOSEN_PACKAGE      = 202;  //选择礼包\n    REGULAR_PACKAGE     = 203;  //固定礼包\n    FIX_COUNT_PACKAGE   = 204;  //固定数量兑换礼包  N个物品兑换一次奖励\n    PROFESSION_PACKAGE  = 205;  //职业选择礼包\n    ARENA_MAP           = 301;  //竞技场地图\n    ARENA_BUILDING      = 302;  //竞技场建筑\n    ROGUE_ITEM          = 401;  //肉鸽相关物品\n}\n\nenum TIMES_TYPE {\n    TIMES_TYPE_NONE     = 0;\n    TT_ENERGY           = 1;    //体力\n    TT_ARENA_FIGHT      = 2;    //竞技场挑战\n}\n\n//次数资源\nenum CNT_RESOURCE_TYPE {\n    CRT_NONE                    = 0;\n    CRT_ENERGY_BUY_TIMES        = 1;    //体力已购买次数\n    CRT_ARENA_BUY_FIGHT_TIMES   = 2;    //竞技场已购买次数\n    CRT_ARENA_TOTAL_FIGHT_COUNT = 3;    //竞技场总共可挑战次数\n}\n\nmessage ItemDrop {\n    ItemTuple item  = 1;\n    int32 prob      = 2;    //概率\n}\n\n//获取所有物品\nmessage GetItemsReq {\n\n}\n\n//获取所有物品\nmessage GetItemsRsp {\n    repeated ItemInfo items = 1;\n    int64 syncKey           = 2;    //用于增量同步的syncKey\n}\n\n//同步变化的物品\nmessage SyncItemsReq {\n    int64 syncKey = 1;\n}\n\nmessage SyncItemsRsp {\n    repeated ItemInfo items         = 1;    //新增或有变化的物品\n    repeated int64 delItemUidLst    = 2;    //需要删除的物品 itemUid\n    int64 syncKey                   = 3;    //新的syncKey\n    bool cliReq                     = 4;    //是否是客户端主动来请求的\n    int64 lastSyncKey               = 5;    //服务器上次主动通知时的 key, 如果客户端本地值相同, 说明客户端全部收到了之前的通知, 否则客户端主动发送 syncItemsReq 来更新\n}\n\n//购买次数资源\nmessage BuyCountResourceReq {\n    int32 timesType     = 1;    //enum CNT_RESOURCE_TYPE\n    int32 count         = 2;    //购买次数\n}\n\nmessage BuyCountResourceRsp {\n    int32 timesType                 = 1;    //enum TIMES_TYPE\n    map<int32, int32> cntResources  = 2;    //次数资源\n}\n\n//使用物品(开礼包)\nmessage UseItemReq {\n    int64 itemUid   = 1;    //物品id\n    int32 count     = 2;    //使用数量\n    string params   = 3;    //参数    选择礼包: 选择第几个物品, 从 1 开始\n}\n\nmessage UseItemRsp {\n    repeated DropTuple items = 1;   //使用礼包后获得的物品\n}\n\n//批量使用物品\nmessage BatchUseItemsReq {\n    map<int64, int32> itemUid2Count = 1;    //itemUid -> count\n}\n\nmessage BatchUseItemsRsp {\n    repeated DropTuple items = 1;   //使用礼包后获得的物品\n}\n\n//卖出物品\nmessage SaleItemReq {\n    int64 itemUid   = 1;    //物品id\n    int32 count     = 2;\n}\n\nmessage SaleItemRsp {\n    ItemTuple item  = 1;    //卖出后得到的东西\n}\n\n//消耗物品  服务端内部使用\nmessage ConsumeItemReq {\n    repeated ItemTuple items    = 1;\n    LOG_ID logId                = 2;\n}\n\nmessage ConsumeItemRsp {\n}\n\n//检查物品是否足够  服务端内部使用\nmessage CheckItemEnoughReq {\n    repeated ItemTuple items    = 1;\n}\n\nmessage CheckItemEnoughRsp {\n    bool enough = 1;\n}\n\n//兑换卡牌碎片\nmessage ExchangeCardFragmentReq {\n    int32 itemId        = 1;\n    int32 count         = 2;\n    int32 targetItemId  = 3;    //兑换的目标物品 id\n}\n\nmessage ExchangeCardFragmentRsp {\n    ItemTuple item      = 1;    //兑换后得到的物品\n}\n\n//使用物品兑换体力\nmessage ExchangeEnergyReq {\n    map<int64, int32> items = 1;    //itemUid -> count\n}\n\nmessage ExchangeEnergyRsp {\n}\n\n//请求已获得的怪物图鉴\nmessage GetStoryMonsterListReq {\n}\n\nmessage GetStoryMonsterListRsp {\n    repeated int32 storyMonsterIds      = 1;   //已获得的怪物图鉴列表\n    repeated int32 clickedStoryEventId  = 2;   //已点击过的事迹 id\n}\n\n//点击事迹上报\nmessage ClickStoryEventReportReq {\n    repeated int32 eventIds = 1;\n}\n\nmessage ClickStoryEventReportRsp {\n}\n\n\n\n\n\n\n//限时挑战信息\nmessage LimitChallengeInfo {\n    int64 uin                   = 1;\n    repeated int64 taskUid      = 2;\n    repeated int32 passStages   = 3;\n    int32 activityId            = 4;\n\n}\n//获取信息\nmessage GetLimitChallengeInfoReq {\n}\nmessage GetLimitChallengeInfoRsp {\n    int32 activityId            = 1;\n    repeated int32 passStages   = 2;\n    repeated TaskInfo  tasks    = 3;\n    int64 startStamp            = 4;\n    int64 endStamp              = 5;\n}\n\n//重置\nmessage ResetLimitChallengeReq {\n}\n\nmessage ResetLimitChallengeRsp {\n    int32 activityId            = 1;\n    repeated int32 passStages   = 2;\n}\n\n//领取任务\nmessage RewardLimitChallengeTaskReq {\n    int64 taskUin = 1;\n}\n\nmessage RewardLimitChallengeTaskRsp {\n    repeated DropTuple rewards  = 1;\n    TaskInfo  task              = 2;\n    \n}\n\n\n\nmessage LogBase {\n\tint64 uin           = 1;\n\tstring channel      = 2;    //渠道\n\tstring deviceId     = 3;    //设备 id\n\tuint32 createdTime  = 4;    //创建角色时间\n\tuint32 dataTime     = 5;    //日志时间\n\tint32 platform      = 6;    //平台\n\tint32 level         = 7;    //团队等级\n\tint32 day           = 8;    //登录天数\n\tint32 power         = 9;    //战斗力\n\tint32 pay           = 10;   //充值总额度\n}\n\n//登录类型\nenum LOGIN_TYPE {\n    LT_NONE         = 0;\n    LT_DEFAULT      = 1;    //默认登录\n    LT_RECONNECT    = 2;    //重连登录\n    LT_REGISTER     = 3;    //创建角色登录\n}\n\n//登出类型\nenum LOGOUT_TYPE {\n    LOT_NONE            = 0;\n    LOT_DEFAULT         = 1;    //默认登出\n    LOT_SERVER_CLOSE    = 2;    //服务器关闭\n    LOT_GM_KICK         = 3;    //GM 踢下线\n}\n\n//团队操作类型\nenum PLAYER_OPERATE_TYPE {\n    POT_NONE        = 0;\n    POT_GAIN_EXP    = 1;    //获得经验\n    POT_LEVELUP     = 2;    //升级\n}\n\n//卡牌操作类型\nenum CARD_OPERATE_TYPE {\n    COT_NONE            = 0;\n    COT_GAIN_EXP        = 1;    //获得经验\n    COT_LEVELUP         = 2;    //升级\n    COT_QUALITY_UP      = 3;    //突破\n    COT_GRADE_UP        = 4;    //觉醒\n    COT_NORMAL_SKILL_LEVELUP    = 5;    //普攻击技能升级\n    COT_SPECIAL_SKILL_LEVELUP   = 6;    //小技能升级\n    COT_BURST_SKILL_LEVELUP     = 7;    //必杀技能升级\n    COT_GROW_SKILL_1_LEVELUP    = 8;    //被动技能1升级\n    COT_GROW_SKILL_2_LEVELUP    = 9;    //被动技能2升级\n    COT_GROW_SKILL_3_LEVELUP    = 10;    //被动技能3升级\n}\n\n//徽章操作类型\nenum BADGE_OPERATE_TYPE {\n    BOT_NONE            = 0;\n    BOT_GAIN_EXP        = 1;    //获得经验\n    BOT_LEVELUP         = 2;    //升级\n}\n\n//物品操作类型\nenum ITEM_OPERATE_TYPE {\n    IOT_NONE    = 0;\n    IOT_GAIN    = 1;    //获得\n    IOT_CONSUME = 2;    //消耗\n}\n\n//公会操作类型\nenum GUILD_OPERATE_TYPE {\n    GOT_NONE            = 0;\n    GOT_CREATE          = 1;    //创建公会\n    GOT_JOIN            = 2;    //加入公会\n    GOT_EXIT            = 3;    //退出公会\n    GOT_KICK_OUT_MEMBER = 4;    //提出公会\n    GOT_DISMISS         = 5;    //解散公会\n    GOT_CHANGE_BADGE    = 6;    //更改公会徽章\n    GOT_CHANGE_NAME     = 7;    //更改公会名字\n    GOT_CHANGE_NOTICE   = 8;    //更改公会公告\n    GOT_CHANGE_CONDITION= 9;    //修改入会条件\n    GOT_APPROVE         = 10;   //同意入会申请\n    GOT_REJECT          = 11;   //拒绝入会申请\n    GOT_PROMOTE_MEMBER  = 12;   //晋升目标成员\n    GOT_DEMOTE_MEMBER   = 13;   //降级目标成员\n    GOT_SEND_MESSAGE    = 14;   //公会成功发言\n    GOT_GM_SET_LEVEL    = 15;   //GM 修改等级\n    GOT_GM_BLOCK        = 16;   //GM block 聊天和 公告\n    GOT_GM_UNBLOCK      = 17;   //GM unblock 聊天和公告\n}\n\n//邮件操作类型\nenum MAIL_OPERATE_TYPE {\n    MOT_NONE            = 0;\n    MOT_RECEIVE         = 1;    //收到邮件\n    MOT_MARK_READ       = 2;    //标记已读\n    MOT_FETCH_ATTACHMENT= 3;    //领取附件\n    MOT_DELETE          = 4;    //手动删除邮件\n    MOT_EXPIRE          = 5;    //邮件过期删除\n}\n\n//商店操作类型\nenum SHOP_OPERATE_TYPE  {\n    SPOT_NONE           = 0;\n    SPOT_BUY            = 1;    //购买\n    SPOT_REFRESH        = 2;    //刷新\n}\n\n//商店操作类型\nenum TASK_TYPE  {\n    TKT_NONE           = 0;\n    TKT_BATTLAPASS     = 1;    //通行证任务\n    TKT_CAINIVAL       = 2;    //嘉年华任务\n}\n\n\n\n//http 用户验证\nmessage AuthReq {\n    string accountId    = 1;    //邮箱或其他唯一标识\n    string accountType  = 2;\n    string password     = 3;    //游客登录,不用填密码\n    string imei         = 4;\n    string osVersion    = 5;    //os 版本\n    string channel      = 6;    //渠道\n    int32 platform      = 7;    //enum PLATFORM_TYPE\n    bool autoCreate     = 8;    //是否自动创建账号\n}\n\nmessage AuthRsp {\n    string openId   = 1;\n    string token    = 2;\n}\n\n//http 账号密码模式 创建账号\nmessage CreateAccountReq {\n    string accountId    = 1;    //邮箱或其他唯一标识\n    string accountType  = 2;\n    string password     = 3;\n    string imei         = 4;\n    string osVersion    = 5;    //os 版本\n    string channel      = 6;    //渠道\n    int32 platform      = 7;    //enum PLATFORM_TYPE\n}\n\nmessage CreateAccountRsp {\n    string openId   = 1;\n    string token    = 2;\n}\n\n//http 生成引继码\nmessage GenerateInheritCodeReq {\n    string token    = 1;\n    string password = 2;\n}\n\nmessage GenerateInheritCodeRsp {\n    string inheritCode = 1;\n}\n\nmessage AuthByInheritReq {\n    string accountId    = 1;    //传设备 id\n    string imei         = 2;\n    string osVersion    = 3;    //os 版本\n    string channel      = 4;    //渠道\n    int32 platform      = 5;    //enum PLATFORM_TYPE\n\n    string inheritCode  = 6;    //引继码\n    string inheritPwd   = 7;    //印记密码\n}\n\nmessage AuthByInheritRsp {\n    string openId   = 1;\n    string token    = 2;\n}\n\n//http 获取网关地址\nmessage LoginReq {\n    string openId   = 1;\n    string token    = 2;\n    int32 platform  = 3;\n    string channel  = 4;    //PnSDK_CN  Bilibili\n    string buildVersion = 5;\n    bool authRemote = 6;    //是否 sdk 远端验证\n}\n\nmessage LoginRsp {\n    repeated string addresses   = 1;    //网关地址\n    int32 maintainState         = 2;    //维护状态 1:维护中\n    string maintainNotice       = 3;    //维护公告\n    int32 timezoneOffset        = 4;    //时区偏移 秒    例如东8区: 28800\n    string publicKey            = 5;\n}\n\n//http req  第三方平台登录\nmessage LoginByOAuthReq {\n    string openPlat     = 1;    //第三方平台\n    string appId        = 2;\n    string code         = 3;\n    string state        = 4;\n    string imei         = 5;\n    string osVersion    = 6;    //os 版本\n    string channel      = 7;    //渠道\n    int32 platform      = 8;    //enum PLATFORM_TYPE\n}\n\n//http rsp\nmessage LoginByOAuthRsp {\n    repeated string addresses   = 1;    //网关地址\n    int32 maintainState         = 2;    //维护状态 1:维护中\n    int32 timezoneOffset        = 3;    //时区偏移 秒    例如东8区: 28800\n    string token                = 4;\n    string openId               = 5;\n}\n\n\n//客户端连接上gatewaySvr后,首先验证token\nmessage AuthTokenReq {\n    string token    = 1;\n    bool authRemote = 2;    //是否 sdk 远端验证\n    string openId   = 3;    //第三方账号系统的 id\n    string channel  = 4;\n}\n\nmessage AuthTokenRsp {\n    string openId       = 1;\n    string sdkOpenId    = 2;    //第三方 sdk 的 openId\n}\n\nmessage AuthTokenV2Rsp {\n    int32 code      = 1;\n    string error    = 2;\n    int32 uid       = 3;\n}\n\nmessage EnterGameReq {\n    string token        = 1;\n    string secret       = 2;\n    string deviceId     = 3;    //设备 id\n    string channel      = 4;    //渠道\n    int32 platform      = 5;    //sp_common.proto   enum PLATFORM_TYPE\n    bool authRemote     = 6;    //是否 sdk 远端验证\n    string openId       = 7;    //第三方账号系统的 id\n    int32 graphicsDeviceID = 8;\n    int32 graphicsDeviceVendorID = 9;\n    string loginIP       = 10;   //用户 ip 地址\n}\n\nmessage EnterGameRsp {\n    bool actorExist     = 1;    //是否已存在角色\n    ActorInfo actor     = 2;\n    int64 sysStamp      = 3;    //系统时间\n    string svrVersion   = 4;    //服务器版本信息\n    string settings     = 5;    //设置信息\n    int64 openSvrTime   = 6;    //开服时间\n}\n\nenum E_KICKOFF_REASON {\n    E_KR_NONE           = 0;\n    E_KR_SYSTEM         = 1;    //系统踢下线\n    E_KR_OTHER_DEVICE   = 2;    //被其他设备\n    E_KR_CLOSE_SERVER   = 3;    //关服踢下线\n}\n\nmessage KickOffReq {\n    int64 uin       = 1;        //0: 踢所有人下线\n    int32 reason    = 2;        //enum E_KICKOFF_REASON\n}\n\nmessage KickOffRsp {\n\n}\n\nmessage KickOffNotify {\n    int64 uin       = 1;\n    int32 reason    = 2;        //enum E_KICKOFF_REASON\n}\n\n\n\nmessage GetAllMailsReq {\n    int64 mailSeq = 1;              //客户端可以传一个 mailSeq 值,增量拉取新邮件.传 0 即全量拉取\n}\n\nmessage GetAllMailsRsp {\n    int64 mailSeq           = 1;    //更新客户端本地 mailSeq 值\n    repeated MailInfo mails = 2;\n}\n\nmessage FetchMailAttachmentReq {\n    int64 mailUid = 1;  //0: 领取所有附件\n}\n\nmessage FetchMailAttachmentRsp {\n    repeated int64 fetchedUidLst    = 1;    //已领取的邮件 mailUid\n    repeated DropTuple items        = 2;    //领取到的物品\n}\n\nmessage DeleteMailReq {\n    int64 mailUid = 1;\n}\n\nmessage DeleteMailRsp {\n}\n\nmessage MarkMailReadReq {\n    int64 mailUid = 1;\n}\n\nmessage MarkMailReadRsp {\n\n}\n\nmessage NewMailNotify {\n\n}\n\n\n//探险地图\n\n\n\n\n//事件类型\nenum MANOR_EVENT_TYPE {\n    MET_NONE                = 0;\n    MET_INITIATIVE          = 1;    //主动事件\n    MET_ROLE_PLOT           = 2;    //角色剧情\n    MET_DAILY_RANDOM        = 3;    //每日随机事件\n    MET_FIX_BUILDING        = 4;    //固定建筑\n    MET_BARRIER             = 6;    //阻挡物事件\n    MET_BGM_PIC             = 7;    //bgm 图鉴事件\n    MET_MONSTER_PIC         = 8;    //魔物图鉴事件\n    MET_ACTIVITY_ROLE_PLOT  = 10;   //活动支线剧情事件\n    MET_EXPEDITION          = 11;   //远征建筑\n    MET_BOSS                = 12;   //boss 建筑\n    MET_ROGUE               = 13;   //肉鸽建筑\n    MET_CONVEY              = 14;   //传送门\n    MET_BUFF_STAGE          = 15;   //buff累积关卡建筑\n    MET_GROUP_REFRESH       = 21;   //同组刷新事件\n}\n\n//主动事件子类型\nenum MANOR_SUB_EVENT {\n    MSE_NONE            = 0;\n    MSE_BATTLE          = 1;    //战斗\n    MST_PLOT            = 2;    //剧情\n    MST_PACKAGE         = 3;    //宝箱\n    MST_ROAD            = 4;    //路牌\n    MST_SHOP_NPC        = 5;    //商店NPC\n    MST_DOOR            = 6;    //门\n}\n\n//深渊功能开启状态\nmessage ManorFeatureSchedule {\n    int32 eventType = 1;    //enum MANOR_EVENT_TYPE 事件类型, 目前类型 4, 15 会用到\n    bool open       = 2;    //是否开启\n    int64 startTime = 3;    //开启时间\n    int64 endTime   = 4;    //结束时间\n}\n\n//获取探险地图所有所有信息\nmessage GetManorInfoReq {\n    int32 mapId = 1;    //地图 id\n}\n\nmessage GetManorInfoRsp {\n    ActorManor manorInfo            = 1;\n    repeated ManorEvent allEvents   = 2;    //已有的事件\n    int64 actionValueRecoverStamp   = 3;    //行动值完全恢复时间\n    int64 plotValueRecoverStamp     = 4;    //剧情点完全恢复时间\n    repeated ManorFeatureSchedule featureSchedules = 5; //玩法开启状态\n}\n\nmessage GetManorFeatureScheduleReq {\n}\n\nmessage GetManorFeatureScheduleRsp {\n    repeated ManorFeatureSchedule featureSchedules = 1; //玩法开启状态\n}\n\n//获取探险地图简要信息\nmessage GetManorInfoSimpleReq {\n}\n\nmessage GetManorInfoSimpleRsp {\n    ActorManor manorInfo            = 1;\n}\n\n//事件更新通知\nmessage ManorEventUpdateNotify {\n    repeated ManorEvent events    = 1;    //需要更新的事件\n    repeated int32 deleteEventIds = 2;    //删除事件id列表\n}\n\n//探险地图信息更新通知\nmessage ManorInfoUpdateNotify {\n    ActorManor manorInfo = 1;\n}\n\n//传送通知\nmessage ManorConveyNotify {\n    string coordinate   = 1;\n}\n\n//客户端在移动过程中触发一个事件, 仅支线事件第一个节点的触发, 同一组的支线事件只能由一个\nmessage ManorTriggerEventReq {\n    int32 gridId        = 1;    //客户端当前所在格子组\n    string coordinate   = 2;    //客户端当前坐标\n    int32 eventId       = 3;\n    int32 mapSubId      = 4;    //当前所处的地图区域 id\n    string nodeCoordinate = 5;  //支线事件节点坐标\n}\n\nmessage ManorTriggerEventRsp {\n    ManorEvent event    = 1;    //触发的事件信息\n    int64 actionValueRecoverStamp   = 3;    //行动值完全恢复时间\n    int64 plotValueRecoverStamp     = 4;    //剧情点完全恢复时间\n}\n\n//客户端上报自己的位置\nmessage ManorReportPositionReq {\n    string coordinate   = 2;\n    int32 mapId         = 3;\n}\n\nmessage ManorReportPositionRsp {\n}\n\n\n//处理事件 (除战斗外的事件都用这个接口)\nmessage ManorProcessEventReq {\n    int32 eventId   = 1;    //事件 id\n    int32 nodeId    = 2;    //当前处理的支线事件节点 id\n    int32 nextNodeId = 3;   //下一个要处理的节点 id\n    ManorNodeProgress progress = 4; //如果是剧情结点发送该剧情所有的走向包括选项id\n    int32 mapSubId   = 5;   //当前所处的地图区域 id\n    string nodeCoordinate = 6;  //支线事件节点坐标\n}\n\nmessage ManorProcessEventRsp {\n    repeated DropTuple rewards  = 1;    //奖励\n    ManorEvent event            = 2;    //更新事件状态\n    int64 actionValueRecoverStamp   = 4;    //行动值完全恢复时间\n    int64 plotValueRecoverStamp     = 5;    //剧情点完全恢复时间\n}\n\nmessage ManorBatchProcessEventReq {\n    repeated int32 eventIds = 1;\n}\n\nmessage ManorEventReward {\n    ManorEvent event = 1;\n    repeated ItemTuple rewards = 2;\n}\n\nmessage ManorBatchProcessEventRsp {\n    repeated ManorEventReward eventRewards = 1;\n}\n\n//完成一句剧情对话\nmessage ManorFinishStoryReq {\n    int32 eventId   = 1;    //事件 id\n    int32 storyId   = 2;    //当前完成的 storyId\n    ManorStoryProgress storyProgress = 3;\n}\n\nmessage ManorFinishStoryRsp {\n    int32 eventId   = 1;    //事件 id\n    int32 storyId   = 2;    //当前完成的 storyId\n    repeated int32 optionIndexes = 3;   //选项索引\n}\n\n//跳过随机剧情事件\nmessage ManorJumpStoryEventReq {\n    int32 eventId   = 1;    //事件 id\n}\n\nmessage ManorJumpStoryEventRsp {\n    ManorEvent event            = 1;    //更新事件状态\n    int64 actionValueRecoverStamp   = 3;    //行动值完全恢复时间\n    int64 plotValueRecoverStamp     = 4;    //剧情点完全恢复时间\n    repeated DropTuple rewards      = 5;    //奖励\n}\n\n//上报随机事件位置\nmessage ManorReportEventPositionReq {\n    int32 eventId       = 1;    //事件 id\n    string coordinate   = 2;    //位置\n}\n\nmessage ManorReportEventPositionRsp {\n\n}\n\n//领取新手区域奖励\nmessage ManorFetchRookieRewardReq {\n}\n\nmessage ManorFetchRookieRewardRsp {\n    ActorManor manorInfo = 1;\n    repeated ItemTuple rewards = 2;\n}\n\nmessage ManorGetActivityRolePlotEventReq {\n}\n\nmessage ManorGetActivityRolePlotEventRsp {\n    repeated ManorEvent events = 1;\n}\n\n\n\n\n\nenum FLOWER_STATE {\n    FS_NONE     = 0;\n    FS_UNLOCK   = 1;\n    FS_OPEN     = 2;\n    FS_REWARED  = 3;\n}\n//请求植物信息\nmessage GetPlantInfoReq {\n    int64 refreshStamp                          = 1;  \n}\n\nmessage PlantData {\n    int32 plantId               = 1;\n    map<int32,int32> flowers    = 2;  //flowerId->状态\n}\n//回复植物信息\nmessage GetPlantInfoRsp {\n    repeated PlantData plantList    = 1;\n    TaskInfo dailyTask              = 2;\n    int64 refreshStamp              = 3;  \n}\n\n//请求领取开花奖励\nmessage RewardFlowerReq {\n    int32 plantId   = 1;\n    int32 flowerId  = 2;\n}\n\n//回复领取开花奖励\nmessage RewardFlowerRsp {\n    repeated ItemTuple rewards          = 1;\n    repeated PlantData plantList        = 2;\n}\n\n//领取植物任务奖励请求\nmessage RewardPlantTaskReq {\n    int64 taskUid = 1;\n}\n//领取植物任务奖励回复\nmessage RewardPlantTaskRsp {\n    repeated DropTuple rewards  = 1;\n}\n\n\n\nenum PRODUCT_TYPE {\n    PT_NONE             = 0;\n    PT_RECHARGE         = 1;    //充值档位\n    PT_MONTH_CARD       = 2;    //月卡\n    PT_GIFT             = 3;    //礼包\n    PT_BATTLE_PASS      = 4;    //通行证\n    PT_BATTLE_PASS_HIGH = 6;    //特级通行证\n    PT_BATTLE_PASS_DIS  = 7;    //差值通行证\n    PT_AGREEMENT        = 8;    //密约\n\n    PT_FASHION          = 11;   //时装\n}\n\n//支付订单状态\nenum PAY_ORDER_STATE {\n    POS_NONE        = 0;\n    POS_CREATED     = 1;    //创建订单\n    POS_PAYED       = 2;    //支付完成\n    POS_DELIVERY    = 3;    //发货完成\n    POS_CANCELED    = 4;    //取消订单\n    POS_FAIL        = 5;    //失败(订单错误)\n    POS_REFUNDING   = 6;    //退款中, 收到平台退款通知后将订单状态修改为该值\n    POS_REFUND_DONE = 7;    //退款完成\n}\n\nmessage GetPurchaseProductsReq {\n    repeated int32 productTypes = 1;  //PRODUCT_TYPE\n    int32 platformType          = 2;  //PLATFORM_TYPE\n}\nmessage ProductInfo {\n    int32 id            = 1;\n    int32 productType   = 2;    //PRODUCT_TYPE\n    int64 endStamp      = 3;\n    int32 shelfArea     = 4;    //上架区域 大于10000000, 则为 ShopLabel 页签\n    bool newTag         = 5;    //是否是新品标记\n    bool owned          = 6;    //是否拥有（时装）\n    int32 sort          = 7;    //排序ID\n}\n\n//商店页签\nmessage ShopLabel {\n    int64 uid        = 1;\n    int32 sortValue  = 2;    //排序值\n    string labelName = 3;    //页签名字\n    int64 startStamp = 4;    //开始时间\n    int64 endStamp   = 5;    //结束时间\n}\n\nmessage GetPurchaseProductsRsp {\n    repeated ProductInfo list     = 1;\n    repeated ShopLabel shopLabels = 2;\n}\n\n\nmessage PurchaseGetReq {\n    \n}\n\nmessage PurchaseGetRsp {\n    map<int32,int64>   monthCardDay     = 1;\n    map<int32,bool>    monthCardReward  = 2;\n    map<int32, int32>  limitRecord      = 3;    //购买记录\n    bool               isBought         = 4;    //是否首冲\n    WeekPayInfo    weekPayInfo          = 5;    //每周累充信息\n}\n\nmessage PurchaseBuyReq {\n    int32 id            = 1;\n}\n\nmessage PurchaseBuyRsp {\n    repeated ItemTuple reward                = 1;\n    map<int32,int64>   monthCardDay          = 2;\n    map<int32, int32>  limitRecord           = 3;    //购买记录\n    bool                isBought             = 4;    //是否首冲\n}\n\nmessage FashionBuyReq {\n    int32 buyFashionId        = 1;\n}\n\nmessage FashionBuyRsp {\n    int32 buyFashionId        = 1;\n}\n\nmessage MonthCardDailyRewardReq {\n    int32 cardType              = 1;\n}\n\nmessage MonthCardDailyRewardRsp {\n    repeated ItemTuple reward                   = 1;\n    map<int32,bool>   monthCardReward           = 2;\n}\n//购买通行证请求\nmessage BattlePassBuyReq {\n    int32 productId = 1;\n}\n//购买通行证回复\nmessage BattlePassBuyRsp {\n    repeated BattlePassShowInfo allBattlePass = 1;\n}\n\n//创建充值订单\nmessage CreatePayOrderReq {\n    int32 productBaseId = 1;   //base_pay_product.id\n}\n\nmessage CreatePayOrderRsp {\n    int32 productBaseId = 1;   //base_pay_product.id\n    string nonce        = 2;   //传递给 sdk 平台的透传参数\n    string orderSign    = 3;   //for bilibili order_sign\n    string productId    = 4;   //商品名字 base_pay_product.product_id\n}\n\n//取消订单\nmessage CancelPayOrderReq {\n    string nonce    = 1;    //传递给 sdk 平台的透传参数\n}\n\nmessage CancelPayOrderRsp {\n    string nonce        = 1;   //传递给 sdk 平台的透传参数\n    int32 productBaseId = 2;   //base_pay_product.id\n}\n\n//完成订单\nmessage FinishPayOrderReq {\n    string nonce    = 1;    //传递给 sdk 平台的透传参数\n}\n\nmessage FinishPayOrderRsp {\n    string nonce        = 1;    //传递给 sdk 平台的透传参数\n    int32 productBaseId = 2;    //base_pay_product.id\n}\n\n//每周累充 game.actor_week_pay\nmessage WeekPayInfo {\n    int64 uin   = 1;\n    int32 index              = 2;   //当前周期\n    int32 consumeBindDiamond = 3;   //本周消耗的欧泊   大于等于配置里要求的值即可领取改档奖励\n    int32 rechargeAmount     = 4;   //本周充值金额\n    int32 bindDiamondReward  = 5;   //已领取的欧泊消耗奖励值   比如 30 档位的奖励已领取,就记为 30\n    int32 rechargeReward     = 6;   //已领取的充值奖励值\n    int64 resetStamp         = 7;   //周重置时间\n}\n\nenum WEEK_PAY_REWARD_TYPE {\n    WPRT_NONE = 0;\n    WPRT_CONSUME_BIND_DIAMOND   = 1; //累积消耗欧泊奖励\n    WPRT_RECHARGE               = 2; //累积充值奖励\n}\n\nmessage FetchWeekPayRewardReq {\n    int32 rewardType  = 1;  //enum WEEK_PAY_REWARD_TYPE  0:全部领取\n}\n\nmessage FetchWeekPayRewardRsp {\n    int32 rewardType        = 1;  //enum WEEK_PAY_REWARD_TYPE\n    WeekPayInfo weekPayInfo = 2;\n    repeated DropTuple rewards = 3;\n}\n\n\n\n\n\n//关系变更通知\nmessage RelationChangedNotify {\n    RelationInfo info           = 1;\n    ActorMirrorInfo targetInfo  = 2;    //对方信息\n}\n\n//删除收到的好友请求\nmessage RelationDelApplicantNotify {\n    int64 targetUin = 1;\n}\n\n//请求获取好友列表\nmessage GetFriendsReq {\n\n}\n\nmessage GetFriendsRsp {\n    repeated RelationInfo relations         = 1;    //关系列表(好友、收到的申请)\n    repeated ActorMirrorInfo targetInfos    = 2;    //对方的信息\n}\n\n//请求向对方发出添加好友申请\nmessage ApplyAddFriendReq {\n    int64 targetUin = 1;\n}\n\nmessage ApplyAddFriendRsp {\n    RelationInfo info = 1;\n}\n\n//同意对方的好友请求\nmessage AgreeFriendApplyReq {\n    int64 targetUin = 1;        //0 表示同意所有\n}\n\nmessage AgreeFriendApplyRsp {\n    int64 targetUin             = 1;\n    repeated RelationInfo infos = 2;    //更新关系数据 (成为好友或者删除好友请求)\n}\n\n//拒绝对方的好友请求\nmessage DisagreeFriendReq {\n    int64 targetUin = 1;        //0 表示拒绝所有\n}\n\nmessage DisagreeFriendRsp {\n    int64 targetUin = 1;        //客户端直接删除本地数据\n}\n\n//屏蔽其他玩家\nmessage BlockTargetReq {\n    int64 targetUin = 1;\n}\n\nmessage BlockTargetRsp {\n    RelationInfo info           = 1;\n    ActorMirrorInfo targetInfo  = 2;    //对方信息\n}\n\n//请求删除关系: 删除好友、解除屏蔽\nmessage DeleteRelationReq {\n    int64 targetUin = 1;\n}\n\nmessage DeleteRelationRsp {\n    int64 targetUin = 1;\n}\n\n//搜索玩家\nmessage SearchTargetReq {\n    string searchKey = 1;\n}\n\nmessage SearchTargetRsp {\n    repeated RelationInfo infos             = 1;\n    repeated ActorMirrorInfo targetInfos    = 2;    //对方信息\n}\n\n//设置备注名\nmessage SetRelationRemarkReq {\n    int64 targetUin = 1;\n    string remark   = 2;\n}\n\nmessage SetRelationRemarkRsp {\n    RelationInfo info = 1;\n}\n\n//获取所有已屏蔽玩家\nmessage GetAllBlockTargetReq {\n}\n\nmessage GetAllBlockTargetRsp {\n    repeated int64 blockTargets = 1;\n}\n\n\nmessage FriendFightRecord {\n    int64 uin                 = 1;\n    int32 index               = 2;\n    int64 opponentUin         = 3; //对手 uin\n    int64 battleUid           = 4;\n    int64 stamp               = 5;\n    bool isWin                = 6; //是否胜利\n    bool isDefend             = 7; //是否是防守方\n    ActorMirrorInfo opponent  = 8; //对手信息\n}\n\n//获取好友切磋战斗记录\nmessage GetFriendFightRecordReq {\n}\n\nmessage GetFriendFightRecordRsp {\n    repeated FriendFightRecord records = 1;\n}\n\n\n\n\n\n//game.actor_rogue_theme 肉鸽主题数据\nmessage RogueTheme {\n    int64 uin           = 1;\n    int32 themeId       = 2;    //主题 id\n    int32 topScore      = 3;    //最高综合评分\n    int32 level         = 4;    //主题等级\n    int32 rewardedLevel = 5;    //主题等级奖励领取进度\n    int32 exp           = 6;    //主题经验\n    repeated int32 talentIds        = 7;   //已激活的天赋\n    int32 unlockedDifficultyLevel   = 8;   //当前已通关的难度等级\n    int32 curDifficultyLevel        = 9;   //本局选择的难度等级, 0 标识还没有选择过\n    repeated int32 treasureIds      = 10;   //本局已获得的宝物\n    repeated int32 holyIds          = 11;   //本局已解锁的圣物\n    repeated int32 cardIds          = 12;   //本局已招募的角色\n    repeated int32 initTreasureIds  = 13;   //开局供选择的初始宝物\n    bool running                    = 14;   //是否已开局 true: 继续探索流程  false: 开始探索开局流程\n    repeated int32 onceEffTreasures = 15;   //暂未使用的一次性效果宝物\n    int32 freeEnhanceCardTimes      = 16;   //免费角色强化次数\n    int32 chapterId                 = 17;   //当前章节进度\n    repeated int32 starAttribPointAddCosts = 19;    //各星级角色属性强化消耗的属性点增加值(5个值, 分别对应角色5个星级角色的增加值)\n    map<int32, int32> onceTreasureEffBattles = 20;  //宝物效果: 和战斗场次相关的一次性效果, treasureId -> 生效剩余战斗场次 (为 0 了就触发奖励)\n    int64 startTime                 = 21;   //开局时间\n    repeated int32 keyStoryIds      = 22;   //事件节点完成的关键剧情(用于检测是否触发结局)\n    int32 totalTalent               = 23;   //累计获得的天赋点\n    int64 levelupStamp              = 24;   //升级时间\n    int32 sweepCount                = 25;   //已使用的扫荡次数\n    repeated int32 allSealIds       = 26;   //锁定的印章\n    repeated string sealBigAttrs    = 27;   //大印章属性 job:level:quality:addUpLevel\n    int32 handBookGrowId            = 28;   //角色图鉴养成 base_card_hand_book_grow.id\n}\n\n//肉鸽节点类型\nenum ROGUE_NODE_TYPE {\n    ROGUE_NODE_TYPE_NONE    = 0;\n    RNT_NORMAL_BATTLE       = 1;    //常规战斗\n    RNT_ENCOUNTER_BATTLE    = 2;    //遭遇战斗\n    RNT_BOSS_BATTLE         = 3;    //boss 战斗\n    RNT_SHOP                = 11;   //商店\n    RNT_EVENT               = 12;   //事件\n    RNT_SUPPLY              = 13;   //补给\n}\n\n//肉鸽节点奖励类型\nenum ROGUE_REWARD_TYPE {\n    ROGUE_REWARD_TYPE_NONE  = 0;\n    RRT_RECRUIT             = 1;    //招募券\n    RRT_TOKEN               = 2;    //随机代币\n    RRT_ATTRIB_POINT        = 3;    //随机属性点\n    RRT_TREASURE            = 4;    //随机宝物\n    RRT_RECOVER_HP          = 5;    //恢复血量\n    RRT_REVIVE              = 6;    //复活\n    RRT_SPECIFIC_TREASURE   = 7;    //指定宝物\n    RRT_SHOP_BUY_TREASURE   = 11;   //商店购买宝物(仅用于日志打点)\n    RRT_SHOP_REFRESH        = 12;   //商店重置(仅用于日志打点)\n}\n\n//肉鸽节点\nmessage RogueNode {\n    int32 nodeId            = 1;    //节点 id\n    int32 stageId           = 2;    //关卡 id, 仅用于节点类型为: 1常规战斗、2遭遇战斗、3BOSS战斗\n    map<int32, int32> shopTreasure2Prices = 3; //商店宝物id -> 价格  仅用于节点类型为: 11 商店\n    int32 shopResetCount    = 4;    //商店重置次数\n    int32 eventId           = 5;    //事件 id, 仅用于节点类型为: 12事件    base_story 表的 id\n    bool jobDone            = 6;    //该节点任务是否已完成(战斗胜利、完成剧情事件), true 状态才能领取奖励\n    bool extraReward        = 7;    //是否触发额外奖励\n    repeated int32 rewardOptions = 8;     //奖励选项(base_rogue_node_reward 表)\n    repeated int32 doneRewardOptions = 9; //已领取的奖励选项\n    repeated int32 extraBuffIds = 10;     //临时生效的 buff\n    bool finished           = 11;    //该节点是否已处理完成(包括奖励选项)\n    int32 tokenAddPercent = 12;       //战斗节点的代币奖励加成万分比\n    int32 attribPointAddPercent = 13; //属性点奖励加成万分比\n    int32 eventStoryId          = 14; //事件类型节点的 story 进度\n    int32 supplyRewardCount     = 15; //补给节点奖励领取次数上限\n    int32 eventRandTreasure     = 16; //事件节点的剧情里概率获得的宝物\n    int32 keyStoryId            = 17; //事件节点当前关键剧情 id\n}\n\n//动态信息\nmessage RogueTrend {\n    int32 trendId       = 1;\n    bool finished       = 2;  //是否已完成\n    bool unlocked       = 3;  //是否已解锁\n    int64 unlockStamp   = 4;  //解锁时间\n    TaskInfo taskInfo   = 5;    //任务列表\n    int32 taskId        = 6;\n}\n\nenum ROGUE_STAT {\n    ROGUE_STAT_NONE     = 0;\n    LAYER_COUNT         = 1;    //通过层数\n    TOTAL_NODES         = 2;    //通过总节点数\n    TRIGGER_EVENT_COUNT = 3;    //触发事件数\n    NORMAL_BATTLE       = 4;    //常规战斗次数\n    ENCOUNTER_BATTLE    = 5;    //遭遇战次数\n    BOSS_BATTLE         = 6;    //boss战次数\n    NORMAL_BATTLE_LEFT_TIME    = 7;    //常规战斗关卡通关剩余时长\n    LEFT_HP_PERCENT     = 8;    //角色剩余血量万分比\n    TREASURE_COUNT      = 9;    //获取的宝物数\n    TOTAL_TOKEN         = 10;   //获得的累计代币数\n    TOTAL_ATTRIB_POINT  = 11;   //获得的累计属性点\n    RECRUIT_COUNT       = 12;   //招募成员数\n    ATTRIB_POINT_COST   = 13;   //属性点消耗数量\n    REVIVE_COUNT        = 14;   //复活次数\n    ENCOUNTER_BATTLE_LEFT_TIME = 15;    //常规战斗关卡通关剩余时长\n    BOSS_BATTLE_LEFT_TIME      = 16;    //boss战斗关卡通关剩余时长\n}\n\n//game.actor_rogue_chapter 肉鸽章节\nmessage RogueChapter {\n    int64 uin               = 1;\n    int32 themeId           = 2;    //主题 id\n    int32 layerIndex        = 3;    //当前层级\n    int32 chapterId         = 4;    //当前层的章节id\n    repeated int32 finishedNodeIds = 5; //当前层已处理完成的节点\n    RogueNode curNode       = 6; //当前节点信息\n    repeated int32 usedPoolIds = 7; //已使用的 poolId\n    //统计信息\n    map<int32, int32> stats = 8;    //enum ROGUE_STAT -> value\n    map<int32, int32> nextNode2StageIds = 9;    //后置战斗关卡节点的 stageId\n    map<int32, int32> nextNode2PoolId   = 10;   //后置战斗关卡使用的 poolId\n    int32 lastNodeEndingId = 11;    //第 5,6 层最后一个节点触发的 ending\n    bool triggerHideLayer  = 12;    //是否触发了隐藏层\n    int32 finishLayer      = 13;    //已完成的层\n}\n\n//肉鸽图鉴类型\nenum ROGUE_PIC_TYPE {\n    RPT_NONE    = 0;\n    TREASURE    = 1;    //宝物图鉴\n    EVENT       = 2;    //事件图鉴\n    ENDING      = 3;    //结局图鉴\n    HOLY        = 4;    //圣物图鉴\n}\n\n//game.actor_rogue_pic 肉鸽图鉴\nmessage RoguePicInfo {\n    int64 uin                   = 1;\n    int32 themeId               = 2;  //主题 id\n    int32 picType               = 3;  //图鉴列席    enum ROGUE_PIC_TYPE\n    map<int32, bool> picId2States = 4;  //picId -> state  true: 显示 new 标记\n}\n\nmessage RogueRecruitCard {\n    repeated CardInfo allCards = 1;\n    repeated RogueCardBadge cardBadges = 2;\n}\n\nmessage RogueRecruitPool {\n    int64 uin       = 1;\n    bytes poolRaw   = 2;    //RogueRecruitCard\n}\n\n//game.actor_rogue_card 角色信息\nmessage RogueCardInfo {\n    int64 uin           = 1;\n    int32 themeId       = 2;\n    int32 cardId        = 3;\n    CardInfo info       = 4;\n    map<int32, int32> attribLevels = 5;    //属性等级 attributeId -> level\n    repeated string rogueAttributes = 7;   //肉鸽系统: 角色属性强化加成 attrId:initValue:extraRatio\n}\n\nmessage RogueRecord {\n    int64 uin                   = 1;\n    int32 themeId               = 2;    //主题 id\n    int32 level                 = 3;    //主题等级\n    int32 difficultyLevel       = 4;    //难度等级\n    int32 layerIndex            = 5;    //到达层数\n    int32 chapterId             = 6;    //最后章节 id\n    int32 lastNodeId            = 7;    //最后到达的节点 id\n    int32 score                 = 8;    //综合评分\n    repeated RogueCardInfo cardInfos = 9;   //招募的角色\n    repeated int32 treasureIds  = 10;    //获得的宝物\n    repeated int32 holyIds      = 11;    //获得的圣物\n    int64 startTime             = 12;   //开局时间\n    int64 endTime               = 13;   //结束时间\n    map<int32, int32> stats     = 14;   //统计信息 enum ROGUE_STAT -> value\n    bool allPass                = 15;   //是否全部通关\n    int32 endingId              = 16;   //触发的结局\n    int32 totalTreasurePic      = 17;   //累计解锁的宝物图鉴数量\n}\n\n//game.actor_rogue_record 挑战记录\nmessage RogueTopScoreRecord {\n    int64 uin       = 1;\n    int32 themeId   = 2;    //主题 id\n    int32 score     = 3;\n    bytes recordRaw = 4;    //RogueRecord\n}\n\n//角色穿戴的徽章\nmessage RogueCardBadge {\n    int32 cardId = 1;\n    repeated BadgeInfo badges = 2;\n}\n\n//请求获取肉鸽信息\nmessage GetRogueInfoReq {\n}\n\nmessage GetRogueInfoRsp {\n    RogueTheme themeInfo           = 1; //主题信息\n    repeated RogueTrend trendInfos = 2; //任务动态\n    int32 themeUnlockLevel         = 3; //主题等级解锁进度\n    int32 initialRecruitCount      = 4; //开局招募角色数量\n    int32 initialTreasureCount     = 5; //开局选择宝物的数量\n    repeated CardInfo allCards     = 6; //可供招募的所有角色\n    repeated RogueCardBadge cardBadges = 7; //可供招募的所有角色的徽章信息\n}\n\n//请求开局\nmessage StartRogueGameReq {\n    int32 difficultyLevel   = 1;    //选择的难度等级\n}\n\nmessage StartRogueGameRsp {\n    RogueTheme themeInfo                = 1;    //主题信息\n    RogueChapter chapterInfo            = 2;    //章节信息\n    repeated ItemTuple rewards          = 4;    //开局奖励\n}\n\n//开局选择宝物\nmessage ChooseRogueInitialTreasureReq {\n    repeated int32 treasureIds = 1;\n}\n\nmessage ChooseRogueInitialTreasureRsp {\n    RogueTheme themeInfo        = 1;    //主题信息\n    repeated ItemTuple rewards  = 2;    //开局宝物触发的奖励\n}\n\n//开局招募角色\nmessage RecruitRogueInitialCardReq {\n    repeated int32 cardIds  = 1;    //开局招募的角色\n}\n\nmessage RecruitRogueInitialCardRsp {\n    RogueTheme themeInfo                = 1;    //主题信息\n    RogueChapter chapterInfo            = 2;    //章节信息\n    repeated RogueCardInfo cardInfos    = 3;    //角色信息\n}\n\n//请求获取肉鸽状态: 章节信息、招募的角色数据, 点击继续探索、或者完成一个节点后请求一下\nmessage GetRogueStateInfoReq {\n}\n\nmessage GetRogueStateInfoRsp {\n    RogueTheme themeInfo                = 1;    //主题信息\n    RogueChapter chapterInfo            = 2;    //章节信息\n    repeated RogueCardInfo cardInfos    = 3;    //角色信息\n}\n\n//请求进入节点\nmessage EnterRogueNodeReq {\n    int32 nodeId = 1;\n}\n\nmessage EnterRogueNodeRsp {\n    RogueChapter chapterInfo   = 1;    //章节信息\n    repeated ItemTuple rewards = 2;    //进入节点的奖励\n}\n\n//请求升级角色属性\nmessage EnhanceRogueCardAttribReq {\n    int32 cardId     = 1;\n    int32 attribId   = 2; //enum ATTR_ID\n}\n\nmessage EnhanceRogueCardAttribRsp {\n    RogueCardInfo cardInfo = 1;\n    RogueTheme themeInfo   = 2;\n}\n\n//请求激活天赋\nmessage ActivateRogueTalentReq {\n    int32 talendId = 1;\n}\n\nmessage ActivateRogueTalentRsp {\n    RogueTheme themeInfo = 1;   //更新主题数据\n}\n\n//请求购买商店节点的宝物\nmessage BuyRogueNodeShopTreasureReq {\n    int32 itemId = 1;\n}\n\nmessage BuyRogueNodeShopTreasureRsp {\n    RogueTheme themeInfo     = 1;\n    RogueChapter chapterInfo = 2;    //购买后更新数据\n    repeated ItemTuple rewards = 3;  //奖励: 用于展示\n    int32 gainTreasureId       = 4;         //获得的宝物\n    repeated int32 unlockHolyIds = 5;       //解锁的圣物\n}\n\n//请求刷新商店节点的物品\nmessage RefreshRogueNodeShopReq {\n}\n\nmessage RefreshRogueNodeShopRsp {\n    RogueChapter chapterInfo = 1;\n}\n\n//请求领取节点奖励\nmessage FetchRogueNodeRewardReq {\n    int32 rewardId = 1;\n    string param   = 2;     //招募奖励: 传招募的角色 cardId, 复活奖励: 传复活角色的 cardId 列表, cardId1|cardId2\n}\n\nmessage FetchRogueNodeRewardRsp {\n    RogueTheme themeInfo     = 1;\n    RogueChapter chapterInfo = 2;           //更新章节数据\n    repeated RogueCardInfo cardInfos = 3;   //更新角色\n    repeated ItemTuple rewards = 4;         //奖励: 用于展示\n    int32 gainTreasureId       = 5;         //获得的宝物\n    repeated int32 unlockHolyIds = 6;       //解锁的圣物\n    int32 rewardId               = 7;       //奖励选项 id\n}\n\n//请求离开节点\nmessage ExitRogueNodeReq {\n    int32 nodeId = 1;\n}\n\nmessage ExitRogueNodeRsp {\n    RogueChapter chapterInfo   = 1;    //章节信息\n    repeated ItemTuple rewards = 2;    //退出当前层最后节点后,进入下一层的奖励\n    RogueSettleInfo settleInfo = 3;    //结算信息\n    int32 extraGainTreasureId  = 4;    //退出节点时额外获得的宝物(宝物效果的额外奖励)\n}\n\n//结算信息\nmessage RogueSettleInfo {\n    RogueTheme themeInfo = 1;\n    RogueRecord record   = 2;\n    repeated ItemTuple rewards = 3;     //结算奖励: 天赋点\n    int32 gainThemeExp   = 4;           //获得的主题经验\n    int32 endingId       = 5;           //触发的结局\n}\n\n//请求放弃本局挑战\nmessage QuitRogueGameReq {\n}\n\nmessage QuitRogueGameRsp {\n    RogueSettleInfo settleInfo = 1;\n}\n\n//请求获取新图鉴状态\nmessage GetRoguePicNewStateReq {\n}\n\nmessage GetRoguePicNewStateRsp {\n    repeated int32 newTreasureIds = 1;  //显示 new 标记的宝物\n    repeated int32 newEventIds    = 2;  //显示 new 标记的事件\n    repeated int32 newEndingIds   = 3;  //显示 new 标记的结局\n    repeated int32 newHolyIds     = 4;  //显示 new 标记的圣物\n}\n\n//清除图鉴的 new 状态\nmessage ClearRoguePicNewStateReq {\n    int32 roguePicType = 1; //enum ROGUE_PIC_TYPE\n}\n\nmessage ClearRoguePicNewStateRsp {\n}\n\n//请求获取所有图鉴数据\nmessage GetRogueAllPicReq {\n    int32 roguePicType = 1; //enum ROGUE_PIC_TYPE\n}\n\nmessage GetRogueAllPicRsp {\n    RoguePicInfo picInfo = 1;\n}\n\n//请求获取任务\nmessage GetRogueTrendsReq {\n}\n\nmessage GetRogueTrendsRsp {\n    repeated RogueTrend trendInfos = 1;\n    int32 groupId = 2;\n}\n\n//战斗节点结果数据\nmessage RogueNodeBattleResult {\n    bool gameSettle             = 1;    //本局是否结算\n    RogueSettleInfo settleInfo  = 2;    //本局结算信息  如果 gameSettle = true, 该值有效\n    RogueChapter chapterInfo    = 3;    //章节信息\n    repeated RogueCardInfo cardInfos = 4;   //更新角色数据\n    repeated ItemTuple rewards  = 5;    //宝物效果触发的奖励\n}\n\n//请求领取主题等级奖励\nmessage FetchRogueThemeLevelRewardReq {\n    int32 rewardLevel = 1;\n}\n\nmessage FetchRogueThemeLevelRewardRsp {\n    RogueTheme themeInfo        = 1;\n    repeated ItemTuple rewards  = 2;  //奖励: 用于展示\n}\n\n//获取最高评分的记录\nmessage GetRogueTopScoreRecordReq {\n}\n\nmessage GetRogueTopScoreRecordRsp {\n    RogueRecord record   = 1;\n}\n\n//领取动态的任务奖励\nmessage FetchRogueTrendTaskRewardReq {\n    int32 trendId = 1;\n    int32 taskId  = 2;\n}\n\nmessage FetchRogueTrendTaskRewardRsp {\n    RogueTrend trendInfo        = 1;  //更新动态\n    repeated DropTuple rewards  = 2;  //奖励: 用于展示\n}\n\n//完成事件节点的剧情\nmessage FinishRogueEventStoryReq {\n    int32 eventId = 1;\n}\n\nmessage FinishRogueEventStoryRsp {\n}\n\n//完成事件节点的关键剧情点\nmessage FinishRogueEventKeyStoryReq {\n    int32 eventId = 1;\n    int32 storyId = 2;\n}\n\nmessage FinishRogueEventKeyStoryRsp {\n    RogueTheme themeInfo     = 1;\n    RogueChapter chapterInfo = 2;           //更新章节数据\n    repeated RogueCardInfo cardInfos = 3;   //更新角色\n    repeated ItemTuple rewards = 4;         //奖励: 用于展示\n    int32 gainTreasureId       = 5;         //获得的宝物\n    repeated int32 unlockHolyIds = 6;       //解锁的圣物\n}\n\n//事件节点选择某个战斗选项\nmessage ChooseRogueEventBattleStoryReq {\n    int32 eventId = 1;\n    int32 storyId = 2;\n    int32 preStoryId = 3;   //前一个 storyId\n}\n\nmessage ChooseRogueEventBattleStoryRsp {\n    RogueChapter chapterInfo = 1;           //更新章节数据\n}\n\n//肉鸽角色信息更新\nmessage RogueCardUpdateNotify {\n    repeated RogueCardInfo cardInfos = 1;\n}\n\n//扫荡 快速探索\nmessage SweepRogueReq {\n    int32 themeId = 1;\n}\n\nmessage SweepRogueRsp {\n    RogueTheme themeInfo    = 1;    //主题信息\n    int32 gainTalent        = 2;    //获得的天赋点\n    int32 gainExp           = 3;    //获得经验\n}\n\n\n\n//副本类型\nenum SCENE_TYPE {\n    SST_NONE            = 0;\n    MAIN_LINE           = 1;    //主线剧情副本\n    CLIMB_TOWER         = 2;    //爬塔\n    ARENA               = 5;    //竞技场\n    EXPEDITION          = 6;    //远征\n    BOSS_CHALLENGE      = 7;    //BOSS挑战\n    BUFF_STAGE          = 8;    //buff stage\n    ROGUE               = 9;    //肉鸽\n    LIMIT_CHALLENGE     = 10;   //限时挑战\n    DAILY_COIN          = 11;   //日常本-金币\n    DAILY_ROLE_EXP      = 12;   //日常本-角色经验\n    DAILY_SKILL_BOOK    = 13;   //日常本-技能书\n    DAILY_QUALITY_UP    = 14;   //日常本-突破\n    DAILY_MATERIAL      = 15;   //日常本-通用材料\n    DAILY_BADGE_EXP     = 16;   //日常本-徽章经验\n    ACTIVITY_NORAML     = 21;   //活动本普通\n    ACTIVITY_CREAM      = 22;   //活动本材料\n    ACTIVITY_BOSS       = 23;   //活动本boss\n    MANOR               = 31;   //探险地图\n    GUILD_WAR           = 32;   //公会战\n    BOSS_WATER          = 41;   //boss挑战-水\n    BOSS_FIRE           = 42;   //boss挑战-火\n    BOSS_WOOD           = 43;   //boss挑战-木\n    BOSS_LIGHT          = 44;   //boss挑战-光\n    BOSS_DARK           = 45;   //boss挑战-暗\n    GUILD_PRACTICE_NONE = 51;   //探险队演练-无属性\n    GUILD_PRACTICE_WATER= 52;   //探险队演练-水\n    GUILD_PRACTICE_FIRE = 53;   //探险队演练-火\n    GUILD_PRACTICE_WOOD = 54;   //探险队演练-木\n    GUILD_PRACTICE_LIGHT= 55;   //探险队演练-光\n    GUILD_PRACTICE_DARK = 56;   //探险队演练-暗\n    MANOR_WATER         = 61;   //深渊-水\n    MANOR_FIR           = 62;   //深渊-火\n    MANOR_WOOD          = 63;   //深渊-木\n    SEAL_HOOK           = 71;   //印章挂机\n    SEAL_QUALITY_UP     = 72;   //印章突破\n    FRIEND_FIGHT        = 81;   //好友切磋\n    PREPARE_STORE_COMMON        = 10000;    //战斗阵容通用存储类型\n}\n\n\n//关卡类型\nenum STAGE_TYPE {\n    ST_NONE             = 0;\n    DISPOSABLE          = 1;    //一次性\n    REPEAT              = 2;    //重复\n    PLOT                = 3;    //剧情\n    BOX                 = 4;    //宝箱\n    EXPEDITION_MONSTER  = 5;    //远征怪物\n    EXPEDITION_MIRROR   = 6;    //远征镜像\n}\n//章节开启条件类型\nenum CHAPTER_CONDITION_TYPE {\n    CCT_NONE    = 0;\n    ROLE_LEVEL  = 100;\n    PASS_STAGE  = 200;\n    SEAL_HOOK_LEVEL = 400;    //大刻印挂机玩法等级\n}\n\n//获取副本信息,当前开启到哪个章节\nmessage GetSceneInfoReq {\n    repeated int32 sceneTypes = 1;         //enum SCENE_TYPE\n}\n\n//副本信息\nmessage SceneInfo {\n    int32 sceneType                 = 1;   //enum SCENE_TYPE\n    int32 currentChapter            = 2;   //当前解锁到的章节 该章节之前的章节同样是解锁状态\n    bool unlocked                   = 3;   //是否已达到副本解锁条件\n    bool inOpenTime                 = 4;   //是否在副本开放期间\n    int32 totalPassed               = 5;   //总共通过的关卡数量\n    int32 currentStage              = 6;   //当前关卡   为 0 表示 currentChapter 当前章节全部通关, 但是可能由于没有后续章节,或者未达到下一个章节的解锁条件,就没有切换到下一个章节第一关\n    int32 rewardedChapter           = 7;   //已领取章节奖励的进度 该章节及之前的章节奖励已领取\n    bool currentStageOpen           = 8;   //当前关卡是否已开启\n    SceneChapter curChapterInfo     = 9;   //currentChapter 的章节信息\n    int64 sceneOpenStamp            = 10;  //副本开启时间戳\n    int64 sceneCloseStamp           = 11;  //副本关闭时间戳\n    repeated int32 rewardedStages   = 12;  //已手动领取奖励的关卡\n    int32 maxStageId                = 13;   //历史通过最大关卡, 目前副本类型 61-63 记录该值\n}\n\nmessage GetSceneInfoRsp {\n    repeated SceneInfo sceneInfos   = 1;\n}\n\n//获取当前章节已通关的关卡信息\nmessage GetChapterStageReq {\n    repeated int32 chapterIds = 1;\n}\n\n//副本的一个章节信息\nmessage SceneChapter {\n    int32 chapterId             = 1;\n    repeated StageInfo stages   = 2;\n    int32 stageOpenProgress     = 3;    //当前章节已解锁关卡进度\n}\n\nmessage GetChapterStageRsp {\n    repeated SceneChapter sceneChapters = 1;\n}\n\n//请求已开启的关卡\nmessage GetOpenStagesReq {\n    repeated int32 stageIds = 1;\n}\n\nmessage GetOpenStagesRsp {\n    repeated int32 openStageIds = 1;    //返回已开启的关卡id\n}\n\nenum SWEEP_TYPE {\n    SWEEP_TYPE_NONE     = 0;\n    BY_COUNT            = 1;    //按次数扫荡\n    BY_DEMAND           = 2;    //按需求扫荡\n}\n\n//获取战斗数据\nmessage GetChallengeRecordReq {\n    int32 stageId = 1;\n}\n\nmessage GetChallengeRecordRsp {\n    int32 stageId           = 1;\n    repeated int32 cardIds  = 2;    //阵容\n    bytes opRecord          = 3;    //操作记录\n}\n\n//领取副本章节奖励\nmessage FetchSceneChapterRewardReq {\n    int32 sceneType         = 1;    //副本类型\n    int32 chapterId         = 2;    //章节 id\n}\n\nmessage FetchSceneChapterRewardRsp {\n    int32 sceneType             = 1;    //副本类型\n    int32 rewardedChapter       = 2;    //已领取章节奖励的进度\n    repeated ItemTuple rewards  = 3;    //奖励\n}\n\n//手动领取关卡奖励\nmessage FetchSceneStageRewardReq {\n    int32 stageId   = 1;    //关卡 id\n    repeated int32 stageIdLst   = 2;\n}\n\nmessage FetchSceneStageRewardRsp {\n    int32 stageId                 = 1;    //关卡 id\n    repeated ItemTuple rewards    = 2;    //奖励\n    repeated int32 rewardedStages = 3;    //已领取奖励的关卡\n}\n\n//扫荡关卡\nmessage SweepStageReq {\n    int32 stageId   = 1;    //关卡 id\n}\n\nmessage SweepStageRsp {\n    int32 stageId   = 1;\n    repeated ItemTuple rewards  = 2;    //奖励\n    int32 level     = 3;   //团队等级\n    int32 exp       = 4;   //团队经验\n    repeated ItemTuple activityDrops = 5;   //活动掉落\n}\n\n//\nmessage BuffStageGetInfoReq {\n\n}\n\nmessage BuffStageGetInfoRsp {\n    int32 chapterId             = 1;\n    int64 endStamp              = 2;\n    repeated BuffStage stages   = 3;\n    int32 chapterTarget         = 4;\n    map<int32,int32>    buffList= 5;\n    repeated int32 openStages   = 6;\n    map<int32,int32>    highScore = 7;\n}\n\nmessage BuffStageRewardReq {\n    int32 rewardStage = 1;\n    int32 rewardId    = 2;\n}\n\nmessage BuffStageRewardRsp {\n    repeated DropTuple rewards  = 1;\n    BuffStage stage             = 2;\n    int32 chapterTarget         = 3;\n}\n\n\n//获取倍率掉落活动信息\nmessage GetMultiDropActivityReq {\n}\n\n//倍率掉落副本组类型\nenum MULTI_DROP_SCENE_GROUP {\n    MDSG_NONE   = 0;\n    MDSG_DAILY  = 1;    //日常本(物资补给): 11-16\n    MDSG_BOSS   = 2;    //徽章本(领主巢穴): 41-45\n}\n\nmessage MultiDropActivityInfo {\n    int32 activityId     = 1;   //当前生效的活动 id, 0:活动未生效\n    int32 sceneGroupType = 2;   //enum MULTI_DROP_SCENE_GROUP\n    int64 startStamp     = 3;   //活动开始时间\n    int64 endStamp       = 4;   //活动结束时间\n    int32 leftCnt        = 5;   //剩余次数\n    int32 showMulti      = 6;   //展示的倍率\n}\n\nmessage GetMultiDropActivityRsp {\n    repeated MultiDropActivityInfo infos = 1;\n}\n\nmessage SceneRankMember {\n    int64 uin       = 1;\n    int32 level     = 2;    //等级\n    int32 faceId    = 3;\n    ActorHead actorHead = 4;   //头像信息\n    string name         = 5;    //名字\n    string guildName    = 6;    //所在公会名字\n    int32 stageId       = 7;    //关卡进度\n    int32 rank          = 8;    //排名\n}\n\nmessage GetSceneRankReq {\n    int32 sceneType  = 1;    //MAIN_LINE CLIMB_TOWER\n    int32 startIndex = 2;    //用于分批请求 传当前已拉取到本地的数量 第一页传 0\n}\n\nmessage GetSceneRankRsp {\n    int32 sceneType  = 1;\n    int32 startIndex = 2;\n\n    int32 myRank     = 3;    //自己的排名    startIndex = 0 才有该值，超过 300 显示 rankRatio， 0: 未上榜\n    int32 rankRatio  = 4;    //自己排名比例   startIndex = 0 才有该值\n\n    repeated SceneRankMember members = 5;   //startIndex = 0 时候才有前三名\n    int32 totalRank  = 6;    //排行榜显示的总数量\n}\n\n\n\n\nmessage GetFeatureScheduleReq {\n}\n\nmessage GetFeatureScheduleRsp {\n    FeatureGuildWarInfo guildWar            = 1;    //强敌来袭 公会战\n    GetLimitChallengeInfoRsp limitChallenge = 2;    //灾兆断层 限时爬塔\n    BuffStageGetInfoRsp buffStage           = 3;    //旧日遗迹\n    GetCycleTaskInfoRsp rogueWeekTask       = 4;    //寻幽探秘 肉鸽周任务\n    GetManorInfoRsp manor                   = 5;    //地图物资\n    GetDispatchInfoRsp dispatch             = 6;    //深渊先遣队\n    FeatureManorSceneInfo manorScene        = 7;    //魔物猎场 深渊水火木\n    GetCommonTaskInfoRsp dailyTask          = 8;    //每日任务\n    ArenaGetAllRsp arena                    = 9;    //荣耀之地 竞技场\n    FeatureStageActivityInfo stageActInfo   = 10;   //角色活动\n    GetBossInfoRsp bossInfo                 = 11;   //幻象境地\n    GetSupplyInfoRsp supplyInfo             = 12;   //补给\n    SealBigHookInfo sealBigHookInfo         = 13;   //大刻印挂机\n\n}\n\n//公会战\nmessage FeatureGuildWarInfo {\n    GuildWarSchedule schedule = 1;    //公会战赛程状态\n    int32 fightCount          = 2;    //已挑战次数\n    int32 rank                = 3;    //自己公会排名\n    int32 rankRatio           = 4;    //自己公会排名比例\n}\n\nmessage FeatureManorSceneInfo {\n    repeated SceneInfo sceneInfos = 1;\n}\n\nmessage FeatureStageActivityInfo {\n    repeated ActivityStage stageAct = 1;\n}\n\n\n\n//印章孔位\nenum SEAL_POS {\n    SP_NONE = 0;\n    SP_ATK  = 1;    //攻击孔位\n    SP_DEF  = 2;    //防御孔位\n    SP_HP   = 3;    //生命孔位\n}\n\n\n//印章佩戴信息    game.actor_seal_wear\nmessage SealWearInfo {\n    int64 uin = 1;\n    int32 job = 2;  //职业类型\n    repeated int32 sealIds = 3; //已佩戴的印章 Id\n    int32 bigSealLevel     = 4; //大印章等级\n    int32 bigSealQuality   = 5; //大印章突破等级\n    int32 bigSealAddUpLevel= 6; //大印章增幅等级\n}\n\n//刻印挂机\nmessage SealBigHookInfo {\n    int64 uin       = 1;\n    int32 hookLevel = 2;    //挂机等级\n    int32 hookExp   = 3;    //挂机经验\n    int64 produceStartTime = 4;  //开始产出时间\n    int32 fastCollectCnt   = 5;  //快速采集剩余次数\n    repeated ItemTuple hookRewards = 6; //挂机产出的奖励\n    int64 resetStamp     = 7;   //重置时间\n\n    int32 passedStage    = 8;   //已通过关卡\n    int32 currentChapter = 9;  //当前章节\n    int32 currentStage   = 10;  //为 0 表示当前章节已全部通关\n    int32 round          = 11;  //当前正在挑战关卡轮次 (1: 表示已挑战过一轮)\n    repeated int32 usedCards = 12;  //已使用的角色\n    int64 hookLevelupTime = 13; //挂机升级时间\n    int64 lastProduceTime = 14; //上次产出时间\n}\n\n//获取所有印章穿戴信息\nmessage GetSealWearInfoReq {\n}\n\nmessage GetSealWearInfoRsp {\n    repeated SealWearInfo wearInfos = 1;\n}\n\n//穿戴印章\nmessage WearSealReq {\n    int32 job = 1;  //职业类型\n    repeated int32 sealIds = 2;\n}\n\nmessage WearSealRsp {\n    SealWearInfo wearInfo = 1;\n}\n\n//取下印章\nmessage TakeoffSealReq {\n    int32 job    = 1;  //职业类型\n    int32 sealId = 2;  //0: 全部取下\n}\n\nmessage TakeoffSealRsp {\n    SealWearInfo wearInfo = 1;\n}\n\n//合成徽章\nmessage CompositeSealReq {\n    int32 sealId  = 1;\n    int32 count   = 2;\n    bool useLucky = 3;  //是否使用幸运符\n}\n\nmessage CompositeSealRsp {\n    repeated ItemTuple gainItems = 1;\n}\n\n//大印章升级\nmessage SealBigLevelupReq {\n    int32 job     = 1;  //职业类型\n    int32 toLevel = 2;  //升级到该等级\n}\n\nmessage SealBigLevelupRsp {\n    SealWearInfo info = 1;\n}\n\n//大印章突破\nmessage SealBigQualityUpReq {\n    int32 job = 1;  //职业类型\n}\n\nmessage SealBigQualityUpRsp {\n    SealWearInfo info = 1;\n}\n\n//大印章增幅升级\nmessage SealBigAddUpReq {\n    int32 job = 1;  //职业类型\n}\n\nmessage SealBigAddUpRsp {\n    SealWearInfo info = 1;\n}\n\n//获取大印章挂机信息\nmessage GetSealBigHookInfoReq {\n\n}\n\nmessage GetSealBigHookInfoRsp {\n    SealBigHookInfo info = 1;\n}\n\n//采集挂机奖励\nmessage FetchSealBigHookRewardReq {\n    bool fastCollect   = 1;   //是否快速采集\n    int32 consumeType = 2;    //快速采集消耗品类型 1: 代币   2: 欧泊\n}\n\nmessage FetchSealBigHookRewardRsp {\n    SealBigHookInfo info       = 1;\n    repeated ItemTuple rewards = 2;\n}\n\n//放弃印章挂机本轮挑战\nmessage QuitSealBigHookChallengeReq {\n}\n\nmessage QuitSealBigHookChallengeRsp {\n    SealBigHookInfo info = 1;\n}\n\n\n\nenum SHOP_TYPE {\n    SHOP_TYPE_NONE = 0;\n    ST_BLUE = 1;    //蓝票商店\n    ST_RED  = 2;    //红票商店\n    ST_MANOR_PERIOD = 3;    //大地图周期商店\n    ST_MANOR_NORMAL = 4;    //大地图常规商店\n    ST_MANOR_SEAL   = 5;    //大地图刻印商店\n}\nmessage ShopGridInfo {\n    int32 gridId            = 1;    //格子ID\n    int32 goodsId           = 2;    //商品ID(通过配置表对应商品内容，购买消耗等)\n    int32 boughtNum         = 3;    //商品购买次数\n    int64 nextRefreshTime   = 4;    //下次刷新时间\n    bool unlocked           = 5;    //是否已解锁\n    int64 startTime         = 6;    //格子开始时间\n    int64 endTime           = 7;    //格子结束时间\n    int64 unlockTime        = 8;    //解锁时间戳\n}\nmessage ShopShowInfo {\n    int64 uin                       = 1;\n    int32 typeId                    = 2;    //类型ID\n    int32 refreshNum                = 3;    //刷新次数\n    int64 nextRefreshTime           = 4;    //下次刷新时间\n    bool isOpen                     = 5;    //是否开启\n    repeated ShopGridInfo  goods    = 6;    //商店商品\n    int32 manorFreeCount            = 7;    //深渊商店领取次数\n}\nmessage FashionAddNotify {\n    repeated int32 fashions = 2;\n}\n//请求商店信息\nmessage GetShopInfoReq {\n    repeated int32 types        = 1;\n}\nmessage GetShopInfoRsp {\n    repeated ShopShowInfo shopList  = 1;\n}\n\n//购买商品\nmessage BuyShopGoodsReq {\n    int32 gridId    = 1;\n    int32   num     = 2;\n}\n\nmessage BuyShopGoodsRsp {\n    repeated ItemTuple goods    = 1;    //购买的商品\n    ShopShowInfo shop           = 2;\n}\n\n//刷新商品\nmessage RefreshShopGoodsReq {\n    int32 shopType    = 1;\n}\n\nmessage RefreshShopGoodsRsp {\n    ShopShowInfo shop   = 1;\n}\n//获取礼包信息\nmessage GetGiftInfoReq {\n    \n}\n\nmessage GetGiftInfoRsp {\n    repeated GiftItem gifts       = 1;    //已经购买的礼包\n    repeated int32 canRewards     = 2;      //能够领奖的阶段\n}\n//购买礼包\nmessage BuyGiftReq {\n    int32 giftId = 1;\n}\n\nmessage BuyGiftRsp {\n    repeated GiftItem gifts       = 1;    //已经购买的礼包\n    repeated DropTuple goods      = 2;    //购买获得的物品\n    repeated ItemTuple rewards    = 3;      //配置的奖励\n    repeated int32 canRewards     = 4;      //能够领奖的阶段\n}\n//领取礼包\nmessage GetGiftRewardReq {\n    int32 gitfId    = 1;\n    int32 stepId    = 2;\n}\n\nmessage GetGiftRewardRsp {\n    repeated DropTuple goods        = 1;        //领取的物品\n    repeated GiftItem gifts         = 2;        //已经购买的礼包\n    repeated int32 canRewards       = 3;      //能够领奖的阶段\n}\nmessage BuyInfo {\n    int32 gridId    = 1;\n    int32   num     = 2;\n}\n//购买刻印\nmessage BuySealShopGoodsReq {\n    repeated BuyInfo bought = 1;\n}\n\nmessage BuySealShopGoodsRsp {\n    repeated ItemTuple goods    = 1;    //购买的商品\n    ShopShowInfo shop           = 2;\n}\n\n\n\nmessage SysAddItemReq {\n    int64 uin   = 1;\n    int32 logId = 2;\n    repeated ItemTuple items = 3;\n}\n\nmessage SysAddItemRsp {\n\n}\n\nmessage GetResVersionReq {\n\n}\n\nmessage GetResVersionRsp {\n    int64 iosMaxResId               = 1;    //ios资源库中最大resId\n    int64 iosMaxVisibleResId        = 2;    //ios对外可见最大resId\n    int64 androidMaxResId           = 3;    //android资源库中最大resId\n    int64 androidMaxVisibleResId    = 4;    //android对外可见最大resId\n}\n\nmessage ResMeta {\n    int64 resId = 1;\n    string path = 2;\n    string md5  = 3;\n    int32 size  = 4;\n}\n\nmessage ResUpdateList {\n    string newestCliVersion     = 1;    //当前客户端最新版本号\n    string minCliVersion        = 2;    //客户端最低版本号\n    string downloadUrl          = 3;    //ios客户端下载地址\n    repeated ResMeta updateList = 4;    //资源列表\n}\n\nmessage SysActorInfoUpdatedReq {\n    ActorInfo actorInfo = 1;\n}\n\nmessage SysActorInfoUpdatedRsp {\n}\n\n//充值订单发货\nmessage SysRechargeOrderDeliveryReq {\n    string order = 1;\n}\n\nmessage SysPayOrderDeliveryRsp {\n}\n\n//充值订单退款\nmessage SysRechargeOrderRefundReq {\n    string orderId = 1;\n}\n\nmessage SysRechargeOrderRefundRsp {\n}\n\n//增加公会经验\nmessage IncrGuildExpReq {\n    int32 exp = 1;\n}\n\n//将玩家从 gamesvr 踢下线(从内存移除)\nmessage KickOffUserFromGameReq {\n    int64 uin = 1;\n}\n\nmessage KickOffUserFromGameRsp {\n}\n\n//更新公会成员名字\nmessage SysUpdateGuildMemberNameReq {\n    int64 uin   = 1;\n    string name = 2;\n}\n\n//获取公会战进度\nmessage SysGetGuildWarProgressReq {\n}\n\nmessage SysGetGuildWarProgressRsp {\n    GuildWarProgress progress = 1;\n}\n\n//公会战战斗结算\nmessage SysGuildWarBattleSettleReq {\n    int32 stageId        = 1;\n    bool win             = 2;  //是否胜利\n    int32 battleTotalTime= 3;  //战斗完整时间\n    int32 battleLeftTime = 4;  //战斗剩余时间\n    int64 damageHp       = 5;  //伤害值\n    repeated BattleUnitInit bossInitialUnits  = 6;  //进战斗时 boss 初始状态\n    repeated ObjectState bossStates           = 7;  //战斗结束后 boss 最终状态\n    repeated int64 assistCardUidLst           = 8;  //使用的助战角色 cardUid\n    int32 round          = 9;   //当前轮次\n}\n\nmessage SysGuildWarBattleSettleRsp {\n    bool bossDeadBefore = 1;    //结算之前 boss 是否已阵亡\n    int64 finalDamageHp = 2;    //最终结算伤害\n    int32 score         = 3;    //获得积分\n    int32 compensateTime= 4;    //补偿时间 0:不补偿\n    bool bossDead       = 5;    //本次结算后 boss 是否阵亡\n    int64 totalScore    = 6;    //个人当前积分\n    int64 guildScore    = 7;    //公会积分\n    int64 BossLeftHp    = 8;    //boss当前剩余总血量\n}\n\n//给公会添加头像 id\nmessage SysAddGuildHeadReq {\n    repeated int32 headIds = 1;\n}\n\nmessage SysAddGuildHeadRsp {\n}\n\n//检查是否拥有 emoji\nmessage SysCheckOwnEmojiReq {\n    int32 emojiId = 1;\n}\n\nmessage SysCheckOwnEmojiRsp {\n    bool own = 1;\n}\n\n\n\n\n//任务事件类型\nenum TASK_EVENT {\n    TASK_EVENT_NONE         = 0;\n}\n\n//任务数据记录方式\nenum TASK_RECORD {\n    TASK_RECORD_NONE        = 0;\n    TR_SET_GE               = 1;    //设置值 >=\n    TR_SET_LE               = 2;    //设置值 <=\n    TR_ADD                  = 3;    //累加值\n}\n\nmessage CommonTask {\n    int32 index     = 1;\n    TaskInfo task   = 2;\n}\n//获取常规任务信息\nmessage GetCommonTaskInfoReq {\n    int64 refreshStamp  = 1;\n}\nmessage GetCommonTaskInfoRsp {\n    repeated CommonTask taskList    = 1;    //任务列表 \n    repeated int32 dailyRewards     = 2;    //天目标已领奖阶段    \n    repeated int32 totalRewards     = 3;    //总目标已领奖阶段\n    int64 refreshStamp              = 4;\n}\n//领取常规任务奖励\nmessage CommonTaskRewardReq {\n    int32 rewardType    = 1;        //0：任务奖励 3：天目标 2：总目标 \n    int32 rewardId      = 2;\n}\n\nmessage CommonTaskRewardRsp {\n    repeated DropTuple goods        = 1;    //领取的奖励\n    repeated int32 dailyRewards     = 2;    //天目标已领奖阶段\n    repeated int32 totalRewards     = 3;    //总目标已领奖阶段\n    repeated CommonTask taskList    = 4;    //任务列表 \n    int64 refreshStamp              = 5;    \n}\n\n//替换常规任务\nmessage CommonTaskReplaceReq {\n    int32 index         = 1;\n    int64 refreshStamp  = 2;\n}\nmessage CommonTaskReplaceRsp {\n    repeated CommonTask taskList    = 1;    //任务列表  \n    int64 refreshStamp              = 2;\n}\n\n//获取任务更新时间\nmessage GetTaskRefreshStampReq {\n    \n}\n\nmessage GetTaskRefreshStampRsp {\n    map<int32,int64>    refreshStamp  = 1; \n}\n//获取周期任务\nmessage GetCycleTaskInfoReq {\n}\nmessage GetCycleTaskInfoRsp {\n    repeated TaskInfo taskList      = 1;    //任务列表 \n    repeated int32 weeklyRewards    = 2;    //周目标已领奖阶段   \n    int64 refreshStamp              = 3;    //刷新时间点\n}\n\n//周期任务领奖\nmessage CycleTaskRewardReq {\n    int32 rewardType    = 1;    //0:领取任务 4:领取阶段奖励\n    int32 rewardId      = 2;    //0:任务ID 4：阶段Id\n}\n\nmessage CycleTaskRewardRsp {\n    repeated DropTuple goods        = 1;    //领取的奖励\n    repeated int32 weeklyRewards    = 2;    //已领奖阶段   \n}\n\n\n\n\n//gm 操作模块\nenum GM_OP_MODULE {\n    GOM_NONE            = 0;\n    GOM_IMAGE           = 1;    //图片操作\n    GOM_NOTICE          = 2;    //公告操作\n    GOM_MAIL            = 3;    //邮件操作\n    GOM_RECOMMEND_IMG   = 4;    //推荐图操作\n    GOM_GIFT_PACKAGE    = 5;    //礼包操作\n    GOM_FASHION         = 6;    //时装操作\n    GOM_ACTIVITY        = 7;    //活动操作\n    GOM_PLAYER          = 8;    //玩家操作\n    GOM_WHITE_LIST      = 9;    //白名单操作\n    GOM_CLI_RES_RELEASE = 10;   //客户端资源发布\n    GOM_SVR_STATE       = 11;   //服务器状态操作\n    GOM_CREATE_USER_LIMIT = 12; //创建上限操作\n    GOM_GUILD           = 13;   //探险队操作\n    GOM_EXCHANGE_CODE   = 14;   //兑换码\n    GOM_SHOP_LABEL      = 15;   //商店页签\n    GOM_SYNC_CONFIG     = 16;   //同步配置\n}\n\nenum ACTIVITY_OP {\n    AO_NONE        = 0;\n    AO_MODIFY      = 1;    //修改\n    AO_OFF_SHELF   = 2;    //下架\n    AO_REMOVE      = 3;    //移除\n    AO_DELETE      = 4;    //删除\n}\n\nenum NOTICE_TYPE {\n    NT_NONE         = 0;\n    NT_SYS          = 1;    //系统公告\n    NT_ACTIVITY     = 2;    //活动公告\n    NT_LOGIN        = 3;    //登录公告\n}\n\n//推荐图商品类型\nenum RECOMMEND_IMG_PRODUCT_TYPE {\n    RIP_NONE        = 0;\n    RIP_PAY_PRODUCT = 1;    //base_pay_product\n    PIP_FASHION     = 2;    //base_fashion\n    RIP_GIFT        = 3;    //base_gift\n}\n\n//推荐图跳转类型\nenum RECOMMEND_IMG_JUMP_TYPE {\n    RJT_NONE        = 0;    //无跳转\n    RJT_SHOP        = 1;    //跳转商店\n    RJT_SHOP_BUY    = 2;    //商店购买面板\n    RJT_BUY         = 3;    //直接购买\n}\n\n//获取所有的推荐图信息\nmessage GetAllRecommendImgReq {\n    bool onlyOnShelf = 1;   //只需要拉取已上架的\n    string channel   = 2;\n}\n\nmessage GetAllRecommendImgRsp {\n    repeated OpRecommendImg infos = 1;\n}\n\n//创建推荐图\nmessage CreateRecommendImgReq {\n    OpRecommendImg info = 1;\n}\n\nmessage CreateRecommendImgRsp {\n}\n\n//操作推荐图\nmessage OperateRecommendImgReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpRecommendImg info = 3;    //只有修改才需要传这个\n}\n\nmessage OperateRecommendImgRsp {\n}\n\n//审核推荐图\nmessage VerifyRecommendImgReq {\n    int64 uid           = 1;    //推荐图的 id\n    int32 verifyState   = 2;    //1: 通过     2: 拒绝\n}\n\nmessage VerifyRecommendImgRsp {\n}\n\n\n//获取所有礼包\nmessage GetAllGiftPackageReq {\n    bool onlyOnShelf = 1;   //只需要拉取已上架的\n}\n\nmessage GetAllGiftPackageRsp {\n    repeated OpGiftPackage infos = 1;\n}\n\n//创建礼包\nmessage CreateGiftPackageReq {\n    OpGiftPackage info = 1;\n}\n\nmessage CreateGiftPackageRsp {\n}\n\n//操作礼包\nmessage OperateGiftPackageReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpGiftPackage info  = 3;    //只有修改才需要传这个\n}\n\nmessage OperateGiftPackageRsp {\n}\n\n//审核礼包\nmessage VerifyGiftPackageReq {\n    int64 uid           = 1;    //推荐图的 id\n    int32 verifyState   = 2;    //1: 通过     2: 拒绝\n}\n\nmessage VerifyGiftPackageRsp {\n}\n\n///////////////////////////////////////////////////////////////\n//获取所有时装\nmessage GetAllOpFashionsReq {\n    bool onlyOnShelf = 1;   //只需要拉取已上架的\n}\n\nmessage GetAllOpFashionsRsp {\n    repeated OpFashion infos = 1;\n}\n\n//创建时装\nmessage CreateFashionReq {\n    OpFashion info = 1;\n}\n\nmessage CreateFashionRsp {\n}\n\n//操作时装\nmessage OperateFashionReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpFashion info      = 3;    //只有修改才需要传这个\n}\n\nmessage OperateFashionRsp {\n}\n\n//审核时装\nmessage VerifyFashionReq {\n    int64 uid           = 1;\n    int32 verifyState   = 2;    //1: 通过     2: 拒绝\n}\n\nmessage VerifyFashionRsp {\n}\n\n///////////////////////////////////////////////////////////////\n//获取所有活动\nmessage GetAllOpActivityReq {\n    bool onlyOnShelf = 1;   //只需要拉取已上架的\n    int32 activityType = 2; //活动类型\n}\n\nmessage GetAllOpActivityRsp {\n    repeated OpActivity infos = 1;\n}\n\n//创建活动\nmessage CreateActivityReq {\n    OpActivity info = 1;\n}\n\nmessage CreateActivityRsp {\n}\n\n//操作活动\nmessage OperateActivityReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpActivity info     = 3;    //只有修改才需要传这个\n}\n\nmessage OperateActivityRsp {\n}\n\n//审核活动\nmessage VerifyActivityReq {\n    int64 uid           = 1;\n    int32 verifyState   = 2;    //1: 通过     2: 拒绝\n}\n\nmessage VerifyActivityRsp {\n}\n\n///////////////////////////////////////////////////////////////\n//获取所有公告\nmessage GetAllNoticesReq {\n    bool onlyOnShelf = 1;   //只需要拉取已上架的\n    string channel   = 2;\n}\n\nmessage GetAllNoticesRsp {\n    repeated OpNotice normals   = 1;\n    repeated OpNotice drafts    = 2;    //草稿箱\n}\n\n//获取某个公告的信息\nmessage GetNoticeInfoReq {\n    int64 uid           = 1;\n    string noticeSource = 2;    //normal    draft\n}\n\nmessage GetNoticeInfoRsp {\n    OpNotice info       = 1;\n}\n\n//创建公告\nmessage CreateNoticeReq {\n    OpNotice info       = 1;\n    string noticeSource = 2;    //normal    draft\n}\n\nmessage CreateNoticeRsp {\n}\n\n//公告保存草稿箱\nmessage SaveNoticeDraftReq {\n    OpNotice info       = 1;\n}\n\nmessage SaveNoticeDraftRsp {\n}\n\n//操作活动\nmessage OperateNoticeReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpNotice info       = 3;    //只有修改才需要传这个\n    string noticeSource = 4;    //normal    draft\n}\n\nmessage OperateNoticeRsp {\n}\n\n//审核活动\nmessage VerifyNoticeReq {\n    int64 uid           = 1;\n    int32 verifyState   = 2;    //1: 通过     2: 拒绝\n}\n\nmessage VerifyNoticeRsp {\n}\n///////////////////////////////////////////////////////////////\n//获取所有邮件\nmessage GetAllSystemMailReq {\n}\n\nmessage GetAllSystemMailRsp {\n    repeated OpSystemMail normals   = 1;\n    repeated OpSystemMail drafts    = 2;    //草稿箱\n}\n\n//创建公告\nmessage CreateSystemMailReq {\n    OpSystemMail info       = 1;\n}\n\nmessage CreateSystemMailRsp {\n}\n\n//操作活动\nmessage OperateSystemMailReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpSystemMail info       = 3;    //只有修改才需要传这个\n}\n\nmessage OperateSystemMailRsp {\n}\n\n//审核活动\nmessage VerifySystemMailReq {\n    int64 uid           = 1;\n    int32 verifyState   = 2;    //1: 通过     2: 拒绝\n}\n\nmessage VerifySystemMailRsp {\n}\n///////////////////////////////////////////////////////////////\n\n//兑换码玩家范围\nenum EXCHANGE_CODE_USER_SCORE {\n    ECUS_NONE           = 0;\n    ECUS_ALL            = 1;    //所有玩家\n    ECUS_TARGET_UIN     = 2;    //指定玩家\n    ECUS_LEVEL_RANGE    = 3;    //等级区间\n}\n\n//兑换码生成类型\nenum EXCHANGE_CODE_GEN {\n    ECG_NONE            = 0;\n    ECG_SPECIFY         = 1;    //指定兑换码\n    ECS_BATCH_GEN       = 2;    //批量生成\n    ECS_IMPORT          = 3;    //导入兑换码\n}\n\n//获取所有兑换码\nmessage GetAllExchangeCodeReq {\n}\n\nmessage GetAllExchangeCodeRsp {\n    repeated OpExchangeCode normals   = 1;\n}\n\n//创建公告\nmessage CreateExchangeCodeReq {\n    OpExchangeCode info       = 1;\n}\n\nmessage CreateExchangeCodeRsp {\n}\n\n//操作活动\nmessage OperateExchangeCodeReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpExchangeCode info       = 3;    //只有修改才需要传这个\n}\n\nmessage OperateExchangeCodeRsp {\n}\n\n//审核活动\nmessage VerifyExchangeCodeReq {\n    int64 uid           = 1;\n    int32 verifyState   = 2;    //1: 通过     2: 拒绝\n}\n\nmessage VerifyExchangeCodeRsp {\n}\n\n//批量获取兑换码\nmessage GetBatchExchangeCodeReq {\n    int64 uid           = 1;\n    int32 startIndex    = 2;\n    int32 endIndex      = 3;\n}\n\nmessage GetBatchExchangeCodeRsp {\n    repeated ExchangeCode codes = 1;\n}\n///////////////////////////////////////////////////////////////\n\n\nmessage ModifyOpItemRemarkReq {\n    string opItemType   = 1;\n    int64 uid           = 2;\n    string remark       = 3;\n}\n\nmessage UploadPicRsp {\n    string picUrl       = 1;\n}\n\nmessage GetUploadPicRecordRsp {\n    repeated UploadPicRecord infos = 1;\n}\n\nmessage SaveUploadPicRecordReq {\n    repeated UploadPicRecord infos = 1;\n}\n\nmessage OpUserInfo {\n    int64 uin           = 1;\n    string name         = 2;\n    string channel      = 3;    //渠道\n    int32 platform      = 4;    //平台\n    int32 level         = 5;\n    int32 diamond       = 6;    //钻石\n    int32 bindDiamond   = 7;    //绑定钻石\n    int32 gold          = 8;    //金币\n    int64 createStamp   = 9;    //注册时间\n    int32 privilegeTag  = 10;   //权限标识\n    bool isOnline       = 11;   //是否在线\n    bool blocked        = 12;   //是否封号\n    int64 offlineStamp  = 13;   //离线时间\n    string accountId    = 14;   //账号 id\n    bool debug          = 15;   //客户端是否开启 debug 日志\n    bool mute           = 16;   //是否禁言中\n    string guildInfo    = 17;   //所属探险队 guildUid|guildName\n}\n\nenum USER_INFO_TYPE {\n    UIT_NONE    = 0;\n    UIT_UIN     = 1;    //角色 uin\n    UIT_ACCOUNT = 2;    //账号\n    UIT_NAME    = 3;    //昵称\n}\n\n//封停状态\nenum BLOCK_STATE {\n    BS_NONE     = 0;\n    BS_NORMAL   = 1;\n    BS_BLOCKED  = 2;\n}\n\n//查询玩家信息\nmessage GetUserInfosReq {\n    string channel      = 1;\n    int32 platform      = 2;\n    int32 userInfoType  = 3;\n    int32 blockState    = 4;    //enum BLOCK_STATE\n    string queryValue   = 5;\n}\n\nmessage GetUserInfosRsp {\n    repeated OpUserInfo userInfos = 1;\n}\n\n//操作玩家\nmessage OperateUserReq {\n    int64 uin       = 1;\n    string opType   = 2;    //操作类型\n    string param    = 3;    //操作参数\n}\n\n//公会信息\nmessage OpGuildInfo {\n    string guildUid = 1;\n    GuildInfo info  = 2;\n    repeated GuildMember members = 3;\n    bool blockChat  = 4;    //是否封禁聊天和公告\n}\n\n//操作公会\nmessage OperateGuildReq {\n    string guildUid = 1;\n    string opType   = 2;    //操作类型\n    string param    = 3;    //操作参数\n}\n\n//获取玩家详细信息\nmessage GetUserDetailReq {\n    int64 uin = 1;\n}\n\nmessage GetUserDetailRsp {\n    OpUserInfo info             = 1;\n    repeated ItemInfo itemLst   = 2;    //物品列表\n    repeated CardInfo cardLst   = 3;    //卡牌列表\n    repeated BadgeInfo badgeLst = 4;    //徽章列表\n    repeated ActorMail mailLst  = 5;    //邮件列表\n    map<int32, int64> fashions  = 6;    //已获得的皮肤\n    repeated KvPair sceneProgress = 7; //副本关卡进度\n}\n\n//获取白名单列表\nmessage GetWhitelistReq {\n}\n\nmessage GetWhitelistRsp {\n    repeated WhitelistInfo infos  = 1;\n}\n\n//添加白名单\nmessage AddWhitelistReq {\n    WhitelistInfo info = 1;\n}\n\nmessage ModifyWhitelistRemarkReq {\n    string whiteTag = 1;\n    string remark   = 2;\n}\n\n//删除白名单\nmessage DeleteWhitelistReq {\n    string whiteTag = 1;\n}\n\n//设置服务器维护状态\nmessage SetServerStateReq {\n    string svrState  = 1;\n    string maintainNotice = 2;  //维护提示\n}\n\n//设置创建角色数量限制\nmessage SetUserCreateLimitReq {\n    int32 limitCount = 1;\n}\n\n//启动游戏上报\nmessage LaunchGameReq {\n    int32 platform  = 1;    //enum PLATFORM_TYPE\n    string deviceId = 2;    //设备 id\n}\n\nmessage LaunchGameRsp {\n}\n\n//查询充值记录\nmessage GetUserRechargeRecordReq {\n    int64 uin      = 1;\n    int64 fromTime = 2;    //查询时间范围\n    int64 toTime   = 3;\n}\n\nmessage OpOrderInfo {\n    CommonRechargeOrder orderInfo = 1;\n    int32 state = 2;    //sproto.PAY_ORDER_STATE\n    int32 gainDiamond = 3;\n}\n\nmessage GetUserRechargeRecordRsp {\n    repeated OpOrderInfo infos = 1;\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n//商店标签 gm.op_shop_label gm.op_shop_label_verify\nmessage OpShopLabel {\n    int64 uid                   = 1;\n    int64 startStamp            = 2;    //开始时间\n    int64 endStamp              = 3;    //结束时间\n    int32 sortValue             = 4;    //排序值\n    int32 timeState             = 5;    //时间状态  enum TIME_STATE\n    int32 verifyState           = 6;    //审核状态  enum VERIFY_STATE\n    int32 hardState             = 7;    //enum HARD_STATE\n    string remark               = 8;    //备注\n    string labelName            = 9;    //页签名字\n}\n\n//获取所有礼包\nmessage GetAllShopLabelReq {\n    bool onlyOnShelf = 1;   //只需要拉取已上架的\n}\n\nmessage GetAllShopLabelRsp {\n    repeated OpShopLabel infos = 1;\n}\n\n//创建礼包\nmessage CreateShopLabelReq {\n    OpShopLabel info = 1;\n}\n\nmessage CreateShopLabelRsp {\n}\n\n//操作礼包\nmessage OperateShopLabelReq {\n    int64 uid           = 1;\n    int32 operation     = 2;    //enum ACTIVITY_OP\n    OpShopLabel info    = 3;    //只有修改才需要传这个\n}\n\nmessage OperateShopLabelRsp {\n}\n\n//通用审核接口\nmessage CommonVerifyOpItemReq {\n    string opItemType   = 1;\n    int64 uid           = 2;\n    int32 verifyState   = 3;    //1: 通过     2: 拒绝\n}\n\nmessage CommonVerifyOpItemRsp {\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n",
  EventMsgNameByID = {
    [1] = "CardUpdateNotify",
    [2] = "NewMessageNotify",
    [3] = "SyncItemsRsp",
    [4] = "RelationChangedNotify",
    [5] = "NewMailNotify",
    [6] = "KickOffNotify",
    [7] = "MutedBySystemNotify",
    [8] = "ActorInfoUpdateNotify",
    [9] = "NewBadgeNotify",
    [10] = "RelationDelApplicantNotify",
    [12] = "ManorEventUpdateNotify",
    [13] = "GuildEventNotify",
    [14] = "ManorConveyNotify",
    [15] = "ManorInfoUpdateNotify",
    [16] = "BattlePassBuySuccessNotify",
    [17] = "BossChallengeHighScoreNotify",
    [18] = "RogueCardUpdateNotify",
    [19] = "FashionAddNotify"
  },
  MsgIdByName = {
    DbQueryUniqueDataReq = 101,
    DbQueryUniqueDataRsp = 100101,
    DbQueryBatchDataReq = 102,
    DbQueryBatchDataRsp = 100102,
    DbDeleteDataReq = 103,
    DbDeleteDataRsp = 100103,
    DbInsertDataReq = 104,
    DbInsertDataRsp = 100104,
    DbUpdateDataReq = 105,
    DbUpdateDataRsp = 100105,
    DbUpdateBatchDataReq = 106,
    DbUpdateBatchDataRsp = 100106,
    DbCreateIndexReq = 107,
    DbCreateIndexRsp = 100107,
    AllocGameReq = 108,
    AllocGameRsp = 100108,
    DbQueryCountReq = 109,
    DbQueryCountReq = 100109,
    DbTransactionOpReq = 110,
    DbTransactionOpRsp = 100110,
    DbUpsertDataReq = 111,
    DbUpsertDataRsp = 100111,
    DbTableDropReq = 112,
    DbTableDropRsp = 100112,
    DbQueryOneAndUpdateReq = 113,
    DbQueryOneAndUpdateRsp = 100113,
    GetResVersionReq = 202,
    GetResVersionRsp = 100202,
    SysActorInfoUpdatedReq = 204,
    SysActorInfoUpdatedRsp = 100204,
    SysRechargeOrderDeliveryReq = 207,
    SysRechargeOrderDeliveryRsp = 100207,
    IncrGuildExpReq = 208,
    KickOffUserFromGameReq = 209,
    KickOffUserFromGameRsp = 10209,
    SysUpdateGuildMemberNameReq = 210,
    SysRechargeOrderRefundReq = 211,
    SysRechargeOrderRefundRsp = 100211,
    SysGuildWarBattleSettleReq = 212,
    SysGuildWarBattleSettleRsp = 100212,
    SysGetGuildWarProgressReq = 213,
    SysGetGuildWarProgressRsp = 100213,
    SysAddGuildHeadReq = 214,
    SysAddGuildHeadRsp = 100214,
    SysCheckOwnEmojiReq = 215,
    SysCheckOwnEmojiRsp = 100215,
    SendGlobalMailReq = 301,
    SendGlobalMailRsp = 100301,
    SendPrivateMailReq = 302,
    SendPrivateMailRsp = 100302,
    FetchGlobalMailReq = 303,
    FetchGlobalMailRsp = 100303,
    GetAllOpFashionsReq = 304,
    GetAllOpFashionsRsp = 100304,
    GetAllGiftPackageReq = 305,
    GetAllGiftPackageRsp = 100305,
    GetAllOpActivityReq = 306,
    GetAllOpActivityRsp = 100306,
    GetAllShopLabelReq = 307,
    GetAllShopLabelRsp = 100307,
    CardUpdateNotify = 401,
    NewMessageNotify = 402,
    RelationChangedNotify = 403,
    NewMailNotify = 404,
    KickOffNotify = 405,
    MutedBySystemNotify = 406,
    ActorInfoUpdateNotify = 407,
    NewBadgeNotify = 408,
    RelationDelApplicantNotify = 409,
    ManorEventUpdateNotify = 411,
    GuildEventNotify = 412,
    ManorConveyNotify = 413,
    ManorInfoUpdateNotify = 414,
    BattlePassBuySuccessNotify = 415,
    BossChallengeHighScoreNotify = 416,
    RogueCardUpdateNotify = 417,
    FashionAddNotify = 418,
    AuthTokenReq = 1001,
    AuthTokenRsp = 101001,
    EnterGameReq = 1002,
    EnterGameRsp = 101002,
    KickOffReq = 1003,
    KickOffRsp = 101003,
    CreateActorReq = 1101,
    CreateActorRsp = 101101,
    GetActorInfoReq = 1102,
    GetActorInfoRsp = 101102,
    OfflineReq = 1104,
    OfflineRsp = 101104,
    HeartBeatReq = 1105,
    HeartBeatRsp = 101105,
    EventNotifyReq = 1106,
    EventNotifyRsp = 101106,
    GetActorSignInReq = 1107,
    GetActorSignInRsp = 101107,
    ActorSignInReq = 1108,
    ActorSignInRsp = 101108,
    ActorGmReq = 1109,
    ActorGmRsp = 101109,
    GetUnlockedFeaturesReq = 1110,
    GetUnlockedFeaturesRsp = 101110,
    GetEmojiReq = 1111,
    GetEmojiRsp = 101111,
    ReportLatestEmojiReq = 1112,
    ReportLatestEmojiRsp = 101112,
    GetOtherDetailInfoReq = 1113,
    GetOtherDetailInfoRsp = 101113,
    GetStoryListReq = 1114,
    GetStoryListRsp = 101114,
    ChangeNameReq = 1115,
    ChangeNameRsp = 101115,
    SaveSettingsReq = 1116,
    SaveSettingsRsp = 101116,
    ChangeFaceReq = 1117,
    ChangeFaceRsp = 101117,
    FinishGuideReq = 1118,
    FinishGuideRsp = 101118,
    GetGuideProgressReq = 1119,
    GetGuideProgressRsp = 101119,
    CheckFeatureOpenReq = 1120,
    CheckFeatureOpenRsp = 101120,
    GetActorMirrorInfoReq = 1121,
    GetActorMirrorInfoRsp = 101121,
    FinishPlotReq = 1122,
    FinishPlotRsp = 101122,
    GetAllFinishedPlotsReq = 1123,
    GetAllFinishedPlotsRsp = 101123,
    GetSelfDetailInfoReq = 1124,
    GetSelfDetailInfoRsp = 101124,
    SetProfileDisplayCardsReq = 1125,
    SetProfileDisplayCardsRsp = 101125,
    SetProfileShowResourceReq = 1126,
    SetProfileShowResourceRsp = 101126,
    GetEnergyRecoverInfoReq = 1127,
    GetEnergyRecoverInfoRsp = 101127,
    ChangePasswordReq = 1128,
    ChangePasswordRsp = 101128,
    UpdateGuildOperateStateReq = 1129,
    UpdateGuildOperateStateRsp = 101129,
    GetGuildOperateStateReq = 1130,
    GetGuildOperateStateRsp = 101130,
    StoryOperateReportReq = 1131,
    StoryOperateReportRsp = 101131,
    ReportOperateRecordReq = 1132,
    ReportOperateRecordRsp = 101132,
    GetOperateRecordReq = 1133,
    GetOperateRecordRsp = 101133,
    BatchSyncResReq = 1134,
    BatchSyncResRsp = 101134,
    ChangeHeadReq = 1135,
    ChangeHeadRsp = 101135,
    UseExchangeCodeReq = 1136,
    UseExchangeCodeRsp = 101136,
    ClientAbnormalReportReq = 1137,
    ClientAbnormalReportRsp = 101137,
    OperateStarSoundReq = 1138,
    OperateStarSoundRsp = 101138,
    OperateSoundPlayListReq = 1139,
    OperateSoundPlayListRsp = 101139,
    SetBirthdayReq = 1140,
    SetBirthdayRsp = 101140,
    ActivateHandBookGrowReq = 1145,
    ActivateHandBookGrowRsp = 101145,
    SendMessageReq = 1201,
    SendMessageRsp = 101201,
    SyncMessageReq = 1202,
    SyncMessageRsp = 101202,
    SwitchWorldGroupReq = 1203,
    SwitchWorldGroupRsp = 101203,
    ReportUserReq = 1204,
    ReportUserRsp = 101204,
    SyncPrivateHistoryMessageReq = 1205,
    SyncPrivateHistoryMessageRsp = 101205,
    GetWorldLineInfoReq = 1206,
    GetWorldLineInfoRsp = 101206,
    GetChannelNewestMessageReq = 1207,
    GetChannelNewestMessageRsp = 101207,
    GetPrivateChattingTargetReq = 1208,
    GetPrivateChattingTargetRsp = 101208,
    ChangePrivateChattingTargetReq = 1209,
    ChangePrivateChattingTargetRsp = 101209,
    GetChatStateReq = 1210,
    GetChatStateRsp = 101210,
    MarkMessageReadReq = 1211,
    MarkMessageReadRsp = 101211,
    GetItemsReq = 1301,
    GetItemsRsp = 101301,
    SyncItemsReq = 1302,
    SyncItemsRsp = 101302,
    BuyCountResourceReq = 1303,
    BuyCountResourceRsp = 101303,
    UseItemReq = 1304,
    UseItemRsp = 101304,
    SaleItemReq = 1305,
    SaleItemRsp = 101305,
    ConsumeItemReq = 1306,
    ConsumeItemRsp = 101306,
    CheckItemEnoughReq = 1307,
    CheckItemEnoughReq = 101307,
    ExchangeCardFragmentReq = 1308,
    ExchangeCardFragmentRsp = 101308,
    ExchangeEnergyReq = 1309,
    ExchangeEnergyRsp = 101309,
    GetStoryMonsterListReq = 1310,
    GetStoryMonsterListRsp = 101310,
    BatchUseItemsReq = 1311,
    BatchUseItemsRsp = 101311,
    ClickStoryEventReportReq = 1312,
    ClickStoryEventReportRsp = 101312,
    GetAllCardsReq = 1401,
    GetAllCardsRsp = 101401,
    LevelupCardReq = 1402,
    LevelupCardRsp = 101402,
    QualityUpCardReq = 1403,
    QualityUpCardRsp = 101403,
    LevelupCardSkillReq = 1404,
    LevelupCardSkillRsp = 101404,
    GradeUpCardReq = 1405,
    GradeUpCardRsp = 101405,
    GetCardAllTeamReq = 1406,
    GetCardAllTeamRsp = 101406,
    SetCardTeamReq = 1407,
    SetCardTeamRsp = 101407,
    ChangeCardTeamNameReq = 1408,
    ChangeCardTeamNameRsp = 101408,
    ChangeCardFashionReq = 1409,
    ChangeCardFashionRsp = 101409,
    GetAllShowFashionReq = 1410,
    GetAllShowFashionRsp = 101410,
    GetAllCardFashionReq = 1411,
    GetAllCardFashionRsp = 101411,
    ClickCardStoryEventReportReq = 1412,
    ClickCardStoryEventReportRsp = 101412,
    GetCardClickedStoryEventsReq = 1413,
    GetCardClickedStoryEventsRsp = 101413,
    GetOtherCardInfoReq = 1414,
    GetOtherCardInfoRsp = 101414,
    CardRobotTestInitialReq = 1415,
    CardRobotTestInitialRsp = 101415,
    MultiGradeUpCardReq = 1416,
    MultiGradeUpCardRsp = 101416,
    SetCardFocusReq = 1417,
    SetCardFocusRsp = 101417,
    SetCardFashionShowReq = 1418,
    SetCardFashionShowRsp = 101418,
    FetchHandBookRewardReq = 1419,
    FetchHandBookRewardRsp = 101419,
    ActivateHandBookGrowReq = 1420,
    ActivateHandBookGrowRsp = 101420,
    GetSceneInfoReq = 1501,
    GetSceneInfoRsp = 101501,
    GetChapterStageReq = 1502,
    GetChapterStageRsp = 101502,
    ChallengeStageReq = 1503,
    ChallengeStageRsp = 101503,
    GetChallengeRecordReq = 1505,
    GetChallengeRecordRsp = 101505,
    FetchSceneChapterRewardReq = 1506,
    FetchSceneChapterRewardRsp = 101506,
    GetOpenStagesReq = 1507,
    GetOpenStagesRsp = 101507,
    FetchSceneStageRewardReq = 1508,
    FetchSceneStageRewardRsp = 101508,
    SweepStageReq = 1509,
    SweepStageRsp = 101509,
    GetFeatureScheduleReq = 1510,
    GetFeatureScheduleRsp = 101510,
    GetMultiDropActivityReq = 1511,
    GetMultiDropActivityRsp = 101511,
    GetSceneRankReq = 1515,
    GetSceneRankRsp = 101515,
    GetFriendsReq = 1601,
    GetFriendsRsp = 101601,
    ApplyAddFriendReq = 1602,
    ApplyAddFriendRsp = 101602,
    AgreeFriendApplyReq = 1603,
    AgreeFriendApplyRsp = 101603,
    DisagreeFriendReq = 1604,
    DisagreeFriendRsp = 101604,
    BlockTargetReq = 1605,
    BlockTargetRsp = 101605,
    DeleteRelationReq = 1606,
    DeleteRelationRsp = 101606,
    SearchTargetReq = 1607,
    SearchTargetRsp = 101607,
    SetRelationRemarkReq = 1608,
    SetRelationRemarkRsp = 101608,
    GetAllBlockTargetReq = 1609,
    GetAllBlockTargetRsp = 101609,
    GetFriendFightRecordReq = 1610,
    GetFriendFightRecordRsp = 101610,
    GetAllBadgesReq = 1701,
    GetAllBadgesRsp = 101701,
    WearBadgeReq = 1702,
    WearBadgeRsp = 101702,
    TakeoffBadgeReq = 1703,
    TakeoffBadgeRsp = 101703,
    LevelupBadgeReq = 1704,
    LevelupBadgeRsp = 101704,
    DecomposeBadgeReq = 1705,
    DecomposeBadgeRsp = 101705,
    SetBadgeLockStateReq = 1706,
    SetBadgeLockStateRsp = 101706,
    ClearBadgeNewTagReq = 1707,
    ClearBadgeNewTagRsp = 101707,
    SwitchBadgeReq = 1708,
    SwitchBadgeRsp = 101708,
    GetAllMailsReq = 1801,
    GetAllMailsRsp = 101801,
    FetchMailAttachmentReq = 1802,
    FetchMailAttachmentRsp = 101802,
    DeleteMailReq = 1803,
    DeleteMailRsp = 101803,
    MarkMailReadReq = 1804,
    MarkMailReadRsp = 101804,
    PrepareBattleReq = 1901,
    PrepareBattleRsp = 101901,
    GetStagePrepareInfoReq = 1902,
    GetStagePrepareInfoRsp = 101902,
    GetBattleRecordReq = 1905,
    GetBattleRecordRsp = 101905,
    SaveStagePrepareInfoReq = 1906,
    SaveStagePrepareInfoRsp = 101906,
    ExitStagePrepareReq = 1907,
    ExitStagePrepareRsp = 101907,
    GetFriendDefenceFormationReq = 1908,
    GetFriendDefenceFormationRsp = 101908,
    GetBossInfoReq = 2001,
    GetBossInfoRsp = 102001,
    GetBossTopRankReq = 2002,
    GetBossTopRankRsp = 102002,
    GetBossRankActorRecordReq = 2003,
    GetBossRankActorRecordRsp = 102003,
    GiveupBossChallengeReq = 2004,
    GiveupBossChallengeRsp = 102004,
    QuickBossChallengeReq = 2005,
    QuickBossChallengeRsp = 102005,
    StartBossChallengeReq = 2006,
    StartBossChallengeRsp = 102006,
    RewardBossChallengeReq = 2007,
    RewardBossChallengeRsp = 102007,
    GetManorInfoReq = 2101,
    GetManorInfoRsp = 102101,
    ManorTriggerEventReq = 2102,
    ManorTriggerEventRsp = 102102,
    ManorReportPositionReq = 2103,
    ManorReportPositionRsp = 102103,
    ManorProcessEventReq = 2104,
    ManorProcessEventRsp = 102104,
    ManorFinishStoryReq = 2105,
    ManorFinishStoryRsp = 102105,
    GetManorInfoSimpleReq = 2106,
    GetManorInfoSimpleRsp = 102106,
    ManorReportEventPositionReq = 2107,
    ManorReportEventPositionRsp = 102107,
    ManorJumpStoryEventReq = 2108,
    ManorJumpStoryEventRsp = 102108,
    GetManorFeatureScheduleReq = 2109,
    GetManorFeatureScheduleRsp = 102109,
    ManorFetchRookieRewardReq = 2110,
    ManorFetchRookieRewardRsp = 102110,
    ManorGetActivityRolePlotEventReq = 2111,
    ManorGetActivityRolePlotEventRsp = 102111,
    ManorBatchProcessEventReq = 2112,
    ManorBatchProcessEventRsp = 102112,
    GetRogueInfoReq = 2201,
    GetRogueInfoRsp = 102201,
    StartRogueGameReq = 2202,
    StartRogueGameRsp = 102202,
    GetRogueStateInfoReq = 2203,
    GetRogueStateInfoRsp = 102203,
    EnterRogueNodeReq = 2204,
    EnterRogueNodeRsp = 102204,
    ExitRogueNodeReq = 2205,
    ExitRogueNodeRsp = 102205,
    EnhanceRogueCardAttribReq = 2206,
    EnhanceRogueCardAttribRsp = 102206,
    ActivateRogueTalentReq = 2207,
    ActivateRogueTalentRsp = 102207,
    BuyRogueNodeShopTreasureReq = 2208,
    BuyRogueNodeShopTreasureRsp = 102208,
    RefreshRogueNodeShopReq = 2209,
    RefreshRogueNodeShopRsp = 102209,
    FetchRogueNodeRewardReq = 2210,
    FetchRogueNodeRewardRsp = 102210,
    QuitRogueGameReq = 2211,
    QuitRogueGameRsp = 102211,
    GetRoguePicNewStateReq = 2212,
    GetRoguePicNewStateRsp = 102212,
    ClearRoguePicNewStateReq = 2213,
    ClearRoguePicNewStateRsp = 102213,
    GetRogueAllPicReq = 2214,
    GetRogueAllPicRsp = 102214,
    GetRogueTrendsReq = 2215,
    GetRogueTrendsRsp = 102215,
    FetchRogueThemeLevelRewardReq = 2216,
    FetchRogueThemeLevelRewardRsp = 102216,
    GetRogueTopScoreRecordReq = 2217,
    GetRogueTopScoreRecordRsp = 102217,
    FetchRogueTrendTaskRewardReq = 2218,
    FetchRogueTrendTaskRewardRsp = 102218,
    FinishRogueEventStoryReq = 2219,
    FinishRogueEventStoryRsp = 102219,
    RecruitRogueInitialCardReq = 2220,
    RecruitRogueInitialCardRsp = 102220,
    ChooseRogueInitialTreasureReq = 2221,
    ChooseRogueInitialTreasureRsp = 102221,
    FinishRogueEventKeyStoryReq = 2222,
    FinishRogueEventKeyStoryRsp = 102222,
    ChooseRogueEventBattleStoryReq = 2223,
    ChooseRogueEventBattleStoryRsp = 102223,
    SweepRogueReq = 2224,
    SweepRogueRsp = 102224,
    GetGuildWarScheduleReq = 2301,
    GetGuildWarScheduleRsp = 102301,
    GetGuildWarAllInfoReq = 2302,
    GetGuildWarAllInfoRsp = 102302,
    GetGuildWarCompensateFormationReq = 2303,
    GetGuildWarCompensateFormationRsp = 102303,
    LevelupGuildWarSkillReq = 2304,
    LevelupGuildWarSkillRsp = 102304,
    SetGuildWarAssistCardReq = 2305,
    SetGuildWarAssistCardRsp = 102305,
    GetGuildWarRecommendFormationReq = 2306,
    GetGuildWarRecommendFormationRsp = 102306,
    GetGuildWarRankReq = 2307,
    GetGuildWarRankRsp = 102307,
    RewardGuildWarTaskReq = 2308,
    RewardGuildWarTaskRsp = 102308,
    SetGuildWarSkillTeamReq = 2309,
    SetGuildWarSkillTeamRsp = 102309,
    GetGuildWarBattleRecordReq = 2310,
    GetGuildWarBattleRecordRsp = 102310,
    GetGuildWarInBattleCountReq = 2311,
    GetGuildWarInBattleCountRsp = 102311,
    GetSealWearInfoReq = 2401,
    GetSealWearInfoRsp = 102401,
    WearSealReq = 2402,
    WearSealRsp = 102402,
    TakeoffSealReq = 2403,
    TakeoffSealRsp = 102403,
    CompositeSealReq = 2404,
    CompositeSealRsp = 102404,
    SealBigLevelupReq = 2405,
    SealBigLevelupRsp = 102405,
    SealBigQualityUpReq = 2406,
    SealBigQualityUpRsp = 102406,
    SealBigAddUpReq = 2407,
    SealBigAddUpRsp = 102407,
    GetSealBigHookInfoReq = 2408,
    GetSealBigHookInfoRsp = 102408,
    FetchSealBigHookRewardReq = 2409,
    FetchSealBigHookRewardRsp = 102409,
    QuitSealBigHookChallengeReq = 2410,
    QuitSealBigHookChallengeRsp = 102410,
    GetMyGuildInfoReq = 10001,
    GetMyGuildInfoRsp = 110001,
    CreateGuildReq = 10002,
    CreateGuildRsp = 110002,
    SearchGuildByNameReq = 10003,
    SearchGuildByNameRsp = 110003,
    GetGuildMembersReq = 10004,
    GetGuildMembersRsp = 110004,
    ChangeGuildIconReq = 10005,
    ChangeGuildIconRsp = 110005,
    ChangeGuildNameReq = 10006,
    ChangeGuildNameRsp = 110006,
    ChangeGuildNoticeReq = 10007,
    ChangeGuildNoticeRsp = 110007,
    SetGuildLevelLimitReq = 10008,
    SetGuildLevelLimitRsp = 110008,
    ApplyJoinGuildReq = 10009,
    ApplyJoinGuildRsp = 110009,
    CancelJoinGuildReq = 10010,
    CancelJoinGuildRsp = 110010,
    ProcessGuildJoinApplyReq = 10011,
    ProcessGuildJoinApplyRsp = 110011,
    OperateGuildViceLeaderReq = 10012,
    OperateGuildViceLeaderRsp = 110012,
    KickOutGuildMemberReq = 10013,
    KickOutGuildMemberRsp = 110013,
    TransferGuildLeaderReq = 10014,
    TransferGuildLeaderRsp = 110014,
    DismissGuildReq = 10015,
    DismissGuildRsp = 110015,
    ExitGuildReq = 10016,
    ExitGuildRsp = 110016,
    GetRecommendGuildReq = 10017,
    GetRecommendGuildRsp = 110017,
    StartImpeachGuildLeaderReq = 10018,
    StartImpeachGuildLeaderRsp = 110018,
    VoteImpeachGuildLeaderReq = 10019,
    VoteImpeachGuildLeaderRsp = 110019,
    NotifyGuildConsumeEnergyReq = 10020,
    NotifyGuildConsumeEnergyRsp = 110020,
    QuickJoinGuildReq = 10021,
    QuickJoinGuildRsp = 110021,
    AutoJoinGuildReq = 10022,
    AutoJoinGuildRsp = 110022,
    GetUserGuildUidReq = 10023,
    GetUserGuildUidRsp = 110023,
    GetAppliedGuildsReq = 10024,
    GetAppliedGuildsRsp = 110024,
    SetGuildTargetReq = 10025,
    SetGuildTargetRsp = 110025,
    GetImpeachInfoReq = 10026,
    GetImpeachInfoRsp = 110026,
    GetMyGuildSimpleInfoReq = 10027,
    GetMyGuildSimpleInfoRsp = 110027,
    GetGuildPracticeRankReq = 10028,
    GetGuildPracticeRankRsp = 110028,
    GetGuildPracticeRecordReq = 10029,
    GetGuildPracticeRecordRsp = 110029,
    SaveGuildPracticeRecordReq = 10030,
    SaveGuildPracticeRecordRsp = 110030,
    SetGuildPolicyReq = 10031,
    SetGuildPolicyRsp = 110031,
    SearchGuildByConditionsReq = 10032,
    SearchGuildByConditionsRsp = 110032,
    GetGuildWarRankExtReq = 10033,
    GetGuildWarRankExtRsp = 110033,
    ArenaGetAllReq = 10101,
    ArenaGetAllRsp = 110101,
    ArenaGetMatchReq = 10102,
    ArenaGetMatchRsp = 110102,
    ArenaGetRecordReq = 10103,
    ArenaGetRecordRsp = 110103,
    ArenaFightReq = 10104,
    ArenaFightRsp = 110104,
    ArenaSwitchRankReq = 10105,
    ArenaSwitchRankRsp = 110105,
    ArenaSetDefenseReq = 10106,
    ArenaSetDefenseRsp = 110106,
    ArenaUpdateActorMirrorReq = 10107,
    ArenaUpdateActorMirrorRsp = 110107,
    ArenaGetTopRankReq = 10108,
    ArenaGetTopRankRsp = 110108,
    ArenaGetOpponentFormationReq = 10112,
    ArenaGetOpponentFormationRsp = 110112,
    ArenaGetRoleFormationReq = 10113,
    ArenaGetRoleFormationRsp = 110113,
    ArenaRefreshFightCDReq = 10114,
    ArenaRefreshFightCDRsp = 110114,
    ArenaResetFightNumReq = 10115,
    ArenaResetFightNumRsp = 110115,
    ArenaGetRankRewardReq = 10116,
    ArenaGetRankRewardRsp = 110116,
    ArenaGetAllDefenseReq = 10117,
    ArenaGetAllDefenseRsp = 110117,
    ArenaSaveBattleRecordReq = 10118,
    ArenaSaveBattleRecordRsp = 110118,
    GetShopInfoReq = 10201,
    GetShopInfoRsp = 110201,
    BuyShopGoodsReq = 10202,
    BuyShopGoodsRsp = 110202,
    RefreshShopGoodsReq = 10203,
    RefreshShopGoodsRsp = 110203,
    BuySealShopGoodsReq = 10204,
    BuySealShopGoodsRsp = 110204,
    GetBattlePassInfoReq = 10301,
    GetBattlePassInfoRsp = 110301,
    BattlePassTaskRefreshReq = 10302,
    BattlePassTaskRefreshRsp = 110302,
    BattlePassTaskRewardReq = 10303,
    BattlePassTaskRewardRsp = 110303,
    BattlePassBuyLevelReq = 10304,
    BattlePassBuyLevelRsp = 110304,
    BattlePassGetRewardReq = 10305,
    BattlePassGetRewardRsp = 110305,
    GetCarnivalInfoReq = 10401,
    GetCarnivalInfoRsp = 110401,
    CarnivalGetRewardReq = 10402,
    CarnivalGetRewardRsp = 110402,
    GetGachaInfoReq = 10501,
    GetGachaInfoRsp = 110501,
    DoGachaReq = 10502,
    DoGachaRsp = 110502,
    ExchangeGachaReq = 10503,
    ExchangeGachaRsp = 110503,
    GetGachaRecordsReq = 10504,
    GetGachaRecordsRsp = 110504,
    SetGachaTargetReq = 10505,
    SetGachaTargetRsp = 110505,
    GetGachaExtraReq = 10506,
    GetGachaExtraRsp = 110506,
    PurchaseBuyReq = 10601,
    PurchaseBuyRsp = 110601,
    PurchaseGetReq = 10602,
    PurchaseGetRsp = 110602,
    GetPurchaseProductsReq = 10603,
    GetPurchaseProductsRsp = 110603,
    FashionBuyReq = 10604,
    FashionBuyRsp = 110604,
    MonthCardDailyRewardReq = 10605,
    MonthCardDailyRewardRsp = 110605,
    BattlePassBuyReq = 10606,
    BattlePassBuyRsp = 110606,
    CreatePayOrderReq = 10607,
    CreatePayOrderRsp = 110607,
    CancelPayOrderReq = 10608,
    CancelPayOrderRsp = 110608,
    FinishPayOrderReq = 10609,
    FinishPayOrderRsp = 110609,
    FetchWeekPayRewardReq = 10610,
    FetchWeekPayRewardRsp = 110610,
    GetExpeditionInfoReq = 10701,
    GetExpeditionInfoRsp = 110701,
    GetExpeditionRewardReq = 10703,
    GetExpeditionRewardRsp = 110703,
    GetActivityAllReq = 10801,
    GetActivityAllRsp = 110801,
    ActivitySignInReq = 10802,
    ActivitySignInRsp = 110802,
    ActivityStageShopBuyReq = 10803,
    ActivityStageShopBuyRsp = 110803,
    ActivityStageTaskRewardReq = 10804,
    ActivityStageTaskRewardRsp = 110804,
    ActivitySearchReq = 10805,
    ActivitySearchRsp = 110805,
    GetAllBannerReq = 10806,
    GetAllBannerRsp = 110806,
    GetOpActivityByIdReq = 10807,
    GetOpActivityByIdRsp = 110807,
    GetAllRecommendImgReq = 10808,
    GetAllRecommendImgRsp = 110808,
    ActivityStageSignInReq = 10809,
    ActivityStageSignInRsp = 110809,
    ActivityGetMiniGameReq = 10810,
    ActivityGetMiniGameRsp = 110810,
    ActivityPlayMiniGameReq = 10811,
    ActivityPlayMiniGameRsp = 110811,
    ActivityRewardMiniGameReq = 10812,
    ActivityRewardMiniGameRsp = 110812,
    ActivityReturnSignInReq = 10813,
    ActivityReturnSignInRsp = 110813,
    GetActivityReviewInfoReq = 10814,
    GetActivityReviewInfoRsp = 110814,
    ActivityReviewShopBuyReq = 10815,
    ActivityReviewShopBuyRsp = 110815,
    ActivityReviewUnlockReq = 10816,
    ActivityReviewUnlockRsp = 110816,
    ActivityDoTurnTableReq = 10817,
    ActivityDoTurnTableRsp = 110817,
    ActivityTurnTableGetFreeReq = 10818,
    ActivityTurnTableGetFreeRsp = 110818,
    ActivityGetGameTopRankReq = 10819,
    ActivityGetGameTopRankRsp = 110819,
    ActivityDoTurnTableRoundReq = 10820,
    ActivityDoTurnTableRoundRsp = 110820,
    FetchAccumRechargeRewardReq = 10821,
    FetchAccumRechargeRewardRsp = 110821,
    ActivityReturnProSigninReq = 10822,
    ActivityReturnProSigninRsp = 110822,
    ActivityReturnProShopBuyReq = 10823,
    ActivityReturnProShopBuyRsp = 110823,
    ActivityReturnProTaskRewardReq = 10824,
    ActivityReturnProTaskRewardRsp = 110824,
    ActivityGetStageDropMultiReq = 10825,
    ActivityGetStageDropMultiRsp = 110825,
    GetPlantInfoReq = 10901,
    GetPlantInfoRsp = 110901,
    RewardFlowerReq = 10902,
    RewardFlowerRsp = 110902,
    RewardPlantTaskReq = 10903,
    RewardPlantTaskRsp = 110903,
    GetCommonTaskInfoReq = 11001,
    GetCommonTaskInfoRsp = 111001,
    CommonTaskReplaceReq = 11002,
    CommonTaskReplaceRsp = 111002,
    CommonTaskRewardReq = 11003,
    CommonTaskRewardRsp = 111003,
    GetTaskRefreshStampReq = 11004,
    GetTaskRefreshStampRsp = 111004,
    GetGiftInfoReq = 12001,
    GetGiftInfoRsp = 112001,
    BuyGiftReq = 12002,
    BuyGiftRsp = 112002,
    GetGiftRewardReq = 12003,
    GetGiftRewardRsp = 112003,
    GetSupplyInfoReq = 13001,
    GetSupplyInfoRsp = 113001,
    RewardSupplyReq = 13002,
    RewardSupplyRsp = 113002,
    BuffStageGetInfoReq = 14001,
    BuffStageGetInfoRsp = 114001,
    BuffStageRewardReq = 14002,
    BuffStageRewardRsp = 114002,
    GetCycleTaskInfoReq = 15001,
    GetCycleTaskInfoRsp = 115001,
    CycleTaskRewardReq = 15002,
    CycleTaskRewardRsp = 115002,
    GetAgreementInfoReq = 16001,
    GetAgreementInfoRsp = 116001,
    RewardAgreementReq = 16002,
    RewardAgreementRsp = 116002,
    GetDispatchInfoReq = 17001,
    GetDispatchInfoRsp = 117001,
    StartDispatchInfoReq = 17002,
    StartDispatchInfoRsp = 117002,
    RewardDispatchInfoReq = 17003,
    RewardDispatchInfoRsp = 117003,
    CancelDispatchInfoReq = 17004,
    CancelDispatchInfoRsp = 117004,
    GetLimitChallengeInfoReq = 18001,
    GetLimitChallengeInfoRsp = 118001,
    ResetLimitChallengeReq = 18002,
    ResetLimitChallengeRsp = 118002,
    RewardLimitChallengeTaskReq = 18003,
    RewardLimitChallengeTaskRsp = 118003
  },
  MsgNameByID = {
    [101] = "DbQueryUniqueDataReq",
    [100101] = "DbQueryUniqueDataRsp",
    [102] = "DbQueryBatchDataReq",
    [100102] = "DbQueryBatchDataRsp",
    [103] = "DbDeleteDataReq",
    [100103] = "DbDeleteDataRsp",
    [104] = "DbInsertDataReq",
    [100104] = "DbInsertDataRsp",
    [105] = "DbUpdateDataReq",
    [100105] = "DbUpdateDataRsp",
    [106] = "DbUpdateBatchDataReq",
    [100106] = "DbUpdateBatchDataRsp",
    [107] = "DbCreateIndexReq",
    [100107] = "DbCreateIndexRsp",
    [108] = "AllocGameReq",
    [100108] = "AllocGameRsp",
    [109] = "DbQueryCountReq",
    [100109] = "DbQueryCountReq",
    [110] = "DbTransactionOpReq",
    [100110] = "DbTransactionOpRsp",
    [111] = "DbUpsertDataReq",
    [100111] = "DbUpsertDataRsp",
    [112] = "DbTableDropReq",
    [100112] = "DbTableDropRsp",
    [113] = "DbQueryOneAndUpdateReq",
    [100113] = "DbQueryOneAndUpdateRsp",
    [202] = "GetResVersionReq",
    [100202] = "GetResVersionRsp",
    [204] = "SysActorInfoUpdatedReq",
    [100204] = "SysActorInfoUpdatedRsp",
    [207] = "SysRechargeOrderDeliveryReq",
    [100207] = "SysRechargeOrderDeliveryRsp",
    [208] = "IncrGuildExpReq",
    [209] = "KickOffUserFromGameReq",
    [10209] = "KickOffUserFromGameRsp",
    [210] = "SysUpdateGuildMemberNameReq",
    [211] = "SysRechargeOrderRefundReq",
    [100211] = "SysRechargeOrderRefundRsp",
    [212] = "SysGuildWarBattleSettleReq",
    [100212] = "SysGuildWarBattleSettleRsp",
    [213] = "SysGetGuildWarProgressReq",
    [100213] = "SysGetGuildWarProgressRsp",
    [214] = "SysAddGuildHeadReq",
    [100214] = "SysAddGuildHeadRsp",
    [215] = "SysCheckOwnEmojiReq",
    [100215] = "SysCheckOwnEmojiRsp",
    [301] = "SendGlobalMailReq",
    [100301] = "SendGlobalMailRsp",
    [302] = "SendPrivateMailReq",
    [100302] = "SendPrivateMailRsp",
    [303] = "FetchGlobalMailReq",
    [100303] = "FetchGlobalMailRsp",
    [304] = "GetAllOpFashionsReq",
    [100304] = "GetAllOpFashionsRsp",
    [305] = "GetAllGiftPackageReq",
    [100305] = "GetAllGiftPackageRsp",
    [306] = "GetAllOpActivityReq",
    [100306] = "GetAllOpActivityRsp",
    [307] = "GetAllShopLabelReq",
    [100307] = "GetAllShopLabelRsp",
    [401] = "CardUpdateNotify",
    [402] = "NewMessageNotify",
    [403] = "RelationChangedNotify",
    [404] = "NewMailNotify",
    [405] = "KickOffNotify",
    [406] = "MutedBySystemNotify",
    [407] = "ActorInfoUpdateNotify",
    [408] = "NewBadgeNotify",
    [409] = "RelationDelApplicantNotify",
    [411] = "ManorEventUpdateNotify",
    [412] = "GuildEventNotify",
    [413] = "ManorConveyNotify",
    [414] = "ManorInfoUpdateNotify",
    [415] = "BattlePassBuySuccessNotify",
    [416] = "BossChallengeHighScoreNotify",
    [417] = "RogueCardUpdateNotify",
    [418] = "FashionAddNotify",
    [1001] = "AuthTokenReq",
    [101001] = "AuthTokenRsp",
    [1002] = "EnterGameReq",
    [101002] = "EnterGameRsp",
    [1003] = "KickOffReq",
    [101003] = "KickOffRsp",
    [1101] = "CreateActorReq",
    [101101] = "CreateActorRsp",
    [1102] = "GetActorInfoReq",
    [101102] = "GetActorInfoRsp",
    [1104] = "OfflineReq",
    [101104] = "OfflineRsp",
    [1105] = "HeartBeatReq",
    [101105] = "HeartBeatRsp",
    [1106] = "EventNotifyReq",
    [101106] = "EventNotifyRsp",
    [1107] = "GetActorSignInReq",
    [101107] = "GetActorSignInRsp",
    [1108] = "ActorSignInReq",
    [101108] = "ActorSignInRsp",
    [1109] = "ActorGmReq",
    [101109] = "ActorGmRsp",
    [1110] = "GetUnlockedFeaturesReq",
    [101110] = "GetUnlockedFeaturesRsp",
    [1111] = "GetEmojiReq",
    [101111] = "GetEmojiRsp",
    [1112] = "ReportLatestEmojiReq",
    [101112] = "ReportLatestEmojiRsp",
    [1113] = "GetOtherDetailInfoReq",
    [101113] = "GetOtherDetailInfoRsp",
    [1114] = "GetStoryListReq",
    [101114] = "GetStoryListRsp",
    [1115] = "ChangeNameReq",
    [101115] = "ChangeNameRsp",
    [1116] = "SaveSettingsReq",
    [101116] = "SaveSettingsRsp",
    [1117] = "ChangeFaceReq",
    [101117] = "ChangeFaceRsp",
    [1118] = "FinishGuideReq",
    [101118] = "FinishGuideRsp",
    [1119] = "GetGuideProgressReq",
    [101119] = "GetGuideProgressRsp",
    [1120] = "CheckFeatureOpenReq",
    [101120] = "CheckFeatureOpenRsp",
    [1121] = "GetActorMirrorInfoReq",
    [101121] = "GetActorMirrorInfoRsp",
    [1122] = "FinishPlotReq",
    [101122] = "FinishPlotRsp",
    [1123] = "GetAllFinishedPlotsReq",
    [101123] = "GetAllFinishedPlotsRsp",
    [1124] = "GetSelfDetailInfoReq",
    [101124] = "GetSelfDetailInfoRsp",
    [1125] = "SetProfileDisplayCardsReq",
    [101125] = "SetProfileDisplayCardsRsp",
    [1126] = "SetProfileShowResourceReq",
    [101126] = "SetProfileShowResourceRsp",
    [1127] = "GetEnergyRecoverInfoReq",
    [101127] = "GetEnergyRecoverInfoRsp",
    [1128] = "ChangePasswordReq",
    [101128] = "ChangePasswordRsp",
    [1129] = "UpdateGuildOperateStateReq",
    [101129] = "UpdateGuildOperateStateRsp",
    [1130] = "GetGuildOperateStateReq",
    [101130] = "GetGuildOperateStateRsp",
    [1131] = "StoryOperateReportReq",
    [101131] = "StoryOperateReportRsp",
    [1132] = "ReportOperateRecordReq",
    [101132] = "ReportOperateRecordRsp",
    [1133] = "GetOperateRecordReq",
    [101133] = "GetOperateRecordRsp",
    [1134] = "BatchSyncResReq",
    [101134] = "BatchSyncResRsp",
    [1135] = "ChangeHeadReq",
    [101135] = "ChangeHeadRsp",
    [1136] = "UseExchangeCodeReq",
    [101136] = "UseExchangeCodeRsp",
    [1137] = "ClientAbnormalReportReq",
    [101137] = "ClientAbnormalReportRsp",
    [1138] = "OperateStarSoundReq",
    [101138] = "OperateStarSoundRsp",
    [1139] = "OperateSoundPlayListReq",
    [101139] = "OperateSoundPlayListRsp",
    [1140] = "SetBirthdayReq",
    [101140] = "SetBirthdayRsp",
    [1145] = "ActivateHandBookGrowReq",
    [101145] = "ActivateHandBookGrowRsp",
    [1201] = "SendMessageReq",
    [101201] = "SendMessageRsp",
    [1202] = "SyncMessageReq",
    [101202] = "SyncMessageRsp",
    [1203] = "SwitchWorldGroupReq",
    [101203] = "SwitchWorldGroupRsp",
    [1204] = "ReportUserReq",
    [101204] = "ReportUserRsp",
    [1205] = "SyncPrivateHistoryMessageReq",
    [101205] = "SyncPrivateHistoryMessageRsp",
    [1206] = "GetWorldLineInfoReq",
    [101206] = "GetWorldLineInfoRsp",
    [1207] = "GetChannelNewestMessageReq",
    [101207] = "GetChannelNewestMessageRsp",
    [1208] = "GetPrivateChattingTargetReq",
    [101208] = "GetPrivateChattingTargetRsp",
    [1209] = "ChangePrivateChattingTargetReq",
    [101209] = "ChangePrivateChattingTargetRsp",
    [1210] = "GetChatStateReq",
    [101210] = "GetChatStateRsp",
    [1211] = "MarkMessageReadReq",
    [101211] = "MarkMessageReadRsp",
    [1301] = "GetItemsReq",
    [101301] = "GetItemsRsp",
    [1302] = "SyncItemsReq",
    [101302] = "SyncItemsRsp",
    [1303] = "BuyCountResourceReq",
    [101303] = "BuyCountResourceRsp",
    [1304] = "UseItemReq",
    [101304] = "UseItemRsp",
    [1305] = "SaleItemReq",
    [101305] = "SaleItemRsp",
    [1306] = "ConsumeItemReq",
    [101306] = "ConsumeItemRsp",
    [1307] = "CheckItemEnoughReq",
    [101307] = "CheckItemEnoughReq",
    [1308] = "ExchangeCardFragmentReq",
    [101308] = "ExchangeCardFragmentRsp",
    [1309] = "ExchangeEnergyReq",
    [101309] = "ExchangeEnergyRsp",
    [1310] = "GetStoryMonsterListReq",
    [101310] = "GetStoryMonsterListRsp",
    [1311] = "BatchUseItemsReq",
    [101311] = "BatchUseItemsRsp",
    [1312] = "ClickStoryEventReportReq",
    [101312] = "ClickStoryEventReportRsp",
    [1401] = "GetAllCardsReq",
    [101401] = "GetAllCardsRsp",
    [1402] = "LevelupCardReq",
    [101402] = "LevelupCardRsp",
    [1403] = "QualityUpCardReq",
    [101403] = "QualityUpCardRsp",
    [1404] = "LevelupCardSkillReq",
    [101404] = "LevelupCardSkillRsp",
    [1405] = "GradeUpCardReq",
    [101405] = "GradeUpCardRsp",
    [1406] = "GetCardAllTeamReq",
    [101406] = "GetCardAllTeamRsp",
    [1407] = "SetCardTeamReq",
    [101407] = "SetCardTeamRsp",
    [1408] = "ChangeCardTeamNameReq",
    [101408] = "ChangeCardTeamNameRsp",
    [1409] = "ChangeCardFashionReq",
    [101409] = "ChangeCardFashionRsp",
    [1410] = "GetAllShowFashionReq",
    [101410] = "GetAllShowFashionRsp",
    [1411] = "GetAllCardFashionReq",
    [101411] = "GetAllCardFashionRsp",
    [1412] = "ClickCardStoryEventReportReq",
    [101412] = "ClickCardStoryEventReportRsp",
    [1413] = "GetCardClickedStoryEventsReq",
    [101413] = "GetCardClickedStoryEventsRsp",
    [1414] = "GetOtherCardInfoReq",
    [101414] = "GetOtherCardInfoRsp",
    [1415] = "CardRobotTestInitialReq",
    [101415] = "CardRobotTestInitialRsp",
    [1416] = "MultiGradeUpCardReq",
    [101416] = "MultiGradeUpCardRsp",
    [1417] = "SetCardFocusReq",
    [101417] = "SetCardFocusRsp",
    [1418] = "SetCardFashionShowReq",
    [101418] = "SetCardFashionShowRsp",
    [1419] = "FetchHandBookRewardReq",
    [101419] = "FetchHandBookRewardRsp",
    [1420] = "ActivateHandBookGrowReq",
    [101420] = "ActivateHandBookGrowRsp",
    [1501] = "GetSceneInfoReq",
    [101501] = "GetSceneInfoRsp",
    [1502] = "GetChapterStageReq",
    [101502] = "GetChapterStageRsp",
    [1503] = "ChallengeStageReq",
    [101503] = "ChallengeStageRsp",
    [1505] = "GetChallengeRecordReq",
    [101505] = "GetChallengeRecordRsp",
    [1506] = "FetchSceneChapterRewardReq",
    [101506] = "FetchSceneChapterRewardRsp",
    [1507] = "GetOpenStagesReq",
    [101507] = "GetOpenStagesRsp",
    [1508] = "FetchSceneStageRewardReq",
    [101508] = "FetchSceneStageRewardRsp",
    [1509] = "SweepStageReq",
    [101509] = "SweepStageRsp",
    [1510] = "GetFeatureScheduleReq",
    [101510] = "GetFeatureScheduleRsp",
    [1511] = "GetMultiDropActivityReq",
    [101511] = "GetMultiDropActivityRsp",
    [1515] = "GetSceneRankReq",
    [101515] = "GetSceneRankRsp",
    [1601] = "GetFriendsReq",
    [101601] = "GetFriendsRsp",
    [1602] = "ApplyAddFriendReq",
    [101602] = "ApplyAddFriendRsp",
    [1603] = "AgreeFriendApplyReq",
    [101603] = "AgreeFriendApplyRsp",
    [1604] = "DisagreeFriendReq",
    [101604] = "DisagreeFriendRsp",
    [1605] = "BlockTargetReq",
    [101605] = "BlockTargetRsp",
    [1606] = "DeleteRelationReq",
    [101606] = "DeleteRelationRsp",
    [1607] = "SearchTargetReq",
    [101607] = "SearchTargetRsp",
    [1608] = "SetRelationRemarkReq",
    [101608] = "SetRelationRemarkRsp",
    [1609] = "GetAllBlockTargetReq",
    [101609] = "GetAllBlockTargetRsp",
    [1610] = "GetFriendFightRecordReq",
    [101610] = "GetFriendFightRecordRsp",
    [1701] = "GetAllBadgesReq",
    [101701] = "GetAllBadgesRsp",
    [1702] = "WearBadgeReq",
    [101702] = "WearBadgeRsp",
    [1703] = "TakeoffBadgeReq",
    [101703] = "TakeoffBadgeRsp",
    [1704] = "LevelupBadgeReq",
    [101704] = "LevelupBadgeRsp",
    [1705] = "DecomposeBadgeReq",
    [101705] = "DecomposeBadgeRsp",
    [1706] = "SetBadgeLockStateReq",
    [101706] = "SetBadgeLockStateRsp",
    [1707] = "ClearBadgeNewTagReq",
    [101707] = "ClearBadgeNewTagRsp",
    [1708] = "SwitchBadgeReq",
    [101708] = "SwitchBadgeRsp",
    [1801] = "GetAllMailsReq",
    [101801] = "GetAllMailsRsp",
    [1802] = "FetchMailAttachmentReq",
    [101802] = "FetchMailAttachmentRsp",
    [1803] = "DeleteMailReq",
    [101803] = "DeleteMailRsp",
    [1804] = "MarkMailReadReq",
    [101804] = "MarkMailReadRsp",
    [1901] = "PrepareBattleReq",
    [101901] = "PrepareBattleRsp",
    [1902] = "GetStagePrepareInfoReq",
    [101902] = "GetStagePrepareInfoRsp",
    [1905] = "GetBattleRecordReq",
    [101905] = "GetBattleRecordRsp",
    [1906] = "SaveStagePrepareInfoReq",
    [101906] = "SaveStagePrepareInfoRsp",
    [1907] = "ExitStagePrepareReq",
    [101907] = "ExitStagePrepareRsp",
    [1908] = "GetFriendDefenceFormationReq",
    [101908] = "GetFriendDefenceFormationRsp",
    [2001] = "GetBossInfoReq",
    [102001] = "GetBossInfoRsp",
    [2002] = "GetBossTopRankReq",
    [102002] = "GetBossTopRankRsp",
    [2003] = "GetBossRankActorRecordReq",
    [102003] = "GetBossRankActorRecordRsp",
    [2004] = "GiveupBossChallengeReq",
    [102004] = "GiveupBossChallengeRsp",
    [2005] = "QuickBossChallengeReq",
    [102005] = "QuickBossChallengeRsp",
    [2006] = "StartBossChallengeReq",
    [102006] = "StartBossChallengeRsp",
    [2007] = "RewardBossChallengeReq",
    [102007] = "RewardBossChallengeRsp",
    [2101] = "GetManorInfoReq",
    [102101] = "GetManorInfoRsp",
    [2102] = "ManorTriggerEventReq",
    [102102] = "ManorTriggerEventRsp",
    [2103] = "ManorReportPositionReq",
    [102103] = "ManorReportPositionRsp",
    [2104] = "ManorProcessEventReq",
    [102104] = "ManorProcessEventRsp",
    [2105] = "ManorFinishStoryReq",
    [102105] = "ManorFinishStoryRsp",
    [2106] = "GetManorInfoSimpleReq",
    [102106] = "GetManorInfoSimpleRsp",
    [2107] = "ManorReportEventPositionReq",
    [102107] = "ManorReportEventPositionRsp",
    [2108] = "ManorJumpStoryEventReq",
    [102108] = "ManorJumpStoryEventRsp",
    [2109] = "GetManorFeatureScheduleReq",
    [102109] = "GetManorFeatureScheduleRsp",
    [2110] = "ManorFetchRookieRewardReq",
    [102110] = "ManorFetchRookieRewardRsp",
    [2111] = "ManorGetActivityRolePlotEventReq",
    [102111] = "ManorGetActivityRolePlotEventRsp",
    [2112] = "ManorBatchProcessEventReq",
    [102112] = "ManorBatchProcessEventRsp",
    [2201] = "GetRogueInfoReq",
    [102201] = "GetRogueInfoRsp",
    [2202] = "StartRogueGameReq",
    [102202] = "StartRogueGameRsp",
    [2203] = "GetRogueStateInfoReq",
    [102203] = "GetRogueStateInfoRsp",
    [2204] = "EnterRogueNodeReq",
    [102204] = "EnterRogueNodeRsp",
    [2205] = "ExitRogueNodeReq",
    [102205] = "ExitRogueNodeRsp",
    [2206] = "EnhanceRogueCardAttribReq",
    [102206] = "EnhanceRogueCardAttribRsp",
    [2207] = "ActivateRogueTalentReq",
    [102207] = "ActivateRogueTalentRsp",
    [2208] = "BuyRogueNodeShopTreasureReq",
    [102208] = "BuyRogueNodeShopTreasureRsp",
    [2209] = "RefreshRogueNodeShopReq",
    [102209] = "RefreshRogueNodeShopRsp",
    [2210] = "FetchRogueNodeRewardReq",
    [102210] = "FetchRogueNodeRewardRsp",
    [2211] = "QuitRogueGameReq",
    [102211] = "QuitRogueGameRsp",
    [2212] = "GetRoguePicNewStateReq",
    [102212] = "GetRoguePicNewStateRsp",
    [2213] = "ClearRoguePicNewStateReq",
    [102213] = "ClearRoguePicNewStateRsp",
    [2214] = "GetRogueAllPicReq",
    [102214] = "GetRogueAllPicRsp",
    [2215] = "GetRogueTrendsReq",
    [102215] = "GetRogueTrendsRsp",
    [2216] = "FetchRogueThemeLevelRewardReq",
    [102216] = "FetchRogueThemeLevelRewardRsp",
    [2217] = "GetRogueTopScoreRecordReq",
    [102217] = "GetRogueTopScoreRecordRsp",
    [2218] = "FetchRogueTrendTaskRewardReq",
    [102218] = "FetchRogueTrendTaskRewardRsp",
    [2219] = "FinishRogueEventStoryReq",
    [102219] = "FinishRogueEventStoryRsp",
    [2220] = "RecruitRogueInitialCardReq",
    [102220] = "RecruitRogueInitialCardRsp",
    [2221] = "ChooseRogueInitialTreasureReq",
    [102221] = "ChooseRogueInitialTreasureRsp",
    [2222] = "FinishRogueEventKeyStoryReq",
    [102222] = "FinishRogueEventKeyStoryRsp",
    [2223] = "ChooseRogueEventBattleStoryReq",
    [102223] = "ChooseRogueEventBattleStoryRsp",
    [2224] = "SweepRogueReq",
    [102224] = "SweepRogueRsp",
    [2301] = "GetGuildWarScheduleReq",
    [102301] = "GetGuildWarScheduleRsp",
    [2302] = "GetGuildWarAllInfoReq",
    [102302] = "GetGuildWarAllInfoRsp",
    [2303] = "GetGuildWarCompensateFormationReq",
    [102303] = "GetGuildWarCompensateFormationRsp",
    [2304] = "LevelupGuildWarSkillReq",
    [102304] = "LevelupGuildWarSkillRsp",
    [2305] = "SetGuildWarAssistCardReq",
    [102305] = "SetGuildWarAssistCardRsp",
    [2306] = "GetGuildWarRecommendFormationReq",
    [102306] = "GetGuildWarRecommendFormationRsp",
    [2307] = "GetGuildWarRankReq",
    [102307] = "GetGuildWarRankRsp",
    [2308] = "RewardGuildWarTaskReq",
    [102308] = "RewardGuildWarTaskRsp",
    [2309] = "SetGuildWarSkillTeamReq",
    [102309] = "SetGuildWarSkillTeamRsp",
    [2310] = "GetGuildWarBattleRecordReq",
    [102310] = "GetGuildWarBattleRecordRsp",
    [2311] = "GetGuildWarInBattleCountReq",
    [102311] = "GetGuildWarInBattleCountRsp",
    [2401] = "GetSealWearInfoReq",
    [102401] = "GetSealWearInfoRsp",
    [2402] = "WearSealReq",
    [102402] = "WearSealRsp",
    [2403] = "TakeoffSealReq",
    [102403] = "TakeoffSealRsp",
    [2404] = "CompositeSealReq",
    [102404] = "CompositeSealRsp",
    [2405] = "SealBigLevelupReq",
    [102405] = "SealBigLevelupRsp",
    [2406] = "SealBigQualityUpReq",
    [102406] = "SealBigQualityUpRsp",
    [2407] = "SealBigAddUpReq",
    [102407] = "SealBigAddUpRsp",
    [2408] = "GetSealBigHookInfoReq",
    [102408] = "GetSealBigHookInfoRsp",
    [2409] = "FetchSealBigHookRewardReq",
    [102409] = "FetchSealBigHookRewardRsp",
    [2410] = "QuitSealBigHookChallengeReq",
    [102410] = "QuitSealBigHookChallengeRsp",
    [10001] = "GetMyGuildInfoReq",
    [110001] = "GetMyGuildInfoRsp",
    [10002] = "CreateGuildReq",
    [110002] = "CreateGuildRsp",
    [10003] = "SearchGuildByNameReq",
    [110003] = "SearchGuildByNameRsp",
    [10004] = "GetGuildMembersReq",
    [110004] = "GetGuildMembersRsp",
    [10005] = "ChangeGuildIconReq",
    [110005] = "ChangeGuildIconRsp",
    [10006] = "ChangeGuildNameReq",
    [110006] = "ChangeGuildNameRsp",
    [10007] = "ChangeGuildNoticeReq",
    [110007] = "ChangeGuildNoticeRsp",
    [10008] = "SetGuildLevelLimitReq",
    [110008] = "SetGuildLevelLimitRsp",
    [10009] = "ApplyJoinGuildReq",
    [110009] = "ApplyJoinGuildRsp",
    [10010] = "CancelJoinGuildReq",
    [110010] = "CancelJoinGuildRsp",
    [10011] = "ProcessGuildJoinApplyReq",
    [110011] = "ProcessGuildJoinApplyRsp",
    [10012] = "OperateGuildViceLeaderReq",
    [110012] = "OperateGuildViceLeaderRsp",
    [10013] = "KickOutGuildMemberReq",
    [110013] = "KickOutGuildMemberRsp",
    [10014] = "TransferGuildLeaderReq",
    [110014] = "TransferGuildLeaderRsp",
    [10015] = "DismissGuildReq",
    [110015] = "DismissGuildRsp",
    [10016] = "ExitGuildReq",
    [110016] = "ExitGuildRsp",
    [10017] = "GetRecommendGuildReq",
    [110017] = "GetRecommendGuildRsp",
    [10018] = "StartImpeachGuildLeaderReq",
    [110018] = "StartImpeachGuildLeaderRsp",
    [10019] = "VoteImpeachGuildLeaderReq",
    [110019] = "VoteImpeachGuildLeaderRsp",
    [10020] = "NotifyGuildConsumeEnergyReq",
    [110020] = "NotifyGuildConsumeEnergyRsp",
    [10021] = "QuickJoinGuildReq",
    [110021] = "QuickJoinGuildRsp",
    [10022] = "AutoJoinGuildReq",
    [110022] = "AutoJoinGuildRsp",
    [10023] = "GetUserGuildUidReq",
    [110023] = "GetUserGuildUidRsp",
    [10024] = "GetAppliedGuildsReq",
    [110024] = "GetAppliedGuildsRsp",
    [10025] = "SetGuildTargetReq",
    [110025] = "SetGuildTargetRsp",
    [10026] = "GetImpeachInfoReq",
    [110026] = "GetImpeachInfoRsp",
    [10027] = "GetMyGuildSimpleInfoReq",
    [110027] = "GetMyGuildSimpleInfoRsp",
    [10028] = "GetGuildPracticeRankReq",
    [110028] = "GetGuildPracticeRankRsp",
    [10029] = "GetGuildPracticeRecordReq",
    [110029] = "GetGuildPracticeRecordRsp",
    [10030] = "SaveGuildPracticeRecordReq",
    [110030] = "SaveGuildPracticeRecordRsp",
    [10031] = "SetGuildPolicyReq",
    [110031] = "SetGuildPolicyRsp",
    [10032] = "SearchGuildByConditionsReq",
    [110032] = "SearchGuildByConditionsRsp",
    [10033] = "GetGuildWarRankExtReq",
    [110033] = "GetGuildWarRankExtRsp",
    [10101] = "ArenaGetAllReq",
    [110101] = "ArenaGetAllRsp",
    [10102] = "ArenaGetMatchReq",
    [110102] = "ArenaGetMatchRsp",
    [10103] = "ArenaGetRecordReq",
    [110103] = "ArenaGetRecordRsp",
    [10104] = "ArenaFightReq",
    [110104] = "ArenaFightRsp",
    [10105] = "ArenaSwitchRankReq",
    [110105] = "ArenaSwitchRankRsp",
    [10106] = "ArenaSetDefenseReq",
    [110106] = "ArenaSetDefenseRsp",
    [10107] = "ArenaUpdateActorMirrorReq",
    [110107] = "ArenaUpdateActorMirrorRsp",
    [10108] = "ArenaGetTopRankReq",
    [110108] = "ArenaGetTopRankRsp",
    [10112] = "ArenaGetOpponentFormationReq",
    [110112] = "ArenaGetOpponentFormationRsp",
    [10113] = "ArenaGetRoleFormationReq",
    [110113] = "ArenaGetRoleFormationRsp",
    [10114] = "ArenaRefreshFightCDReq",
    [110114] = "ArenaRefreshFightCDRsp",
    [10115] = "ArenaResetFightNumReq",
    [110115] = "ArenaResetFightNumRsp",
    [10116] = "ArenaGetRankRewardReq",
    [110116] = "ArenaGetRankRewardRsp",
    [10117] = "ArenaGetAllDefenseReq",
    [110117] = "ArenaGetAllDefenseRsp",
    [10118] = "ArenaSaveBattleRecordReq",
    [110118] = "ArenaSaveBattleRecordRsp",
    [10201] = "GetShopInfoReq",
    [110201] = "GetShopInfoRsp",
    [10202] = "BuyShopGoodsReq",
    [110202] = "BuyShopGoodsRsp",
    [10203] = "RefreshShopGoodsReq",
    [110203] = "RefreshShopGoodsRsp",
    [10204] = "BuySealShopGoodsReq",
    [110204] = "BuySealShopGoodsRsp",
    [10301] = "GetBattlePassInfoReq",
    [110301] = "GetBattlePassInfoRsp",
    [10302] = "BattlePassTaskRefreshReq",
    [110302] = "BattlePassTaskRefreshRsp",
    [10303] = "BattlePassTaskRewardReq",
    [110303] = "BattlePassTaskRewardRsp",
    [10304] = "BattlePassBuyLevelReq",
    [110304] = "BattlePassBuyLevelRsp",
    [10305] = "BattlePassGetRewardReq",
    [110305] = "BattlePassGetRewardRsp",
    [10401] = "GetCarnivalInfoReq",
    [110401] = "GetCarnivalInfoRsp",
    [10402] = "CarnivalGetRewardReq",
    [110402] = "CarnivalGetRewardRsp",
    [10501] = "GetGachaInfoReq",
    [110501] = "GetGachaInfoRsp",
    [10502] = "DoGachaReq",
    [110502] = "DoGachaRsp",
    [10503] = "ExchangeGachaReq",
    [110503] = "ExchangeGachaRsp",
    [10504] = "GetGachaRecordsReq",
    [110504] = "GetGachaRecordsRsp",
    [10505] = "SetGachaTargetReq",
    [110505] = "SetGachaTargetRsp",
    [10506] = "GetGachaExtraReq",
    [110506] = "GetGachaExtraRsp",
    [10601] = "PurchaseBuyReq",
    [110601] = "PurchaseBuyRsp",
    [10602] = "PurchaseGetReq",
    [110602] = "PurchaseGetRsp",
    [10603] = "GetPurchaseProductsReq",
    [110603] = "GetPurchaseProductsRsp",
    [10604] = "FashionBuyReq",
    [110604] = "FashionBuyRsp",
    [10605] = "MonthCardDailyRewardReq",
    [110605] = "MonthCardDailyRewardRsp",
    [10606] = "BattlePassBuyReq",
    [110606] = "BattlePassBuyRsp",
    [10607] = "CreatePayOrderReq",
    [110607] = "CreatePayOrderRsp",
    [10608] = "CancelPayOrderReq",
    [110608] = "CancelPayOrderRsp",
    [10609] = "FinishPayOrderReq",
    [110609] = "FinishPayOrderRsp",
    [10610] = "FetchWeekPayRewardReq",
    [110610] = "FetchWeekPayRewardRsp",
    [10701] = "GetExpeditionInfoReq",
    [110701] = "GetExpeditionInfoRsp",
    [10703] = "GetExpeditionRewardReq",
    [110703] = "GetExpeditionRewardRsp",
    [10801] = "GetActivityAllReq",
    [110801] = "GetActivityAllRsp",
    [10802] = "ActivitySignInReq",
    [110802] = "ActivitySignInRsp",
    [10803] = "ActivityStageShopBuyReq",
    [110803] = "ActivityStageShopBuyRsp",
    [10804] = "ActivityStageTaskRewardReq",
    [110804] = "ActivityStageTaskRewardRsp",
    [10805] = "ActivitySearchReq",
    [110805] = "ActivitySearchRsp",
    [10806] = "GetAllBannerReq",
    [110806] = "GetAllBannerRsp",
    [10807] = "GetOpActivityByIdReq",
    [110807] = "GetOpActivityByIdRsp",
    [10808] = "GetAllRecommendImgReq",
    [110808] = "GetAllRecommendImgRsp",
    [10809] = "ActivityStageSignInReq",
    [110809] = "ActivityStageSignInRsp",
    [10810] = "ActivityGetMiniGameReq",
    [110810] = "ActivityGetMiniGameRsp",
    [10811] = "ActivityPlayMiniGameReq",
    [110811] = "ActivityPlayMiniGameRsp",
    [10812] = "ActivityRewardMiniGameReq",
    [110812] = "ActivityRewardMiniGameRsp",
    [10813] = "ActivityReturnSignInReq",
    [110813] = "ActivityReturnSignInRsp",
    [10814] = "GetActivityReviewInfoReq",
    [110814] = "GetActivityReviewInfoRsp",
    [10815] = "ActivityReviewShopBuyReq",
    [110815] = "ActivityReviewShopBuyRsp",
    [10816] = "ActivityReviewUnlockReq",
    [110816] = "ActivityReviewUnlockRsp",
    [10817] = "ActivityDoTurnTableReq",
    [110817] = "ActivityDoTurnTableRsp",
    [10818] = "ActivityTurnTableGetFreeReq",
    [110818] = "ActivityTurnTableGetFreeRsp",
    [10819] = "ActivityGetGameTopRankReq",
    [110819] = "ActivityGetGameTopRankRsp",
    [10820] = "ActivityDoTurnTableRoundReq",
    [110820] = "ActivityDoTurnTableRoundRsp",
    [10821] = "FetchAccumRechargeRewardReq",
    [110821] = "FetchAccumRechargeRewardRsp",
    [10822] = "ActivityReturnProSigninReq",
    [110822] = "ActivityReturnProSigninRsp",
    [10823] = "ActivityReturnProShopBuyReq",
    [110823] = "ActivityReturnProShopBuyRsp",
    [10824] = "ActivityReturnProTaskRewardReq",
    [110824] = "ActivityReturnProTaskRewardRsp",
    [10825] = "ActivityGetStageDropMultiReq",
    [110825] = "ActivityGetStageDropMultiRsp",
    [10901] = "GetPlantInfoReq",
    [110901] = "GetPlantInfoRsp",
    [10902] = "RewardFlowerReq",
    [110902] = "RewardFlowerRsp",
    [10903] = "RewardPlantTaskReq",
    [110903] = "RewardPlantTaskRsp",
    [11001] = "GetCommonTaskInfoReq",
    [111001] = "GetCommonTaskInfoRsp",
    [11002] = "CommonTaskReplaceReq",
    [111002] = "CommonTaskReplaceRsp",
    [11003] = "CommonTaskRewardReq",
    [111003] = "CommonTaskRewardRsp",
    [11004] = "GetTaskRefreshStampReq",
    [111004] = "GetTaskRefreshStampRsp",
    [12001] = "GetGiftInfoReq",
    [112001] = "GetGiftInfoRsp",
    [12002] = "BuyGiftReq",
    [112002] = "BuyGiftRsp",
    [12003] = "GetGiftRewardReq",
    [112003] = "GetGiftRewardRsp",
    [13001] = "GetSupplyInfoReq",
    [113001] = "GetSupplyInfoRsp",
    [13002] = "RewardSupplyReq",
    [113002] = "RewardSupplyRsp",
    [14001] = "BuffStageGetInfoReq",
    [114001] = "BuffStageGetInfoRsp",
    [14002] = "BuffStageRewardReq",
    [114002] = "BuffStageRewardRsp",
    [15001] = "GetCycleTaskInfoReq",
    [115001] = "GetCycleTaskInfoRsp",
    [15002] = "CycleTaskRewardReq",
    [115002] = "CycleTaskRewardRsp",
    [16001] = "GetAgreementInfoReq",
    [116001] = "GetAgreementInfoRsp",
    [16002] = "RewardAgreementReq",
    [116002] = "RewardAgreementRsp",
    [17001] = "GetDispatchInfoReq",
    [117001] = "GetDispatchInfoRsp",
    [17002] = "StartDispatchInfoReq",
    [117002] = "StartDispatchInfoRsp",
    [17003] = "RewardDispatchInfoReq",
    [117003] = "RewardDispatchInfoRsp",
    [17004] = "CancelDispatchInfoReq",
    [117004] = "CancelDispatchInfoRsp",
    [18001] = "GetLimitChallengeInfoReq",
    [118001] = "GetLimitChallengeInfoRsp",
    [18002] = "ResetLimitChallengeReq",
    [118002] = "ResetLimitChallengeRsp",
    [18003] = "RewardLimitChallengeTaskReq",
    [118003] = "RewardLimitChallengeTaskRsp"
  },
  MsgName = {
    DbQueryUniqueDataReq = "DbQueryUniqueDataReq",
    DbQueryUniqueDataRsp = "DbQueryUniqueDataRsp",
    DbQueryBatchDataReq = "DbQueryBatchDataReq",
    DbQueryBatchDataRsp = "DbQueryBatchDataRsp",
    DbDeleteDataReq = "DbDeleteDataReq",
    DbDeleteDataRsp = "DbDeleteDataRsp",
    DbInsertDataReq = "DbInsertDataReq",
    DbInsertDataRsp = "DbInsertDataRsp",
    DbUpdateDataReq = "DbUpdateDataReq",
    DbUpdateDataRsp = "DbUpdateDataRsp",
    DbUpdateBatchDataReq = "DbUpdateBatchDataReq",
    DbUpdateBatchDataRsp = "DbUpdateBatchDataRsp",
    DbCreateIndexReq = "DbCreateIndexReq",
    DbCreateIndexRsp = "DbCreateIndexRsp",
    AllocGameReq = "AllocGameReq",
    AllocGameRsp = "AllocGameRsp",
    DbQueryCountReq = "DbQueryCountReq",
    DbQueryCountReq = "DbQueryCountReq",
    DbTransactionOpReq = "DbTransactionOpReq",
    DbTransactionOpRsp = "DbTransactionOpRsp",
    DbUpsertDataReq = "DbUpsertDataReq",
    DbUpsertDataRsp = "DbUpsertDataRsp",
    DbTableDropReq = "DbTableDropReq",
    DbTableDropRsp = "DbTableDropRsp",
    DbQueryOneAndUpdateReq = "DbQueryOneAndUpdateReq",
    DbQueryOneAndUpdateRsp = "DbQueryOneAndUpdateRsp",
    GetResVersionReq = "GetResVersionReq",
    GetResVersionRsp = "GetResVersionRsp",
    SysActorInfoUpdatedReq = "SysActorInfoUpdatedReq",
    SysActorInfoUpdatedRsp = "SysActorInfoUpdatedRsp",
    SysRechargeOrderDeliveryReq = "SysRechargeOrderDeliveryReq",
    SysRechargeOrderDeliveryRsp = "SysRechargeOrderDeliveryRsp",
    IncrGuildExpReq = "IncrGuildExpReq",
    KickOffUserFromGameReq = "KickOffUserFromGameReq",
    KickOffUserFromGameRsp = "KickOffUserFromGameRsp",
    SysUpdateGuildMemberNameReq = "SysUpdateGuildMemberNameReq",
    SysRechargeOrderRefundReq = "SysRechargeOrderRefundReq",
    SysRechargeOrderRefundRsp = "SysRechargeOrderRefundRsp",
    SysGuildWarBattleSettleReq = "SysGuildWarBattleSettleReq",
    SysGuildWarBattleSettleRsp = "SysGuildWarBattleSettleRsp",
    SysGetGuildWarProgressReq = "SysGetGuildWarProgressReq",
    SysGetGuildWarProgressRsp = "SysGetGuildWarProgressRsp",
    SysAddGuildHeadReq = "SysAddGuildHeadReq",
    SysAddGuildHeadRsp = "SysAddGuildHeadRsp",
    SysCheckOwnEmojiReq = "SysCheckOwnEmojiReq",
    SysCheckOwnEmojiRsp = "SysCheckOwnEmojiRsp",
    SendGlobalMailReq = "SendGlobalMailReq",
    SendGlobalMailRsp = "SendGlobalMailRsp",
    SendPrivateMailReq = "SendPrivateMailReq",
    SendPrivateMailRsp = "SendPrivateMailRsp",
    FetchGlobalMailReq = "FetchGlobalMailReq",
    FetchGlobalMailRsp = "FetchGlobalMailRsp",
    GetAllOpFashionsReq = "GetAllOpFashionsReq",
    GetAllOpFashionsRsp = "GetAllOpFashionsRsp",
    GetAllGiftPackageReq = "GetAllGiftPackageReq",
    GetAllGiftPackageRsp = "GetAllGiftPackageRsp",
    GetAllOpActivityReq = "GetAllOpActivityReq",
    GetAllOpActivityRsp = "GetAllOpActivityRsp",
    GetAllShopLabelReq = "GetAllShopLabelReq",
    GetAllShopLabelRsp = "GetAllShopLabelRsp",
    CardUpdateNotify = "CardUpdateNotify",
    NewMessageNotify = "NewMessageNotify",
    RelationChangedNotify = "RelationChangedNotify",
    NewMailNotify = "NewMailNotify",
    KickOffNotify = "KickOffNotify",
    MutedBySystemNotify = "MutedBySystemNotify",
    ActorInfoUpdateNotify = "ActorInfoUpdateNotify",
    NewBadgeNotify = "NewBadgeNotify",
    RelationDelApplicantNotify = "RelationDelApplicantNotify",
    ManorEventUpdateNotify = "ManorEventUpdateNotify",
    GuildEventNotify = "GuildEventNotify",
    ManorConveyNotify = "ManorConveyNotify",
    ManorInfoUpdateNotify = "ManorInfoUpdateNotify",
    BattlePassBuySuccessNotify = "BattlePassBuySuccessNotify",
    BossChallengeHighScoreNotify = "BossChallengeHighScoreNotify",
    RogueCardUpdateNotify = "RogueCardUpdateNotify",
    FashionAddNotify = "FashionAddNotify",
    AuthTokenReq = "AuthTokenReq",
    AuthTokenRsp = "AuthTokenRsp",
    EnterGameReq = "EnterGameReq",
    EnterGameRsp = "EnterGameRsp",
    KickOffReq = "KickOffReq",
    KickOffRsp = "KickOffRsp",
    CreateActorReq = "CreateActorReq",
    CreateActorRsp = "CreateActorRsp",
    GetActorInfoReq = "GetActorInfoReq",
    GetActorInfoRsp = "GetActorInfoRsp",
    OfflineReq = "OfflineReq",
    OfflineRsp = "OfflineRsp",
    HeartBeatReq = "HeartBeatReq",
    HeartBeatRsp = "HeartBeatRsp",
    EventNotifyReq = "EventNotifyReq",
    EventNotifyRsp = "EventNotifyRsp",
    GetActorSignInReq = "GetActorSignInReq",
    GetActorSignInRsp = "GetActorSignInRsp",
    ActorSignInReq = "ActorSignInReq",
    ActorSignInRsp = "ActorSignInRsp",
    ActorGmReq = "ActorGmReq",
    ActorGmRsp = "ActorGmRsp",
    GetUnlockedFeaturesReq = "GetUnlockedFeaturesReq",
    GetUnlockedFeaturesRsp = "GetUnlockedFeaturesRsp",
    GetEmojiReq = "GetEmojiReq",
    GetEmojiRsp = "GetEmojiRsp",
    ReportLatestEmojiReq = "ReportLatestEmojiReq",
    ReportLatestEmojiRsp = "ReportLatestEmojiRsp",
    GetOtherDetailInfoReq = "GetOtherDetailInfoReq",
    GetOtherDetailInfoRsp = "GetOtherDetailInfoRsp",
    GetStoryListReq = "GetStoryListReq",
    GetStoryListRsp = "GetStoryListRsp",
    ChangeNameReq = "ChangeNameReq",
    ChangeNameRsp = "ChangeNameRsp",
    SaveSettingsReq = "SaveSettingsReq",
    SaveSettingsRsp = "SaveSettingsRsp",
    ChangeFaceReq = "ChangeFaceReq",
    ChangeFaceRsp = "ChangeFaceRsp",
    FinishGuideReq = "FinishGuideReq",
    FinishGuideRsp = "FinishGuideRsp",
    GetGuideProgressReq = "GetGuideProgressReq",
    GetGuideProgressRsp = "GetGuideProgressRsp",
    CheckFeatureOpenReq = "CheckFeatureOpenReq",
    CheckFeatureOpenRsp = "CheckFeatureOpenRsp",
    GetActorMirrorInfoReq = "GetActorMirrorInfoReq",
    GetActorMirrorInfoRsp = "GetActorMirrorInfoRsp",
    FinishPlotReq = "FinishPlotReq",
    FinishPlotRsp = "FinishPlotRsp",
    GetAllFinishedPlotsReq = "GetAllFinishedPlotsReq",
    GetAllFinishedPlotsRsp = "GetAllFinishedPlotsRsp",
    GetSelfDetailInfoReq = "GetSelfDetailInfoReq",
    GetSelfDetailInfoRsp = "GetSelfDetailInfoRsp",
    SetProfileDisplayCardsReq = "SetProfileDisplayCardsReq",
    SetProfileDisplayCardsRsp = "SetProfileDisplayCardsRsp",
    SetProfileShowResourceReq = "SetProfileShowResourceReq",
    SetProfileShowResourceRsp = "SetProfileShowResourceRsp",
    GetEnergyRecoverInfoReq = "GetEnergyRecoverInfoReq",
    GetEnergyRecoverInfoRsp = "GetEnergyRecoverInfoRsp",
    ChangePasswordReq = "ChangePasswordReq",
    ChangePasswordRsp = "ChangePasswordRsp",
    UpdateGuildOperateStateReq = "UpdateGuildOperateStateReq",
    UpdateGuildOperateStateRsp = "UpdateGuildOperateStateRsp",
    GetGuildOperateStateReq = "GetGuildOperateStateReq",
    GetGuildOperateStateRsp = "GetGuildOperateStateRsp",
    StoryOperateReportReq = "StoryOperateReportReq",
    StoryOperateReportRsp = "StoryOperateReportRsp",
    ReportOperateRecordReq = "ReportOperateRecordReq",
    ReportOperateRecordRsp = "ReportOperateRecordRsp",
    GetOperateRecordReq = "GetOperateRecordReq",
    GetOperateRecordRsp = "GetOperateRecordRsp",
    BatchSyncResReq = "BatchSyncResReq",
    BatchSyncResRsp = "BatchSyncResRsp",
    ChangeHeadReq = "ChangeHeadReq",
    ChangeHeadRsp = "ChangeHeadRsp",
    UseExchangeCodeReq = "UseExchangeCodeReq",
    UseExchangeCodeRsp = "UseExchangeCodeRsp",
    ClientAbnormalReportReq = "ClientAbnormalReportReq",
    ClientAbnormalReportRsp = "ClientAbnormalReportRsp",
    OperateStarSoundReq = "OperateStarSoundReq",
    OperateStarSoundRsp = "OperateStarSoundRsp",
    OperateSoundPlayListReq = "OperateSoundPlayListReq",
    OperateSoundPlayListRsp = "OperateSoundPlayListRsp",
    SetBirthdayReq = "SetBirthdayReq",
    SetBirthdayRsp = "SetBirthdayRsp",
    ActivateHandBookGrowReq = "ActivateHandBookGrowReq",
    ActivateHandBookGrowRsp = "ActivateHandBookGrowRsp",
    SendMessageReq = "SendMessageReq",
    SendMessageRsp = "SendMessageRsp",
    SyncMessageReq = "SyncMessageReq",
    SyncMessageRsp = "SyncMessageRsp",
    SwitchWorldGroupReq = "SwitchWorldGroupReq",
    SwitchWorldGroupRsp = "SwitchWorldGroupRsp",
    ReportUserReq = "ReportUserReq",
    ReportUserRsp = "ReportUserRsp",
    SyncPrivateHistoryMessageReq = "SyncPrivateHistoryMessageReq",
    SyncPrivateHistoryMessageRsp = "SyncPrivateHistoryMessageRsp",
    GetWorldLineInfoReq = "GetWorldLineInfoReq",
    GetWorldLineInfoRsp = "GetWorldLineInfoRsp",
    GetChannelNewestMessageReq = "GetChannelNewestMessageReq",
    GetChannelNewestMessageRsp = "GetChannelNewestMessageRsp",
    GetPrivateChattingTargetReq = "GetPrivateChattingTargetReq",
    GetPrivateChattingTargetRsp = "GetPrivateChattingTargetRsp",
    ChangePrivateChattingTargetReq = "ChangePrivateChattingTargetReq",
    ChangePrivateChattingTargetRsp = "ChangePrivateChattingTargetRsp",
    GetChatStateReq = "GetChatStateReq",
    GetChatStateRsp = "GetChatStateRsp",
    MarkMessageReadReq = "MarkMessageReadReq",
    MarkMessageReadRsp = "MarkMessageReadRsp",
    GetItemsReq = "GetItemsReq",
    GetItemsRsp = "GetItemsRsp",
    SyncItemsReq = "SyncItemsReq",
    SyncItemsRsp = "SyncItemsRsp",
    BuyCountResourceReq = "BuyCountResourceReq",
    BuyCountResourceRsp = "BuyCountResourceRsp",
    UseItemReq = "UseItemReq",
    UseItemRsp = "UseItemRsp",
    SaleItemReq = "SaleItemReq",
    SaleItemRsp = "SaleItemRsp",
    ConsumeItemReq = "ConsumeItemReq",
    ConsumeItemRsp = "ConsumeItemRsp",
    CheckItemEnoughReq = "CheckItemEnoughReq",
    CheckItemEnoughReq = "CheckItemEnoughReq",
    ExchangeCardFragmentReq = "ExchangeCardFragmentReq",
    ExchangeCardFragmentRsp = "ExchangeCardFragmentRsp",
    ExchangeEnergyReq = "ExchangeEnergyReq",
    ExchangeEnergyRsp = "ExchangeEnergyRsp",
    GetStoryMonsterListReq = "GetStoryMonsterListReq",
    GetStoryMonsterListRsp = "GetStoryMonsterListRsp",
    BatchUseItemsReq = "BatchUseItemsReq",
    BatchUseItemsRsp = "BatchUseItemsRsp",
    ClickStoryEventReportReq = "ClickStoryEventReportReq",
    ClickStoryEventReportRsp = "ClickStoryEventReportRsp",
    GetAllCardsReq = "GetAllCardsReq",
    GetAllCardsRsp = "GetAllCardsRsp",
    LevelupCardReq = "LevelupCardReq",
    LevelupCardRsp = "LevelupCardRsp",
    QualityUpCardReq = "QualityUpCardReq",
    QualityUpCardRsp = "QualityUpCardRsp",
    LevelupCardSkillReq = "LevelupCardSkillReq",
    LevelupCardSkillRsp = "LevelupCardSkillRsp",
    GradeUpCardReq = "GradeUpCardReq",
    GradeUpCardRsp = "GradeUpCardRsp",
    GetCardAllTeamReq = "GetCardAllTeamReq",
    GetCardAllTeamRsp = "GetCardAllTeamRsp",
    SetCardTeamReq = "SetCardTeamReq",
    SetCardTeamRsp = "SetCardTeamRsp",
    ChangeCardTeamNameReq = "ChangeCardTeamNameReq",
    ChangeCardTeamNameRsp = "ChangeCardTeamNameRsp",
    ChangeCardFashionReq = "ChangeCardFashionReq",
    ChangeCardFashionRsp = "ChangeCardFashionRsp",
    GetAllShowFashionReq = "GetAllShowFashionReq",
    GetAllShowFashionRsp = "GetAllShowFashionRsp",
    GetAllCardFashionReq = "GetAllCardFashionReq",
    GetAllCardFashionRsp = "GetAllCardFashionRsp",
    ClickCardStoryEventReportReq = "ClickCardStoryEventReportReq",
    ClickCardStoryEventReportRsp = "ClickCardStoryEventReportRsp",
    GetCardClickedStoryEventsReq = "GetCardClickedStoryEventsReq",
    GetCardClickedStoryEventsRsp = "GetCardClickedStoryEventsRsp",
    GetOtherCardInfoReq = "GetOtherCardInfoReq",
    GetOtherCardInfoRsp = "GetOtherCardInfoRsp",
    CardRobotTestInitialReq = "CardRobotTestInitialReq",
    CardRobotTestInitialRsp = "CardRobotTestInitialRsp",
    MultiGradeUpCardReq = "MultiGradeUpCardReq",
    MultiGradeUpCardRsp = "MultiGradeUpCardRsp",
    SetCardFocusReq = "SetCardFocusReq",
    SetCardFocusRsp = "SetCardFocusRsp",
    SetCardFashionShowReq = "SetCardFashionShowReq",
    SetCardFashionShowRsp = "SetCardFashionShowRsp",
    FetchHandBookRewardReq = "FetchHandBookRewardReq",
    FetchHandBookRewardRsp = "FetchHandBookRewardRsp",
    ActivateHandBookGrowReq = "ActivateHandBookGrowReq",
    ActivateHandBookGrowRsp = "ActivateHandBookGrowRsp",
    GetSceneInfoReq = "GetSceneInfoReq",
    GetSceneInfoRsp = "GetSceneInfoRsp",
    GetChapterStageReq = "GetChapterStageReq",
    GetChapterStageRsp = "GetChapterStageRsp",
    ChallengeStageReq = "ChallengeStageReq",
    ChallengeStageRsp = "ChallengeStageRsp",
    GetChallengeRecordReq = "GetChallengeRecordReq",
    GetChallengeRecordRsp = "GetChallengeRecordRsp",
    FetchSceneChapterRewardReq = "FetchSceneChapterRewardReq",
    FetchSceneChapterRewardRsp = "FetchSceneChapterRewardRsp",
    GetOpenStagesReq = "GetOpenStagesReq",
    GetOpenStagesRsp = "GetOpenStagesRsp",
    FetchSceneStageRewardReq = "FetchSceneStageRewardReq",
    FetchSceneStageRewardRsp = "FetchSceneStageRewardRsp",
    SweepStageReq = "SweepStageReq",
    SweepStageRsp = "SweepStageRsp",
    GetFeatureScheduleReq = "GetFeatureScheduleReq",
    GetFeatureScheduleRsp = "GetFeatureScheduleRsp",
    GetMultiDropActivityReq = "GetMultiDropActivityReq",
    GetMultiDropActivityRsp = "GetMultiDropActivityRsp",
    GetSceneRankReq = "GetSceneRankReq",
    GetSceneRankRsp = "GetSceneRankRsp",
    GetFriendsReq = "GetFriendsReq",
    GetFriendsRsp = "GetFriendsRsp",
    ApplyAddFriendReq = "ApplyAddFriendReq",
    ApplyAddFriendRsp = "ApplyAddFriendRsp",
    AgreeFriendApplyReq = "AgreeFriendApplyReq",
    AgreeFriendApplyRsp = "AgreeFriendApplyRsp",
    DisagreeFriendReq = "DisagreeFriendReq",
    DisagreeFriendRsp = "DisagreeFriendRsp",
    BlockTargetReq = "BlockTargetReq",
    BlockTargetRsp = "BlockTargetRsp",
    DeleteRelationReq = "DeleteRelationReq",
    DeleteRelationRsp = "DeleteRelationRsp",
    SearchTargetReq = "SearchTargetReq",
    SearchTargetRsp = "SearchTargetRsp",
    SetRelationRemarkReq = "SetRelationRemarkReq",
    SetRelationRemarkRsp = "SetRelationRemarkRsp",
    GetAllBlockTargetReq = "GetAllBlockTargetReq",
    GetAllBlockTargetRsp = "GetAllBlockTargetRsp",
    GetFriendFightRecordReq = "GetFriendFightRecordReq",
    GetFriendFightRecordRsp = "GetFriendFightRecordRsp",
    GetAllBadgesReq = "GetAllBadgesReq",
    GetAllBadgesRsp = "GetAllBadgesRsp",
    WearBadgeReq = "WearBadgeReq",
    WearBadgeRsp = "WearBadgeRsp",
    TakeoffBadgeReq = "TakeoffBadgeReq",
    TakeoffBadgeRsp = "TakeoffBadgeRsp",
    LevelupBadgeReq = "LevelupBadgeReq",
    LevelupBadgeRsp = "LevelupBadgeRsp",
    DecomposeBadgeReq = "DecomposeBadgeReq",
    DecomposeBadgeRsp = "DecomposeBadgeRsp",
    SetBadgeLockStateReq = "SetBadgeLockStateReq",
    SetBadgeLockStateRsp = "SetBadgeLockStateRsp",
    ClearBadgeNewTagReq = "ClearBadgeNewTagReq",
    ClearBadgeNewTagRsp = "ClearBadgeNewTagRsp",
    SwitchBadgeReq = "SwitchBadgeReq",
    SwitchBadgeRsp = "SwitchBadgeRsp",
    GetAllMailsReq = "GetAllMailsReq",
    GetAllMailsRsp = "GetAllMailsRsp",
    FetchMailAttachmentReq = "FetchMailAttachmentReq",
    FetchMailAttachmentRsp = "FetchMailAttachmentRsp",
    DeleteMailReq = "DeleteMailReq",
    DeleteMailRsp = "DeleteMailRsp",
    MarkMailReadReq = "MarkMailReadReq",
    MarkMailReadRsp = "MarkMailReadRsp",
    PrepareBattleReq = "PrepareBattleReq",
    PrepareBattleRsp = "PrepareBattleRsp",
    GetStagePrepareInfoReq = "GetStagePrepareInfoReq",
    GetStagePrepareInfoRsp = "GetStagePrepareInfoRsp",
    GetBattleRecordReq = "GetBattleRecordReq",
    GetBattleRecordRsp = "GetBattleRecordRsp",
    SaveStagePrepareInfoReq = "SaveStagePrepareInfoReq",
    SaveStagePrepareInfoRsp = "SaveStagePrepareInfoRsp",
    ExitStagePrepareReq = "ExitStagePrepareReq",
    ExitStagePrepareRsp = "ExitStagePrepareRsp",
    GetFriendDefenceFormationReq = "GetFriendDefenceFormationReq",
    GetFriendDefenceFormationRsp = "GetFriendDefenceFormationRsp",
    GetBossInfoReq = "GetBossInfoReq",
    GetBossInfoRsp = "GetBossInfoRsp",
    GetBossTopRankReq = "GetBossTopRankReq",
    GetBossTopRankRsp = "GetBossTopRankRsp",
    GetBossRankActorRecordReq = "GetBossRankActorRecordReq",
    GetBossRankActorRecordRsp = "GetBossRankActorRecordRsp",
    GiveupBossChallengeReq = "GiveupBossChallengeReq",
    GiveupBossChallengeRsp = "GiveupBossChallengeRsp",
    QuickBossChallengeReq = "QuickBossChallengeReq",
    QuickBossChallengeRsp = "QuickBossChallengeRsp",
    StartBossChallengeReq = "StartBossChallengeReq",
    StartBossChallengeRsp = "StartBossChallengeRsp",
    RewardBossChallengeReq = "RewardBossChallengeReq",
    RewardBossChallengeRsp = "RewardBossChallengeRsp",
    GetManorInfoReq = "GetManorInfoReq",
    GetManorInfoRsp = "GetManorInfoRsp",
    ManorTriggerEventReq = "ManorTriggerEventReq",
    ManorTriggerEventRsp = "ManorTriggerEventRsp",
    ManorReportPositionReq = "ManorReportPositionReq",
    ManorReportPositionRsp = "ManorReportPositionRsp",
    ManorProcessEventReq = "ManorProcessEventReq",
    ManorProcessEventRsp = "ManorProcessEventRsp",
    ManorFinishStoryReq = "ManorFinishStoryReq",
    ManorFinishStoryRsp = "ManorFinishStoryRsp",
    GetManorInfoSimpleReq = "GetManorInfoSimpleReq",
    GetManorInfoSimpleRsp = "GetManorInfoSimpleRsp",
    ManorReportEventPositionReq = "ManorReportEventPositionReq",
    ManorReportEventPositionRsp = "ManorReportEventPositionRsp",
    ManorJumpStoryEventReq = "ManorJumpStoryEventReq",
    ManorJumpStoryEventRsp = "ManorJumpStoryEventRsp",
    GetManorFeatureScheduleReq = "GetManorFeatureScheduleReq",
    GetManorFeatureScheduleRsp = "GetManorFeatureScheduleRsp",
    ManorFetchRookieRewardReq = "ManorFetchRookieRewardReq",
    ManorFetchRookieRewardRsp = "ManorFetchRookieRewardRsp",
    ManorGetActivityRolePlotEventReq = "ManorGetActivityRolePlotEventReq",
    ManorGetActivityRolePlotEventRsp = "ManorGetActivityRolePlotEventRsp",
    ManorBatchProcessEventReq = "ManorBatchProcessEventReq",
    ManorBatchProcessEventRsp = "ManorBatchProcessEventRsp",
    GetRogueInfoReq = "GetRogueInfoReq",
    GetRogueInfoRsp = "GetRogueInfoRsp",
    StartRogueGameReq = "StartRogueGameReq",
    StartRogueGameRsp = "StartRogueGameRsp",
    GetRogueStateInfoReq = "GetRogueStateInfoReq",
    GetRogueStateInfoRsp = "GetRogueStateInfoRsp",
    EnterRogueNodeReq = "EnterRogueNodeReq",
    EnterRogueNodeRsp = "EnterRogueNodeRsp",
    ExitRogueNodeReq = "ExitRogueNodeReq",
    ExitRogueNodeRsp = "ExitRogueNodeRsp",
    EnhanceRogueCardAttribReq = "EnhanceRogueCardAttribReq",
    EnhanceRogueCardAttribRsp = "EnhanceRogueCardAttribRsp",
    ActivateRogueTalentReq = "ActivateRogueTalentReq",
    ActivateRogueTalentRsp = "ActivateRogueTalentRsp",
    BuyRogueNodeShopTreasureReq = "BuyRogueNodeShopTreasureReq",
    BuyRogueNodeShopTreasureRsp = "BuyRogueNodeShopTreasureRsp",
    RefreshRogueNodeShopReq = "RefreshRogueNodeShopReq",
    RefreshRogueNodeShopRsp = "RefreshRogueNodeShopRsp",
    FetchRogueNodeRewardReq = "FetchRogueNodeRewardReq",
    FetchRogueNodeRewardRsp = "FetchRogueNodeRewardRsp",
    QuitRogueGameReq = "QuitRogueGameReq",
    QuitRogueGameRsp = "QuitRogueGameRsp",
    GetRoguePicNewStateReq = "GetRoguePicNewStateReq",
    GetRoguePicNewStateRsp = "GetRoguePicNewStateRsp",
    ClearRoguePicNewStateReq = "ClearRoguePicNewStateReq",
    ClearRoguePicNewStateRsp = "ClearRoguePicNewStateRsp",
    GetRogueAllPicReq = "GetRogueAllPicReq",
    GetRogueAllPicRsp = "GetRogueAllPicRsp",
    GetRogueTrendsReq = "GetRogueTrendsReq",
    GetRogueTrendsRsp = "GetRogueTrendsRsp",
    FetchRogueThemeLevelRewardReq = "FetchRogueThemeLevelRewardReq",
    FetchRogueThemeLevelRewardRsp = "FetchRogueThemeLevelRewardRsp",
    GetRogueTopScoreRecordReq = "GetRogueTopScoreRecordReq",
    GetRogueTopScoreRecordRsp = "GetRogueTopScoreRecordRsp",
    FetchRogueTrendTaskRewardReq = "FetchRogueTrendTaskRewardReq",
    FetchRogueTrendTaskRewardRsp = "FetchRogueTrendTaskRewardRsp",
    FinishRogueEventStoryReq = "FinishRogueEventStoryReq",
    FinishRogueEventStoryRsp = "FinishRogueEventStoryRsp",
    RecruitRogueInitialCardReq = "RecruitRogueInitialCardReq",
    RecruitRogueInitialCardRsp = "RecruitRogueInitialCardRsp",
    ChooseRogueInitialTreasureReq = "ChooseRogueInitialTreasureReq",
    ChooseRogueInitialTreasureRsp = "ChooseRogueInitialTreasureRsp",
    FinishRogueEventKeyStoryReq = "FinishRogueEventKeyStoryReq",
    FinishRogueEventKeyStoryRsp = "FinishRogueEventKeyStoryRsp",
    ChooseRogueEventBattleStoryReq = "ChooseRogueEventBattleStoryReq",
    ChooseRogueEventBattleStoryRsp = "ChooseRogueEventBattleStoryRsp",
    SweepRogueReq = "SweepRogueReq",
    SweepRogueRsp = "SweepRogueRsp",
    GetGuildWarScheduleReq = "GetGuildWarScheduleReq",
    GetGuildWarScheduleRsp = "GetGuildWarScheduleRsp",
    GetGuildWarAllInfoReq = "GetGuildWarAllInfoReq",
    GetGuildWarAllInfoRsp = "GetGuildWarAllInfoRsp",
    GetGuildWarCompensateFormationReq = "GetGuildWarCompensateFormationReq",
    GetGuildWarCompensateFormationRsp = "GetGuildWarCompensateFormationRsp",
    LevelupGuildWarSkillReq = "LevelupGuildWarSkillReq",
    LevelupGuildWarSkillRsp = "LevelupGuildWarSkillRsp",
    SetGuildWarAssistCardReq = "SetGuildWarAssistCardReq",
    SetGuildWarAssistCardRsp = "SetGuildWarAssistCardRsp",
    GetGuildWarRecommendFormationReq = "GetGuildWarRecommendFormationReq",
    GetGuildWarRecommendFormationRsp = "GetGuildWarRecommendFormationRsp",
    GetGuildWarRankReq = "GetGuildWarRankReq",
    GetGuildWarRankRsp = "GetGuildWarRankRsp",
    RewardGuildWarTaskReq = "RewardGuildWarTaskReq",
    RewardGuildWarTaskRsp = "RewardGuildWarTaskRsp",
    SetGuildWarSkillTeamReq = "SetGuildWarSkillTeamReq",
    SetGuildWarSkillTeamRsp = "SetGuildWarSkillTeamRsp",
    GetGuildWarBattleRecordReq = "GetGuildWarBattleRecordReq",
    GetGuildWarBattleRecordRsp = "GetGuildWarBattleRecordRsp",
    GetGuildWarInBattleCountReq = "GetGuildWarInBattleCountReq",
    GetGuildWarInBattleCountRsp = "GetGuildWarInBattleCountRsp",
    GetSealWearInfoReq = "GetSealWearInfoReq",
    GetSealWearInfoRsp = "GetSealWearInfoRsp",
    WearSealReq = "WearSealReq",
    WearSealRsp = "WearSealRsp",
    TakeoffSealReq = "TakeoffSealReq",
    TakeoffSealRsp = "TakeoffSealRsp",
    CompositeSealReq = "CompositeSealReq",
    CompositeSealRsp = "CompositeSealRsp",
    SealBigLevelupReq = "SealBigLevelupReq",
    SealBigLevelupRsp = "SealBigLevelupRsp",
    SealBigQualityUpReq = "SealBigQualityUpReq",
    SealBigQualityUpRsp = "SealBigQualityUpRsp",
    SealBigAddUpReq = "SealBigAddUpReq",
    SealBigAddUpRsp = "SealBigAddUpRsp",
    GetSealBigHookInfoReq = "GetSealBigHookInfoReq",
    GetSealBigHookInfoRsp = "GetSealBigHookInfoRsp",
    FetchSealBigHookRewardReq = "FetchSealBigHookRewardReq",
    FetchSealBigHookRewardRsp = "FetchSealBigHookRewardRsp",
    QuitSealBigHookChallengeReq = "QuitSealBigHookChallengeReq",
    QuitSealBigHookChallengeRsp = "QuitSealBigHookChallengeRsp",
    GetMyGuildInfoReq = "GetMyGuildInfoReq",
    GetMyGuildInfoRsp = "GetMyGuildInfoRsp",
    CreateGuildReq = "CreateGuildReq",
    CreateGuildRsp = "CreateGuildRsp",
    SearchGuildByNameReq = "SearchGuildByNameReq",
    SearchGuildByNameRsp = "SearchGuildByNameRsp",
    GetGuildMembersReq = "GetGuildMembersReq",
    GetGuildMembersRsp = "GetGuildMembersRsp",
    ChangeGuildIconReq = "ChangeGuildIconReq",
    ChangeGuildIconRsp = "ChangeGuildIconRsp",
    ChangeGuildNameReq = "ChangeGuildNameReq",
    ChangeGuildNameRsp = "ChangeGuildNameRsp",
    ChangeGuildNoticeReq = "ChangeGuildNoticeReq",
    ChangeGuildNoticeRsp = "ChangeGuildNoticeRsp",
    SetGuildLevelLimitReq = "SetGuildLevelLimitReq",
    SetGuildLevelLimitRsp = "SetGuildLevelLimitRsp",
    ApplyJoinGuildReq = "ApplyJoinGuildReq",
    ApplyJoinGuildRsp = "ApplyJoinGuildRsp",
    CancelJoinGuildReq = "CancelJoinGuildReq",
    CancelJoinGuildRsp = "CancelJoinGuildRsp",
    ProcessGuildJoinApplyReq = "ProcessGuildJoinApplyReq",
    ProcessGuildJoinApplyRsp = "ProcessGuildJoinApplyRsp",
    OperateGuildViceLeaderReq = "OperateGuildViceLeaderReq",
    OperateGuildViceLeaderRsp = "OperateGuildViceLeaderRsp",
    KickOutGuildMemberReq = "KickOutGuildMemberReq",
    KickOutGuildMemberRsp = "KickOutGuildMemberRsp",
    TransferGuildLeaderReq = "TransferGuildLeaderReq",
    TransferGuildLeaderRsp = "TransferGuildLeaderRsp",
    DismissGuildReq = "DismissGuildReq",
    DismissGuildRsp = "DismissGuildRsp",
    ExitGuildReq = "ExitGuildReq",
    ExitGuildRsp = "ExitGuildRsp",
    GetRecommendGuildReq = "GetRecommendGuildReq",
    GetRecommendGuildRsp = "GetRecommendGuildRsp",
    StartImpeachGuildLeaderReq = "StartImpeachGuildLeaderReq",
    StartImpeachGuildLeaderRsp = "StartImpeachGuildLeaderRsp",
    VoteImpeachGuildLeaderReq = "VoteImpeachGuildLeaderReq",
    VoteImpeachGuildLeaderRsp = "VoteImpeachGuildLeaderRsp",
    NotifyGuildConsumeEnergyReq = "NotifyGuildConsumeEnergyReq",
    NotifyGuildConsumeEnergyRsp = "NotifyGuildConsumeEnergyRsp",
    QuickJoinGuildReq = "QuickJoinGuildReq",
    QuickJoinGuildRsp = "QuickJoinGuildRsp",
    AutoJoinGuildReq = "AutoJoinGuildReq",
    AutoJoinGuildRsp = "AutoJoinGuildRsp",
    GetUserGuildUidReq = "GetUserGuildUidReq",
    GetUserGuildUidRsp = "GetUserGuildUidRsp",
    GetAppliedGuildsReq = "GetAppliedGuildsReq",
    GetAppliedGuildsRsp = "GetAppliedGuildsRsp",
    SetGuildTargetReq = "SetGuildTargetReq",
    SetGuildTargetRsp = "SetGuildTargetRsp",
    GetImpeachInfoReq = "GetImpeachInfoReq",
    GetImpeachInfoRsp = "GetImpeachInfoRsp",
    GetMyGuildSimpleInfoReq = "GetMyGuildSimpleInfoReq",
    GetMyGuildSimpleInfoRsp = "GetMyGuildSimpleInfoRsp",
    GetGuildPracticeRankReq = "GetGuildPracticeRankReq",
    GetGuildPracticeRankRsp = "GetGuildPracticeRankRsp",
    GetGuildPracticeRecordReq = "GetGuildPracticeRecordReq",
    GetGuildPracticeRecordRsp = "GetGuildPracticeRecordRsp",
    SaveGuildPracticeRecordReq = "SaveGuildPracticeRecordReq",
    SaveGuildPracticeRecordRsp = "SaveGuildPracticeRecordRsp",
    SetGuildPolicyReq = "SetGuildPolicyReq",
    SetGuildPolicyRsp = "SetGuildPolicyRsp",
    SearchGuildByConditionsReq = "SearchGuildByConditionsReq",
    SearchGuildByConditionsRsp = "SearchGuildByConditionsRsp",
    GetGuildWarRankExtReq = "GetGuildWarRankExtReq",
    GetGuildWarRankExtRsp = "GetGuildWarRankExtRsp",
    ArenaGetAllReq = "ArenaGetAllReq",
    ArenaGetAllRsp = "ArenaGetAllRsp",
    ArenaGetMatchReq = "ArenaGetMatchReq",
    ArenaGetMatchRsp = "ArenaGetMatchRsp",
    ArenaGetRecordReq = "ArenaGetRecordReq",
    ArenaGetRecordRsp = "ArenaGetRecordRsp",
    ArenaFightReq = "ArenaFightReq",
    ArenaFightRsp = "ArenaFightRsp",
    ArenaSwitchRankReq = "ArenaSwitchRankReq",
    ArenaSwitchRankRsp = "ArenaSwitchRankRsp",
    ArenaSetDefenseReq = "ArenaSetDefenseReq",
    ArenaSetDefenseRsp = "ArenaSetDefenseRsp",
    ArenaUpdateActorMirrorReq = "ArenaUpdateActorMirrorReq",
    ArenaUpdateActorMirrorRsp = "ArenaUpdateActorMirrorRsp",
    ArenaGetTopRankReq = "ArenaGetTopRankReq",
    ArenaGetTopRankRsp = "ArenaGetTopRankRsp",
    ArenaGetOpponentFormationReq = "ArenaGetOpponentFormationReq",
    ArenaGetOpponentFormationRsp = "ArenaGetOpponentFormationRsp",
    ArenaGetRoleFormationReq = "ArenaGetRoleFormationReq",
    ArenaGetRoleFormationRsp = "ArenaGetRoleFormationRsp",
    ArenaRefreshFightCDReq = "ArenaRefreshFightCDReq",
    ArenaRefreshFightCDRsp = "ArenaRefreshFightCDRsp",
    ArenaResetFightNumReq = "ArenaResetFightNumReq",
    ArenaResetFightNumRsp = "ArenaResetFightNumRsp",
    ArenaGetRankRewardReq = "ArenaGetRankRewardReq",
    ArenaGetRankRewardRsp = "ArenaGetRankRewardRsp",
    ArenaGetAllDefenseReq = "ArenaGetAllDefenseReq",
    ArenaGetAllDefenseRsp = "ArenaGetAllDefenseRsp",
    ArenaSaveBattleRecordReq = "ArenaSaveBattleRecordReq",
    ArenaSaveBattleRecordRsp = "ArenaSaveBattleRecordRsp",
    GetShopInfoReq = "GetShopInfoReq",
    GetShopInfoRsp = "GetShopInfoRsp",
    BuyShopGoodsReq = "BuyShopGoodsReq",
    BuyShopGoodsRsp = "BuyShopGoodsRsp",
    RefreshShopGoodsReq = "RefreshShopGoodsReq",
    RefreshShopGoodsRsp = "RefreshShopGoodsRsp",
    BuySealShopGoodsReq = "BuySealShopGoodsReq",
    BuySealShopGoodsRsp = "BuySealShopGoodsRsp",
    GetBattlePassInfoReq = "GetBattlePassInfoReq",
    GetBattlePassInfoRsp = "GetBattlePassInfoRsp",
    BattlePassTaskRefreshReq = "BattlePassTaskRefreshReq",
    BattlePassTaskRefreshRsp = "BattlePassTaskRefreshRsp",
    BattlePassTaskRewardReq = "BattlePassTaskRewardReq",
    BattlePassTaskRewardRsp = "BattlePassTaskRewardRsp",
    BattlePassBuyLevelReq = "BattlePassBuyLevelReq",
    BattlePassBuyLevelRsp = "BattlePassBuyLevelRsp",
    BattlePassGetRewardReq = "BattlePassGetRewardReq",
    BattlePassGetRewardRsp = "BattlePassGetRewardRsp",
    GetCarnivalInfoReq = "GetCarnivalInfoReq",
    GetCarnivalInfoRsp = "GetCarnivalInfoRsp",
    CarnivalGetRewardReq = "CarnivalGetRewardReq",
    CarnivalGetRewardRsp = "CarnivalGetRewardRsp",
    GetGachaInfoReq = "GetGachaInfoReq",
    GetGachaInfoRsp = "GetGachaInfoRsp",
    DoGachaReq = "DoGachaReq",
    DoGachaRsp = "DoGachaRsp",
    ExchangeGachaReq = "ExchangeGachaReq",
    ExchangeGachaRsp = "ExchangeGachaRsp",
    GetGachaRecordsReq = "GetGachaRecordsReq",
    GetGachaRecordsRsp = "GetGachaRecordsRsp",
    SetGachaTargetReq = "SetGachaTargetReq",
    SetGachaTargetRsp = "SetGachaTargetRsp",
    GetGachaExtraReq = "GetGachaExtraReq",
    GetGachaExtraRsp = "GetGachaExtraRsp",
    PurchaseBuyReq = "PurchaseBuyReq",
    PurchaseBuyRsp = "PurchaseBuyRsp",
    PurchaseGetReq = "PurchaseGetReq",
    PurchaseGetRsp = "PurchaseGetRsp",
    GetPurchaseProductsReq = "GetPurchaseProductsReq",
    GetPurchaseProductsRsp = "GetPurchaseProductsRsp",
    FashionBuyReq = "FashionBuyReq",
    FashionBuyRsp = "FashionBuyRsp",
    MonthCardDailyRewardReq = "MonthCardDailyRewardReq",
    MonthCardDailyRewardRsp = "MonthCardDailyRewardRsp",
    BattlePassBuyReq = "BattlePassBuyReq",
    BattlePassBuyRsp = "BattlePassBuyRsp",
    CreatePayOrderReq = "CreatePayOrderReq",
    CreatePayOrderRsp = "CreatePayOrderRsp",
    CancelPayOrderReq = "CancelPayOrderReq",
    CancelPayOrderRsp = "CancelPayOrderRsp",
    FinishPayOrderReq = "FinishPayOrderReq",
    FinishPayOrderRsp = "FinishPayOrderRsp",
    FetchWeekPayRewardReq = "FetchWeekPayRewardReq",
    FetchWeekPayRewardRsp = "FetchWeekPayRewardRsp",
    GetExpeditionInfoReq = "GetExpeditionInfoReq",
    GetExpeditionInfoRsp = "GetExpeditionInfoRsp",
    GetExpeditionRewardReq = "GetExpeditionRewardReq",
    GetExpeditionRewardRsp = "GetExpeditionRewardRsp",
    GetActivityAllReq = "GetActivityAllReq",
    GetActivityAllRsp = "GetActivityAllRsp",
    ActivitySignInReq = "ActivitySignInReq",
    ActivitySignInRsp = "ActivitySignInRsp",
    ActivityStageShopBuyReq = "ActivityStageShopBuyReq",
    ActivityStageShopBuyRsp = "ActivityStageShopBuyRsp",
    ActivityStageTaskRewardReq = "ActivityStageTaskRewardReq",
    ActivityStageTaskRewardRsp = "ActivityStageTaskRewardRsp",
    ActivitySearchReq = "ActivitySearchReq",
    ActivitySearchRsp = "ActivitySearchRsp",
    GetAllBannerReq = "GetAllBannerReq",
    GetAllBannerRsp = "GetAllBannerRsp",
    GetOpActivityByIdReq = "GetOpActivityByIdReq",
    GetOpActivityByIdRsp = "GetOpActivityByIdRsp",
    GetAllRecommendImgReq = "GetAllRecommendImgReq",
    GetAllRecommendImgRsp = "GetAllRecommendImgRsp",
    ActivityStageSignInReq = "ActivityStageSignInReq",
    ActivityStageSignInRsp = "ActivityStageSignInRsp",
    ActivityGetMiniGameReq = "ActivityGetMiniGameReq",
    ActivityGetMiniGameRsp = "ActivityGetMiniGameRsp",
    ActivityPlayMiniGameReq = "ActivityPlayMiniGameReq",
    ActivityPlayMiniGameRsp = "ActivityPlayMiniGameRsp",
    ActivityRewardMiniGameReq = "ActivityRewardMiniGameReq",
    ActivityRewardMiniGameRsp = "ActivityRewardMiniGameRsp",
    ActivityReturnSignInReq = "ActivityReturnSignInReq",
    ActivityReturnSignInRsp = "ActivityReturnSignInRsp",
    GetActivityReviewInfoReq = "GetActivityReviewInfoReq",
    GetActivityReviewInfoRsp = "GetActivityReviewInfoRsp",
    ActivityReviewShopBuyReq = "ActivityReviewShopBuyReq",
    ActivityReviewShopBuyRsp = "ActivityReviewShopBuyRsp",
    ActivityReviewUnlockReq = "ActivityReviewUnlockReq",
    ActivityReviewUnlockRsp = "ActivityReviewUnlockRsp",
    ActivityDoTurnTableReq = "ActivityDoTurnTableReq",
    ActivityDoTurnTableRsp = "ActivityDoTurnTableRsp",
    ActivityTurnTableGetFreeReq = "ActivityTurnTableGetFreeReq",
    ActivityTurnTableGetFreeRsp = "ActivityTurnTableGetFreeRsp",
    ActivityGetGameTopRankReq = "ActivityGetGameTopRankReq",
    ActivityGetGameTopRankRsp = "ActivityGetGameTopRankRsp",
    ActivityDoTurnTableRoundReq = "ActivityDoTurnTableRoundReq",
    ActivityDoTurnTableRoundRsp = "ActivityDoTurnTableRoundRsp",
    FetchAccumRechargeRewardReq = "FetchAccumRechargeRewardReq",
    FetchAccumRechargeRewardRsp = "FetchAccumRechargeRewardRsp",
    ActivityReturnProSigninReq = "ActivityReturnProSigninReq",
    ActivityReturnProSigninRsp = "ActivityReturnProSigninRsp",
    ActivityReturnProShopBuyReq = "ActivityReturnProShopBuyReq",
    ActivityReturnProShopBuyRsp = "ActivityReturnProShopBuyRsp",
    ActivityReturnProTaskRewardReq = "ActivityReturnProTaskRewardReq",
    ActivityReturnProTaskRewardRsp = "ActivityReturnProTaskRewardRsp",
    ActivityGetStageDropMultiReq = "ActivityGetStageDropMultiReq",
    ActivityGetStageDropMultiRsp = "ActivityGetStageDropMultiRsp",
    GetPlantInfoReq = "GetPlantInfoReq",
    GetPlantInfoRsp = "GetPlantInfoRsp",
    RewardFlowerReq = "RewardFlowerReq",
    RewardFlowerRsp = "RewardFlowerRsp",
    RewardPlantTaskReq = "RewardPlantTaskReq",
    RewardPlantTaskRsp = "RewardPlantTaskRsp",
    GetCommonTaskInfoReq = "GetCommonTaskInfoReq",
    GetCommonTaskInfoRsp = "GetCommonTaskInfoRsp",
    CommonTaskReplaceReq = "CommonTaskReplaceReq",
    CommonTaskReplaceRsp = "CommonTaskReplaceRsp",
    CommonTaskRewardReq = "CommonTaskRewardReq",
    CommonTaskRewardRsp = "CommonTaskRewardRsp",
    GetTaskRefreshStampReq = "GetTaskRefreshStampReq",
    GetTaskRefreshStampRsp = "GetTaskRefreshStampRsp",
    GetGiftInfoReq = "GetGiftInfoReq",
    GetGiftInfoRsp = "GetGiftInfoRsp",
    BuyGiftReq = "BuyGiftReq",
    BuyGiftRsp = "BuyGiftRsp",
    GetGiftRewardReq = "GetGiftRewardReq",
    GetGiftRewardRsp = "GetGiftRewardRsp",
    GetSupplyInfoReq = "GetSupplyInfoReq",
    GetSupplyInfoRsp = "GetSupplyInfoRsp",
    RewardSupplyReq = "RewardSupplyReq",
    RewardSupplyRsp = "RewardSupplyRsp",
    BuffStageGetInfoReq = "BuffStageGetInfoReq",
    BuffStageGetInfoRsp = "BuffStageGetInfoRsp",
    BuffStageRewardReq = "BuffStageRewardReq",
    BuffStageRewardRsp = "BuffStageRewardRsp",
    GetCycleTaskInfoReq = "GetCycleTaskInfoReq",
    GetCycleTaskInfoRsp = "GetCycleTaskInfoRsp",
    CycleTaskRewardReq = "CycleTaskRewardReq",
    CycleTaskRewardRsp = "CycleTaskRewardRsp",
    GetAgreementInfoReq = "GetAgreementInfoReq",
    GetAgreementInfoRsp = "GetAgreementInfoRsp",
    RewardAgreementReq = "RewardAgreementReq",
    RewardAgreementRsp = "RewardAgreementRsp",
    GetDispatchInfoReq = "GetDispatchInfoReq",
    GetDispatchInfoRsp = "GetDispatchInfoRsp",
    StartDispatchInfoReq = "StartDispatchInfoReq",
    StartDispatchInfoRsp = "StartDispatchInfoRsp",
    RewardDispatchInfoReq = "RewardDispatchInfoReq",
    RewardDispatchInfoRsp = "RewardDispatchInfoRsp",
    CancelDispatchInfoReq = "CancelDispatchInfoReq",
    CancelDispatchInfoRsp = "CancelDispatchInfoRsp",
    GetLimitChallengeInfoReq = "GetLimitChallengeInfoReq",
    GetLimitChallengeInfoRsp = "GetLimitChallengeInfoRsp",
    ResetLimitChallengeReq = "ResetLimitChallengeReq",
    ResetLimitChallengeRsp = "ResetLimitChallengeRsp",
    RewardLimitChallengeTaskReq = "RewardLimitChallengeTaskReq",
    RewardLimitChallengeTaskRsp = "RewardLimitChallengeTaskRsp"
  }
}
ProtoEnum = {
  USER_INFO_TYPE = {
    UIT_NONE = 0,
    UIT_UIN = 1,
    UIT_ACCOUNT = 2,
    UIT_NAME = 3
  },
  ACTIVITY_GACHA_TYPE = {
    AGT_NONE = 0,
    AGT_OPNE = 1,
    AGT_FREE = 2
  },
  WEEK_PAY_REWARD_TYPE = {
    WPRT_NONE = 0,
    WPRT_CONSUME_BIND_DIAMOND = 1,
    WPRT_RECHARGE = 2
  },
  SpecialItemId = {
    SID_NONE = 0,
    SID_BIND_DIAMOND = 21000001,
    SID_DIAMOND = 21000002,
    SID_GOLD = 21000003,
    SID_ENERGY = 21000004,
    SID_ROLE_EXP = 21000005,
    SID_BATTLEPASS_EXP = 21000007,
    SID_GACHA1 = 21100001,
    SID_GACHA10 = 21100002,
    SID_UP_GACHA1 = 21100004,
    SID_UP_GACHA10 = 21100003,
    SID_MANOR_ACTION_VALUE = 21000009,
    SID_MANOR_PLOT_VALUE = 21000013,
    SID_BOSS_CHALLENGE = 21000014,
    SID_GUILD_EXP = 21000016,
    SID_MONTH_CARD_ITEM = 21000017,
    SID_BATTLE_PASS_101 = 21000018,
    SID_BATTLE_PASS_102 = 21000019,
    SID_SHOP_TOKEN_A = 21000201,
    SID_SHOP_TOKEN_B = 21000202,
    SID_DISPATCH_EXP = 21000022,
    SID_GUILD_WAR_SKILL_POINT = 21000021,
    SID_SEAL_HOOK_EXP = 21000030
  },
  STAGE_TYPE = {
    ST_NONE = 0,
    DISPOSABLE = 1,
    REPEAT = 2,
    PLOT = 3,
    BOX = 4,
    EXPEDITION_MONSTER = 5,
    EXPEDITION_MIRROR = 6
  },
  MANOR_EVENT_TYPE = {
    MET_NONE = 0,
    MET_INITIATIVE = 1,
    MET_ROLE_PLOT = 2,
    MET_DAILY_RANDOM = 3,
    MET_FIX_BUILDING = 4,
    MET_BARRIER = 6,
    MET_BGM_PIC = 7,
    MET_MONSTER_PIC = 8,
    MET_ACTIVITY_ROLE_PLOT = 10,
    MET_EXPEDITION = 11,
    MET_BOSS = 12,
    MET_ROGUE = 13,
    MET_CONVEY = 14,
    MET_BUFF_STAGE = 15,
    MET_GROUP_REFRESH = 21
  },
  ARENA_SEASON_STAT = {
    CLOSE = 0,
    CREATING = 1,
    OPEN = 2,
    SETTLE = 3,
    DAILY_SETTLE = 4
  },
  SWEEP_TYPE = {
    SWEEP_TYPE_NONE = 0,
    BY_COUNT = 1,
    BY_DEMAND = 2
  },
  BATTLE_CHALLENGE_CONDITION = {
    BCC_NONE = 0,
    REMAIN_TIME = 1,
    DEAD_COUNT = 2,
    DEAD_JOB_COUNT = 3,
    EMBATTLE_COUNT = 4,
    EMBATTLE_JOB_COUNT = 5,
    MIN_HP_JOB = 6,
    HP_PERCENT = 7
  },
  HARD_STATE = {
    HS_NONE = 0,
    HS_NORMAL = 1,
    HS_OFF_SHELF = 2,
    HS_REMOVED = 3
  },
  PAY_ORDER_STATE = {
    POS_NONE = 0,
    POS_CREATED = 1,
    POS_PAYED = 2,
    POS_DELIVERY = 3,
    POS_CANCELED = 4,
    POS_FAIL = 5,
    POS_REFUNDING = 6,
    POS_REFUND_DONE = 7
  },
  E_REPORT_REASON = {
    ERR_NONE = 0,
    ERR_PORN = 1,
    ERR_POLITICS = 2,
    ERR_ADS_FRAUD = 3,
    ERR_ABUSE = 4,
    ERR_OTHER = 5
  },
  GUILD_OPERATE_TYPE = {
    GOT_NONE = 0,
    GOT_CREATE = 1,
    GOT_JOIN = 2,
    GOT_EXIT = 3,
    GOT_KICK_OUT_MEMBER = 4,
    GOT_DISMISS = 5,
    GOT_CHANGE_BADGE = 6,
    GOT_CHANGE_NAME = 7,
    GOT_CHANGE_NOTICE = 8,
    GOT_CHANGE_CONDITION = 9,
    GOT_APPROVE = 10,
    GOT_REJECT = 11,
    GOT_PROMOTE_MEMBER = 12,
    GOT_DEMOTE_MEMBER = 13,
    GOT_SEND_MESSAGE = 14,
    GOT_GM_SET_LEVEL = 15,
    GOT_GM_BLOCK = 16,
    GOT_GM_UNBLOCK = 17
  },
  FUNCTION_ID = {
    FD_NONE = 0,
    FD_BANNER = 101,
    FD_ACTIVITY_DROP = 104,
    FD_GACHA = 10103,
    FD_BATTLE_PASS = 10111,
    FD_ARENA = 10303,
    FD_BOSS_CHALLENGE = 10304,
    FD_FRIEND = 10115,
    FD_ACTIVITY_SIGNIN = 10118,
    FD_ACTIVITY_STAGE = 10119,
    FD_ACTIVITY_SEARCH = 10123,
    FD_ACTIVITY_RETURN = 10132,
    FD_ACTIVITY_TURNTABLE = 10134,
    FD_ACTIVITY_TURNTABLE_ROUND = 10137,
    FD_ACTIVITY_RETURN_PRO = 10138,
    FD_BUFF_STAGE = 11315,
    FD_LIMIT_CHALLENGE = 12601
  },
  BLOCK_STATE = {
    BS_NONE = 0,
    BS_NORMAL = 1,
    BS_BLOCKED = 2
  },
  ITEM_TYPE = {
    IT_NONE = 0,
    BIND_DIAMOND = 1,
    RECHARGE_DIAMOND = 2,
    GAME_COIN = 3,
    ENERGY = 4,
    ROLE_EXP = 5,
    CARD_EXP = 6,
    MONTH_CARD = 11,
    BATTLE_PASS = 12,
    BATTLE_PASS_SINIOR = 13,
    BATTLE_PASS_ACTIVITY = 14,
    SEAL = 16,
    EXP_ITEM = 101,
    CONSUME_MATERIAL = 102,
    UNIVERSAL_CARD = 103,
    SAME_NAME_CARD = 104,
    BADGE_EXP_ITEM = 105,
    MANOR_SALEABLE_ITEM = 107,
    HEAD_ITEM = 108,
    HEAD_RECT_ITEM = 109,
    EMOJI = 110,
    RANDOM_PACKAGE = 201,
    CHOSEN_PACKAGE = 202,
    REGULAR_PACKAGE = 203,
    FIX_COUNT_PACKAGE = 204,
    PROFESSION_PACKAGE = 205,
    ARENA_MAP = 301,
    ARENA_BUILDING = 302,
    ROGUE_ITEM = 401
  },
  TIMES_TYPE = {
    TIMES_TYPE_NONE = 0,
    TT_ENERGY = 1,
    TT_ARENA_FIGHT = 2
  },
  LOGIN_TYPE = {
    LT_NONE = 0,
    LT_DEFAULT = 1,
    LT_RECONNECT = 2,
    LT_REGISTER = 3
  },
  VERIFY_STATE = {
    VS_NONE = 0,
    VS_APPROVE = 1,
    VS_ON_SHELF = 2,
    VS_OFF_SHELF = 3,
    VS_MODIFY = 4,
    VS_REJECT = 5,
    VS_DRAFT = 6
  },
  NOTICE_TYPE = {
    NT_NONE = 0,
    NT_SYS = 1,
    NT_ACTIVITY = 2,
    NT_LOGIN = 3
  },
  TIME_STATE = {
    TS_NONE = 0,
    TS_WAITING = 1,
    TS_RUNNING = 2,
    TS_FINISH = 3,
    TS_SUSPEND = 4
  },
  GUILD_EVENT_TYPE = {
    GE_NONE = 0,
    GE_APPROVE_JOIN = 1,
    GE_KICK_OUT = 2
  },
  PLAYER_OPERATE_TYPE = {
    POT_NONE = 0,
    POT_GAIN_EXP = 1,
    POT_LEVELUP = 2
  },
  GuildWarState = {
    GWS_NONE = 0,
    GWS_NOTICE = 1,
    GWS_FIGHT = 2,
    GWS_SETTLE_WAIT = 3,
    GWS_SETTLE = 4,
    GWS_CLOSE = 5
  },
  ACTIVITY_OP = {
    AO_NONE = 0,
    AO_MODIFY = 1,
    AO_OFF_SHELF = 2,
    AO_REMOVE = 3,
    AO_DELETE = 4
  },
  FORMATION_TYPE = {FORMATION_TYPE_ARENA = 0, FORMATION_TYPE_FRIEND_FIGHT = 1},
  TASK_STATE = {
    NORMAL = 0,
    FINISHED = 1,
    REWARD = 2,
    OVERDUE = 3
  },
  MAIL_OPERATE_TYPE = {
    MOT_NONE = 0,
    MOT_RECEIVE = 1,
    MOT_MARK_READ = 2,
    MOT_FETCH_ATTACHMENT = 3,
    MOT_DELETE = 4,
    MOT_EXPIRE = 5
  },
  EXCHANGE_CODE_GEN = {
    ECG_NONE = 0,
    ECG_SPECIFY = 1,
    ECS_BATCH_GEN = 2,
    ECS_IMPORT = 3
  },
  TASK_RECORD = {
    TASK_RECORD_NONE = 0,
    TR_SET_GE = 1,
    TR_SET_LE = 2,
    TR_ADD = 3
  },
  ATTR_ID = {
    AID_NONE = 0,
    HP = 40000101,
    MAX_HP = 40000102,
    ATK = 40000103,
    DEF = 40000104,
    CRT = 40000201,
    BLK = 40000202,
    EVA = 40000203,
    CRT_INT = 40000204,
    BLK_INT = 40000205,
    SPD_MOVE = 40000301,
    SPD_ATK = 40000302,
    RANGE_ATK = 40000303,
    BLOCK_MAX = 40000304,
    STOIC = 40000305,
    SHIELD = 40000306,
    MAX_RAGE = 40000307,
    RAGE = 40000308,
    RAGE_TIME = 40000309,
    RAGE_ATK = 40000310,
    RAGE_HIT = 40000311,
    RAGE_KILL = 40000313,
    BLOCK_COUNT = 40000314,
    SPD_MOVE_ENHANCE = 40000315,
    SPD_ATK_ENHANCE = 40000316,
    RESTRAINT_ADD1 = 40000401,
    RESTRAINT_ADD2 = 40000402,
    RESTRAINT_ADD3 = 40000403,
    RESTRAINT_ADD4 = 40000404,
    RESTRAINT_ADD5 = 40000405,
    RESTRAINT_SUB1 = 40000406,
    RESTRAINT_SUB2 = 40000407,
    RESTRAINT_SUB3 = 40000408,
    RESTRAINT_SUB4 = 40000409,
    RESTRAINT_SUB5 = 40000410,
    DAMAGE_ADD = 40000411,
    DAMAGE_SUB = 40000412,
    TREAT_ADD = 40000501,
    BE_TREAT_ADD = 40000502,
    TENACITY = 40000601,
    SHIELD_SPECIAL = 40000602
  },
  TASK_BELONG_TYPE = {
    TBT_NONE = 0,
    TBT_BATTLEPASS = 1,
    TBT_CARNIVAL = 2,
    TBT_PLANT = 3,
    TBT_COMMON = 4
  },
  BADGE_OPERATE_TYPE = {
    BOT_NONE = 0,
    BOT_GAIN_EXP = 1,
    BOT_LEVELUP = 2
  },
  MODULE_RESET_TYPE = {
    MRT_NONE = 0,
    MRT_BOSS_DAILY = 1,
    MRT_SHOP_DAILY = 2,
    MRT_TASK_DAILY = 3,
    MRT_TASK_WEEKLY = 4,
    MRT_GACHA_DAILY = 5,
    MRT_ARENA_DAILY = 6,
    MRT_PURCHASE_DAILY = 7,
    MRT_PURCHASE_WEEKLY = 8,
    MRT_PURCHASE_MONTHLY = 9,
    MRT_CARNIVAL_DAILY = 10,
    MRT_BATTLE_PASS_WEEKLY = 11,
    MRT_EXPEDITION_WEEKLY = 12,
    MRT_PLANT_DAILY = 13,
    MRT_ARENA_WEEKLY = 14,
    MRT_MANOR = 15,
    MRT_BATTLE_PASS_DAILY = 16,
    MRT_GIFT_DAILY = 17,
    MRT_GIFT_WEEKLY = 18,
    MRT_GIFT_MONTHLY = 19,
    MRT_SUPPLY_DAILY = 20,
    MRT_BUFF_STAGE_WEEKLY = 21,
    MRT_ROGUE_WEEKLY = 22,
    MRT_AGREEMENT_WEEKLY = 23,
    MRT_ACTIVITY_DAILY = 24
  },
  CARD_OPERATE_TYPE = {
    COT_NONE = 0,
    COT_GAIN_EXP = 1,
    COT_LEVELUP = 2,
    COT_QUALITY_UP = 3,
    COT_GRADE_UP = 4,
    COT_NORMAL_SKILL_LEVELUP = 5,
    COT_SPECIAL_SKILL_LEVELUP = 6,
    COT_BURST_SKILL_LEVELUP = 7,
    COT_GROW_SKILL_1_LEVELUP = 8,
    COT_GROW_SKILL_2_LEVELUP = 9,
    COT_GROW_SKILL_3_LEVELUP = 10
  },
  CONDITION_TYPE = {
    CT_NONE = 0,
    CT_LEVEL = 100,
    CT_PASS_STAGE = 200,
    CT_CARD_EXP_ADD = 300
  },
  ROGUE_STAT = {
    ROGUE_STAT_NONE = 0,
    LAYER_COUNT = 1,
    TOTAL_NODES = 2,
    TRIGGER_EVENT_COUNT = 3,
    NORMAL_BATTLE = 4,
    ENCOUNTER_BATTLE = 5,
    BOSS_BATTLE = 6,
    NORMAL_BATTLE_LEFT_TIME = 7,
    LEFT_HP_PERCENT = 8,
    TREASURE_COUNT = 9,
    TOTAL_TOKEN = 10,
    TOTAL_ATTRIB_POINT = 11,
    RECRUIT_COUNT = 12,
    ATTRIB_POINT_COST = 13,
    REVIVE_COUNT = 14,
    ENCOUNTER_BATTLE_LEFT_TIME = 15,
    BOSS_BATTLE_LEFT_TIME = 16
  },
  CNT_RESOURCE_TYPE = {
    CRT_NONE = 0,
    CRT_ENERGY_BUY_TIMES = 1,
    CRT_ARENA_BUY_FIGHT_TIMES = 2,
    CRT_ARENA_TOTAL_FIGHT_COUNT = 3
  },
  PRODUCT_TYPE = {
    PT_NONE = 0,
    PT_RECHARGE = 1,
    PT_MONTH_CARD = 2,
    PT_GIFT = 3,
    PT_BATTLE_PASS = 4,
    PT_BATTLE_PASS_HIGH = 6,
    PT_BATTLE_PASS_DIS = 7,
    PT_AGREEMENT = 8,
    PT_FASHION = 11
  },
  CHAPTER_CONDITION_TYPE = {
    CCT_NONE = 0,
    ROLE_LEVEL = 100,
    PASS_STAGE = 200,
    SEAL_HOOK_LEVEL = 400
  },
  BATTLE_FORMATION_TYPE = {
    BFT_NONE = 0,
    BFT_1 = 1,
    BFT_2 = 2,
    BFT_3 = 3
  },
  SCENE_TYPE = {
    SST_NONE = 0,
    MAIN_LINE = 1,
    CLIMB_TOWER = 2,
    ARENA = 5,
    EXPEDITION = 6,
    BOSS_CHALLENGE = 7,
    BUFF_STAGE = 8,
    ROGUE = 9,
    LIMIT_CHALLENGE = 10,
    DAILY_COIN = 11,
    DAILY_ROLE_EXP = 12,
    DAILY_SKILL_BOOK = 13,
    DAILY_QUALITY_UP = 14,
    DAILY_MATERIAL = 15,
    DAILY_BADGE_EXP = 16,
    ACTIVITY_NORAML = 21,
    ACTIVITY_CREAM = 22,
    ACTIVITY_BOSS = 23,
    MANOR = 31,
    GUILD_WAR = 32,
    BOSS_WATER = 41,
    BOSS_FIRE = 42,
    BOSS_WOOD = 43,
    BOSS_LIGHT = 44,
    BOSS_DARK = 45,
    GUILD_PRACTICE_NONE = 51,
    GUILD_PRACTICE_WATER = 52,
    GUILD_PRACTICE_FIRE = 53,
    GUILD_PRACTICE_WOOD = 54,
    GUILD_PRACTICE_LIGHT = 55,
    GUILD_PRACTICE_DARK = 56,
    MANOR_WATER = 61,
    MANOR_FIR = 62,
    MANOR_WOOD = 63,
    SEAL_HOOK = 71,
    SEAL_QUALITY_UP = 72,
    FRIEND_FIGHT = 81,
    PREPARE_STORE_COMMON = 10000
  },
  RECOMMEND_IMG_PRODUCT_TYPE = {
    RIP_NONE = 0,
    RIP_PAY_PRODUCT = 1,
    PIP_FASHION = 2,
    RIP_GIFT = 3
  },
  ITEM_OPERATE_TYPE = {
    IOT_NONE = 0,
    IOT_GAIN = 1,
    IOT_CONSUME = 2
  },
  SHOP_TYPE = {
    SHOP_TYPE_NONE = 0,
    ST_BLUE = 1,
    ST_RED = 2,
    ST_MANOR_PERIOD = 3,
    ST_MANOR_NORMAL = 4,
    ST_MANOR_SEAL = 5
  },
  SHOP_OPERATE_TYPE = {
    SPOT_NONE = 0,
    SPOT_BUY = 1,
    SPOT_REFRESH = 2
  },
  ROGUE_REWARD_TYPE = {
    ROGUE_REWARD_TYPE_NONE = 0,
    RRT_RECRUIT = 1,
    RRT_TOKEN = 2,
    RRT_ATTRIB_POINT = 3,
    RRT_TREASURE = 4,
    RRT_RECOVER_HP = 5,
    RRT_REVIVE = 6,
    RRT_SPECIFIC_TREASURE = 7,
    RRT_SHOP_BUY_TREASURE = 11,
    RRT_SHOP_REFRESH = 12
  },
  WHITELIST_TYPE = {
    WLT_NONE = 0,
    IP = 1,
    ACCOUNT_ID = 2,
    UIN = 3
  },
  RESET_PERIOD = {
    RP_NONE = 0,
    RP_DAILY = 1,
    RP_WEEKLY = 2,
    RP_MONTHLY = 3
  },
  ROGUE_NODE_TYPE = {
    ROGUE_NODE_TYPE_NONE = 0,
    RNT_NORMAL_BATTLE = 1,
    RNT_ENCOUNTER_BATTLE = 2,
    RNT_BOSS_BATTLE = 3,
    RNT_SHOP = 11,
    RNT_EVENT = 12,
    RNT_SUPPLY = 13
  },
  ROGUE_PIC_TYPE = {
    RPT_NONE = 0,
    TREASURE = 1,
    EVENT = 2,
    ENDING = 3,
    HOLY = 4
  },
  RECOMMEND_IMG_JUMP_TYPE = {
    RJT_NONE = 0,
    RJT_SHOP = 1,
    RJT_SHOP_BUY = 2,
    RJT_BUY = 3
  },
  IM_SESSION_TYPE = {
    IST_NONE = 0,
    PRIVATE = 1,
    UNION = 2,
    WORLD = 3
  },
  MSG_TYPE = {
    MSG_NONE = 0,
    MSG_TEXT = 1,
    MSG_EMOJI = 2,
    MSG_JOIN_GUILD = 3
  },
  ARENA_REWARD_TYPE = {
    ATR_NONE = 0,
    ATR_SEASON = 2,
    ATR_WEEKLY = 3
  },
  GM_OP_MODULE = {
    GOM_NONE = 0,
    GOM_IMAGE = 1,
    GOM_NOTICE = 2,
    GOM_MAIL = 3,
    GOM_RECOMMEND_IMG = 4,
    GOM_GIFT_PACKAGE = 5,
    GOM_FASHION = 6,
    GOM_ACTIVITY = 7,
    GOM_PLAYER = 8,
    GOM_WHITE_LIST = 9,
    GOM_CLI_RES_RELEASE = 10,
    GOM_SVR_STATE = 11,
    GOM_CREATE_USER_LIMIT = 12,
    GOM_GUILD = 13,
    GOM_EXCHANGE_CODE = 14,
    GOM_SHOP_LABEL = 15,
    GOM_SYNC_CONFIG = 16
  },
  ACTIVITY_TIME_TYPE = {
    ATT_NONE = 0,
    ATT_FIXED = 1,
    ATT_WEEK_LOOP = 2,
    ATT_MONTH_LOOP = 3
  },
  GUILD_ROLE_TYPE = {
    GRT_NONE = 0,
    GRT_LEADER = 1,
    GRT_VICE_LEADER = 2,
    GRT_NORMAL = 3
  },
  CARD_BASE_ATTR = {
    CBA_NONE = 0,
    LEVEL = 1,
    QUALITY = 2,
    WEAPON_LEVEL = 3,
    WEAPON_QUALITY = 4,
    GRADE = 5,
    POWER = 6,
    EXP = 7,
    FASHION = 8
  },
  LOGOUT_TYPE = {
    LOT_NONE = 0,
    LOT_DEFAULT = 1,
    LOT_SERVER_CLOSE = 2,
    LOT_GM_KICK = 3
  },
  CHALLENGE_STAT_TYPE = {
    CST_NONE = 0,
    CST_FINISH = 1,
    CST_REWARDED = 2
  },
  ATTRIB_GROUP = {
    AG_NONE = 0,
    AG_CARD = 1,
    AG_LEVEL = 2,
    AG_QUALITY = 3,
    AG_BADGE = 4,
    AG_SKILL = 5,
    AG_ROGUE_ENHANCE = 6
  },
  TASK_CONDITION_TYPE = {
    TCT_NONE = 0,
    TCT_LEVEL = 100,
    TCT_PASS_STAGE = 200,
    TCT_KILL_MONSTER_COUNT = 201,
    TCT_PASS_EXPERIMENT_COUNT = 202,
    TCT_PASS_EXPERIMENT_DIFF = 203,
    TCT_ARENA_FIGHT_COUNT = 204,
    TCT_ARENA_REACH_RANK = 205,
    TCT_PASS_EXPERIMENT_HIGH = 206,
    TCT_CLIMB_TOWER_COUNT = 207,
    TCT_BOSS_CHALLENGE = 208,
    TCT_GUILD_PRATICE = 209,
    TCT_BOSS_CHALLENGE_DIFF = 210,
    TCT_PASS_SPECIAL_STAGE_COUNT = 211,
    TCT_EXPEDITION_FIGHT_COUNT = 251,
    TCT_BOSS_FIGHT_COUNT = 252,
    TCT_BUILDING_FIGHT_COUNT = 254,
    TCT_EXPLORE_ROUGE = 255,
    TCT_PASS_STAGE_BY_CTYPE = 256,
    TCT_MINIGAME_TOTALSCORE = 257,
    TCT_MINIGAME_ONCESCORE = 258,
    TCT_MINIGAME_PLAY_COUNT = 259,
    TCT_GUILD_WAR_FIGHT_COUNT = 262,
    TCT_GUILD_WAR_SCORE = 263,
    TCT_ACTIVITY_PASS_STAGE_BY_CTYPE = 264,
    TCT_ACTIVITY_MINIGAME_TOTALSCORE = 265,
    TCT_ACTIVITY_MINIGAME_ONCESCORE = 266,
    TCT_ACTIVITY_PLAY_COUNT = 267,
    TCT_CARD_EXP_ADD_COUNT = 300,
    TCT_CARD_LEVEL_UP_COUNT = 301,
    TCT_CARD_BREAK_COUNT = 302,
    TCT_CARD_LEVEL_NUM = 351,
    TCT_CARD_SKILL_NUM = 352,
    TCT_CARD_BREAK_NUM = 353,
    TCT_CARD_GRADE_NUM = 354,
    TCT_BADGE_LEVEL_NUM = 355,
    TCT_BADGE_LEVEL_UP_COUNT = 356,
    TCT_COST_RESOURCE_NUM = 400,
    TCT_RESOURCE_NUM = 401,
    TCT_GET_COIN_NUM = 451,
    TCT_LOGIN_DAY = 500,
    TCT_ONLINE_MIN = 501,
    TCT_SHOP_BUY_COUNT = 502,
    TCT_ENERGY_BUY_COUNT = 503,
    TCT_GACHA_COUNT = 504,
    TCT_GUILD_REWARD_COUNT = 505,
    TCT_MANOR_EVENT_COUNT = 600,
    TCT_MANOR_RESOURCE_NUM = 601,
    TCT_MANOR_SPECIAL_EVENT_COUNT = 602,
    TCT_ROGUE_DIFFICULTY_LEVEL_COUNT = 701,
    TCT_ROGUE_COST_TOKEN = 702,
    TCT_ROGUE_EVENT_COUNT = 703,
    TCT_ROGUE_TREASURE_PIC = 704,
    TCT_ROGUE_COST_ATTRIB_POINT = 705,
    TCT_ROGUE_BATTLE_COUNT = 706,
    TCT_ROGUE_TRIGGER_ENDING_COUNT = 707,
    TCT_ROGUE_GAIN_TOKEN = 708,
    TCT_ROGUE_SCORE = 709
  },
  PLATFORM_TYPE = {
    PFT_NONE = 0,
    PFT_ANDROID = 1,
    PFT_IOS = 2
  },
  TUPLE_TYPE = {
    TT_NONE = 0,
    ITEM = 1,
    CARD = 2,
    BADGE = 3,
    T_FASHION = 4,
    CG = 5,
    BGM = 6,
    STORY_MONSTER = 7,
    GIFT = 8
  },
  EXCHANGE_CODE_USER_SCORE = {
    ECUS_NONE = 0,
    ECUS_ALL = 1,
    ECUS_TARGET_UIN = 2,
    ECUS_LEVEL_RANGE = 3
  },
  SEAL_POS = {
    SP_NONE = 0,
    SP_ATK = 1,
    SP_DEF = 2,
    SP_HP = 3
  },
  MULTI_DROP_SCENE_GROUP = {
    MDSG_NONE = 0,
    MDSG_DAILY = 1,
    MDSG_BOSS = 2
  },
  FLOWER_STATE = {
    FS_NONE = 0,
    FS_UNLOCK = 1,
    FS_OPEN = 2,
    FS_REWARED = 3
  },
  E_KICKOFF_REASON = {
    E_KR_NONE = 0,
    E_KR_SYSTEM = 1,
    E_KR_OTHER_DEVICE = 2,
    E_KR_CLOSE_SERVER = 3
  },
  MANOR_SUB_EVENT = {
    MSE_NONE = 0,
    MSE_BATTLE = 1,
    MST_PLOT = 2,
    MST_PACKAGE = 3,
    MST_ROAD = 4,
    MST_SHOP_NPC = 5,
    MST_DOOR = 6
  },
  MAIL_SCOPE = {
    MS_NONE = 0,
    MS_ALL = 1,
    MS_SPECIFIC = 2,
    MS_LEVEL = 3
  },
  TASK_TYPE = {
    TKT_NONE = 0,
    TKT_BATTLAPASS = 1,
    TKT_CAINIVAL = 2
  },
  TASK_EVENT = {TASK_EVENT_NONE = 0},
  RELATION_STATE = {
    RS_NONE = 0,
    APPLYING = 1,
    APPLIED = 2,
    FRIEND = 3,
    BLOCK = 4,
    DELETE = 5
  },
  RET_CODE = {
    RC_OK = 0,
    RC_INTERNAL_SERVER_ERROR = 500,
    RC_PARAM_ERROR = 1000,
    RC_PB_ERROR = 1001,
    RC_NO_MSG_HANDLER = 1002,
    RC_DB_NOT_EXIST = 1003,
    RC_DB_OP_ERROR = 1004,
    RC_DATA_NOT_FOUND = 1005,
    RC_RPC_ERROR = 1006,
    RC_ID_EXHAUSTED = 1007,
    RC_DELAY_RESPONSE = 1008,
    RC_SERVICE_ABNORMAL = 1009,
    RC_SERVICE_TIMEOUT = 1010,
    RC_REDIS_ABNORMAL = 1011,
    RC_INTERNAL_DATA_ERROR = 1012,
    RC_TRANSACTION_OP_NOT_SUPPORTED = 1013,
    RC_DB_DUPLICATE_KEY_ERROR = 1014,
    RC_RSP_PKG_CACHE_EXPIRE = 1015,
    RC_SERVICE_CLOSED = 1016,
    RC_SERVICE_BUSY = 1017,
    RC_GAIN_DISTRIBUTE_LOCK_FAIL = 1018,
    RC_ALL_GAME_SERVER_FULL = 1019,
    RC_RPC_NATS_ABNORMAL = 1020,
    RC_ALLOC_WORKER_ID_FAIL = 1021,
    RC_NO_AVAILABLE_GAME_NODE = 1022,
    RC_RESEND_CACHE_MISS = 1023,
    RC_ACCOUNT_EXIST = 1100,
    RC_WRONG_ACCOUNT_OR_PASSWORD = 1101,
    RC_TOKEN_INVALID = 1102,
    RC_TOKEN_EXPIRE = 1103,
    RC_TOKEN_NOT_AUTHED = 1104,
    RC_TOKEN_ILLEGAL = 1105,
    RC_ENTER_GAME_FAIL = 1106,
    RC_ACTOR_NOT_EXIST = 1107,
    RC_ACTOR_OFFLINE = 1108,
    RC_CONFIG_DATA_NOT_EXIST = 1109,
    RC_CONFIG_DATA_ERROR = 1110,
    RC_ACTOR_LEVEL_LOW = 1111,
    RC_ACCOUNT_NOT_EXIST = 1112,
    RC_FUNCTION_NOT_UNLOCK = 1113,
    RC_SERVER_IN_MAINTAIN = 1114,
    RC_NO_PRIVILEGE = 1115,
    RC_REACH_USER_CREATE_LIMIT = 1116,
    RC_INHERIT_CODE_OR_PASSWORD_WRONG = 1150,
    RC_INHERIT_CODE_INVALID = 1151,
    RC_INHERIT_ACCOUNT_EXIST = 1152,
    RC_ITEM_NOT_ENOUGH = 1200,
    RC_ITEM_NOT_EXIST = 1201,
    RC_ITEM_BUY_TIMES_MAX = 1202,
    RC_ITEM_COUNT_NOT_ENOUGH = 1203,
    RC_ITEM_CANNOT_SALE = 1204,
    RC_ITEM_NOT_CONFORM_EXCHANGE_RULE = 1205,
    RC_ITEM_COUNT_MAX = 1206,
    RC_ITEM_EMOJI_NOT_OWN = 1207,
    RC_MAIL_NOT_EXIST = 1250,
    RC_MAIL_ATTACHMENT_FETCHED = 1251,
    RC_MAIL_EXPIRED = 1252,
    RC_MAIL_CANNOT_DELETE = 1253,
    RC_CARD_LEVEL_LIMIT = 1300,
    RC_CARD_QUALITY_LIMIT = 1301,
    RC_CARD_NOT_EXIST = 1302,
    RC_CARD_SKILL_NOT_UNLOCKED = 1303,
    RC_CARD_SKILL_LEVEL_LIMIT = 1304,
    RC_CARD_GRADE_LIMIT = 1305,
    RC_CARD_LEVEL_NOT_MAX = 1306,
    RC_CARD_QUALITY_NOT_SATISFIED = 1307,
    RC_CARD_NOT_OWN_FASHION = 1308,
    RC_CARD_GRADE_UP_MATERIAL_ENOUGH = 1311,
    RC_SCENE_CHAPTER_NOT_OPEN = 1400,
    RC_SCENE_PRE_NOT_PASS = 1401,
    RC_SCENE_CHALLENGE_COUNT_MAX = 1403,
    RC_SCENE_NOT_UNLOCKED = 1404,
    RC_SCENE_NOT_OPEN = 1405,
    RC_SCENE_SVR_BATTLE_CALC_UN_MATCH = 1406,
    RC_SCENE_BATTLE_INIT_DATA_ERROR = 1407,
    RC_SCENE_CHAPTER_REWARD_FETCHED = 1408,
    RC_SCENE_NOT_PASS_CHAPTER = 1409,
    RC_SCENE_CUR_STAGE_NOT_OPEN = 1410,
    RC_SCENE_STAGE_REWARD_FETCHED = 1411,
    RC_SCENE_NOT_PASS_STAGE = 1412,
    RC_RELATION_BEEN_FRIEND = 1500,
    RC_RELATION_APPLYING = 1502,
    RC_RELATION_BLOCK_TARGET = 1503,
    RC_RELATION_BLOCKED_BY_TARGET = 1504,
    RC_RELATION_FRIEND_MAX = 1506,
    RC_RELATION_TARGET_FRIEND_MAX = 1507,
    RC_RELATION_FRIEND_AND_APPLYING_MAX = 1508,
    RC_RELATION_APPLY_CANCELED = 1510,
    RC_RELATION_BLOCK_MAX = 1511,
    RC_RELATION_REMARK_NON_FRIEND = 1512,
    RC_RELATION_CANNOT_BLOCK_FRIEND = 1513,
    RC_RELATION_TARGET_FUNC_NOT_OPEN = 1514,
    RC_RELATION_NEED_REM_BLOCK = 1515,
    RC_TASK_NOT_FINISHED = 1600,
    RC_TASK_HAS_FETCH_REWARD = 1601,
    RC_TASK_NOT_EXIST = 1602,
    RC_BADGE_LEVEL_MAX = 1702,
    RC_BADGE_NOT_ACTIVATED = 1703,
    RC_BADGE_HAS_WEAR = 1704,
    RC_BADGE_NOT_WEAR = 1705,
    RC_BADGE_NO_DECOMPOSE = 1706,
    RC_GM_REPEATED_MAIL = 1800,
    RC_GM_SYSTEM_MAIL_HAS_SEND = 1801,
    RC_BOSS_NOT_EXIST = 1903,
    RC_ACTIVITY_BOSS_CLOSED = 1905,
    RC_OP_ACTIVITY_ITEM_NOT_OFF_SHELF = 2000,
    RC_OP_ACTIVITY_ITEM_NOT_REMOVED = 2001,
    RC_OP_ACTIVITY_ITEM_WAIT_VERIFY = 2002,
    RC_OP_ACTIVITY_ITEM_CANNOT_SELL = 2003,
    RC_OP_LOGIN_NOTICE_EXIST = 2004,
    RC_OP_MAIL_ITEM_EXCEED_LIMIT = 2005,
    RC_OP_GM_OPERATE_USER_FAIL = 2006,
    RC_OP_NO_TARGET_CHANNEL = 2007,
    RC_MANOR_NOT_FOUND_EVENT = 2100,
    RC_MANOR_EVENT_HAS_FINISHED = 2101,
    RC_MANOR_PRE_NODE_NOT_FINISHED = 2102,
    RC_MANOR_EVENT_CANNOT_TRIGGER = 2103,
    RC_MANOR_NOT_IN_EVENT_GRID = 2104,
    RC_MANOR_PRE_EVENT_NOT_FINISHED = 2106,
    RC_MANOR_PLOT_EVENT_EXIST_IN_GROUP = 2107,
    RC_MANOR_PLOT_EVENT_NODE_CONFIG_ERR = 2108,
    RC_MANOR_FIX_BUILDING_TIMES_OVER = 2109,
    RC_MANOR_NO_PLOT_EVENT_CARD = 2110,
    RC_MANOR_MAP_SUB_NOT_OPEN = 2111,
    RC_MANOR_PLOT_BATTLE_HAS_FINISHED = 2112,
    RC_MANOR_ACTIVITY_ROLE_PLOT_SUSPEND = 2113,
    RC_MANOR_EVENT_EXPIRE = 2114,
    RC_ROGUE_GAME_RUNNING = 2200,
    RC_ROGUE_DIFFICULTY_LEVEL_LOCKED = 2201,
    RC_ROGUE_CARD_ATTRIB_LEVEL_MAX = 2202,
    RC_ROGUE_TALENT_HAS_LEVELUP = 2203,
    RC_ROGUE_PRE_TALENT_NOT_LEVELUP = 2204,
    RC_ROGUE_PRE_NODE_NOT_FINISHED = 2205,
    RC_ROGUE_CUR_NODE_NOT_FINISHED = 2206,
    RC_ROGUE_RANDOM_POOL_ERR = 2207,
    RC_ROGUE_NODE_REWARD_NOT_FETCHED = 2208,
    RC_ROGUE_NODE_REWARD_FETCHED = 2209,
    RC_ROGUE_CARD_RECRUITED = 2210,
    RC_ROGUE_HAS_OWN_TREASURE = 2211,
    RC_ROGUE_SHOP_TREASURE_NOT_EXIST = 2212,
    RC_ROGUE_SHOP_RESET_MAX = 2213,
    RC_ROGUE_GAME_NOT_RUNNING = 2214,
    RC_ROGUE_THEME_LEVEL_LOW = 2215,
    RC_ROGUE_INITIAL_RECRUIT_DONE = 2216,
    RC_ROGUE_NODE_FINISHED_CANNOT_REWARD = 2217,
    RC_ROGUE_OWN_ALL_TREASURE = 2218,
    RC_ROGUE_NO_SWEEP_COUNT = 2219,
    RC_ROGUE_CUR_NODE_FINISHED = 2220,
    RC_EXCHANGE_CODE_NOT_EXIST = 2300,
    RC_EXCHANGE_CODE_USED = 2301,
    RC_EXCHANGE_CODE_USE_TIMES_MAX = 2302,
    RC_EXCHANGE_CODE_EXPIRE = 2303,
    RC_EXCHANGE_CODE_NO_PERMISSION = 2304,
    RC_EXCHANGE_CODE_LEVEL_LOW = 2306,
    RC_EXCHANGE_CODE_LEVEL_HIGH = 2307,
    RC_GUILD_WAR_NOT_START = 2400,
    RC_GUILD_WAR_SKILL_NOT_EXIST = 2401,
    RC_GUILD_WAR_SKILL_LEVEL_MAX = 2402,
    RC_GUILD_WAR_NOT_PARTICIPATE = 2403,
    RC_GUILD_WAR_BOSS_DEAD = 2404,
    RC_GUILD_WAR_NO_FIGHT_COUNT = 2405,
    RC_GUILD_WAR_COMPENSATE_NOT_EXIST = 2406,
    RC_GUILD_WAR_CANNOT_REPEAT_USE_CARD = 2407,
    RC_GUILD_WAR_FIGHT_STATE_FINISHED = 2408,
    RC_GUILD_WAR_BOSS_DEAD_BEFORE = 2409,
    RC_GUILD_WAR_FIGHT_CANNOT_EXIT = 2410,
    RC_GUILD_WAR_FIGHT_CANNOT_DISMISS = 2411,
    RC_GUILD_WAR_FIGHT_CANNOT_KICK = 2412,
    RC_SEAL_LEVEL_MAX = 2413,
    RC_SEAL_BIG_LEVEL_LIMIT = 2414,
    RC_SEAL_BIG_QUALITY_MAX = 2415,
    RC_SEAL_BIG_ADD_UP_MAX = 2416,
    RC_SEAL_BIG_LEVEL_LOW = 2417,
    RC_BILIBILI_ACCOUNT_NOT_LOGIN = 3000,
    RC_BILIBILI_ACCOUNT_BANNED = 3001,
    RC_BILIBILI_PARAM_ERROR = 3002,
    RC_BILIBILI_SERVER_INTERNAL_ERROR = 3004,
    RC_BILIBILI_CALL_TOO_RAPID = 3005,
    RC_BILIBILI_USER_NOT_ACTIVE = 3006,
    RC_IM_GROUP_MAX_MEMBERS = 5202,
    RC_IM_WORLD_GROUP_NOT_EXIST = 5204,
    RC_IM_CHANNEL_IN_CD = 5205,
    RC_IM_MUTED_BY_SYSTEM = 5206,
    RC_IM_MUTED_REASON_SENSITIVE = 5207,
    RC_IM_MUTED_REASON_REPORT_SENSITIVE = 5208,
    RC_IM_MUTED_REASON_REPORT = 5209,
    RC_IM_MUTED_REASON_REPEAT_MSG = 5210,
    RC_IM_MUTED_REASON_GM = 5211,
    RC_GUILD_NOT_EXIST = 5300,
    RC_GUILD_NOT_IN = 5301,
    RC_GUILD_HAS_IN = 5302,
    RC_GUILD_IN_JOIN_CD = 5303,
    RC_GUILD_MEMBER_MAX = 5304,
    RC_GUILD_APPLICANT_MAX = 5305,
    RC_GUILD_USER_APPLIED_MAX = 5306,
    RC_GUILD_APPLICANT_NOT_EXIST = 5307,
    RC_GUILD_VICE_LEADER_MAX = 5308,
    RC_GUILD_NOT_MEMBER = 5309,
    RC_GUILD_NO_PERMISSION = 5310,
    RC_GUILD_NAME_OCCUPIED = 5311,
    RC_GUILD_IN_RECOMMEND_CD = 5312,
    RC_GUILD_IMPEACHING = 5313,
    RC_GUILD_NOT_MEET_IMPEACH_COND = 5314,
    RC_GUILD_NO_IMPEACH_VOTE_PERMISSION = 5315,
    RC_GUILD_NOT_IMPEACHING = 5316,
    RC_GUILD_IMPEACH_VOTED = 5317,
    RC_GUILD_IMPEACH_INITIATOR_NO_EXIT = 5318,
    RC_GUILD_IMPEACH_INITIATOR_NO_KICK = 5319,
    RC_GUILD_NOT_FOUND_PROPER_GUILD = 5320,
    RC_GUILD_NO_QUICK_JOIN_LEVEL_LIMIT = 5321,
    RC_GUILD_REJECT_JOIN = 5322,
    RC_GUILD_CHAT_BLOCKED_BY_GM = 5323,
    RC_GUILD_NOT_OWN_HEAD_ID = 5324,
    RC_ARENA_NOT_FOUND = 5400,
    RC_ARENA_ACTOR_CLOSED = 5402,
    RC_ARENA_FIGHT_NUM_EXIST = 5403,
    RC_ARENA_FIGHT_CD = 5404,
    RC_ARENA_FIGHT_NO_NUM = 5405,
    RC_ARENA_OPPONENT_CHANGE = 5407,
    RC_ARENA_TARGET_CANT_FIGHT = 5408,
    RC_SHOP_GOODS_NOT_EXIST = 5501,
    RC_SHOP_GOODS_SOLD_OUT = 5502,
    RC_SHOP_GRID_NOT_UNLOCKED = 5504,
    RC_GACHA_POOL_LOCKED = 5601,
    RC_GACHA_COUNT_MAX = 5602,
    RC_GACHA_POINT_NOT_ENOUGH = 5603,
    RC_GACHA_EXCHANGE_LIMIT_MAX = 5604,
    RC_GACHA_EXTRA_REWARDED = 5605,
    RC_GACHA_EXTRA_CARD_NOT_FOUND = 5606,
    RC_SIGN_HAS_SIGNED = 5701,
    RC_ACTOR_BANNED = 5801,
    RC_BATTLEPASS_OUT_TIME = 5901,
    RC_BATTLEPASS_EXP_MAX = 5902,
    RC_BATTLEPASS_NO_TASK = 5903,
    RC_CARNIVAL_REWARDED = 6001,
    RC_CARNIVAL_CLOSED = 6002,
    RC_PURCHASE_MONTHCARD_REWARDED = 6100,
    RC_PURCHASE_MONTHCARD_EXPIRED = 6101,
    RC_PURCHASE_MONTHCARD_MAX = 6102,
    RC_ACTIVITY_NOT_EXIST = 6201,
    RC_ACTIVITY_CAN_NOT_SIGNIN = 6202,
    RC_ACTIVITY_ON_SHELF_EXIST = 6203,
    RC_BOSS_CHALLENGE_NOT_EXIST = 6301,
    RC_BOSS_CHALLENGE_FIGHT_NOT_ENOUGH = 6302,
    RC_BUFF_STAGE_CHALLENGE_NOT_REACH = 6303,
    RC_AGREEMENT_REWARDED = 6401,
    RC_AGREEMENT_NOT_OPEN = 6402
  },
  LOG_ID = {
    LI_NONE = 0,
    CONSUME_LEVELUP = 10001,
    CONSUME_QUALITY_UP = 10002,
    CONSUME_SKILL_LEVELUP = 10003,
    CONSUME_GRADE_UP = 10004,
    CONSUME_CHALLENGE_STAGE = 10005,
    CONSUME_BADGE_ACTIVATE = 10006,
    CONSUME_BADGE_GRADE_UP = 10007,
    CONSUME_BADGE_LEVELUP = 10008,
    CONSUME_BUY_ENERGY = 10009,
    CONSUME_USE_PACKAGE = 10011,
    CONSUME_ITEM_EXPIRED = 10012,
    CONSUME_CREATE_GUILD = 10013,
    CONSUME_EXCHANGE_ITEM = 10014,
    CONSUME_CHANGE_GUILD_NAME = 10015,
    CONSUME_CHANGE_NAME = 10016,
    CONSUME_EXCHANGE_ENERGY = 10018,
    CONSUME_PROCESS_MANOR_EVENT = 10019,
    CONSUME_CLI_GM = 10020,
    CONSUME_BATCH_USE_ITEMS = 10021,
    CONSUME_GACHA_COST = 10022,
    CONSUME_BUY_BATTLEPASS_LEVEL = 10023,
    CONSUME_BUY_GIFT = 10024,
    CONSUME_SALE_ITEM = 10025,
    CONSUME_TASK_ITEM_EXPIRE = 10026,
    CONSUME_RESET_ARENA_FIGHT_NUM = 10027,
    CONSUME_REFRESH_ARENA_FIGHT_CD = 10028,
    CONSUME_BUY_FASHION = 10029,
    CONSUME_FORCE_REFRESH_SHOP_GOODS = 10030,
    CONSUME_ACTIVITY_SLOT = 10031,
    CONSUME_BUY_SHOP_GOODS = 10032,
    CONSUME_DAILY_SUPPLY = 10033,
    CONSUME_GM_DEDUCT = 10034,
    CONSUME_ROGUE_ENHANCE_CARD = 10035,
    CONSUME_ROGUE_ACTIVATE_TALENT = 10036,
    CONSUME_ROGUE_REVIVE_CARD = 10037,
    CONSUME_ROGUE_AUTO_CLEAN = 10038,
    CONSUME_ROGUE_BUY_TREASURE = 10039,
    CONSUME_ROGUE_RESET_SHOP = 10040,
    CONSUME_ROGUE_RECRUIT = 10041,
    CONSUME_ROGUE_EVENT_STORY = 10042,
    CONSUME_RECHARGE_REFUND_DEDUCT = 10050,
    CONSUME_GUILD_WAR_SKILL_LEVELUP = 10051,
    CONSUME_DISPATCH_EXTRA = 10052,
    CONSUME_GUILD_WAR_SEASON_RESET = 10053,
    CONSUME_WEAR_SEAL = 10054,
    CONSUME_SEAL_COMPOSITE = 10055,
    CONSUME_ACTIVITY_TURNTABLE = 10056,
    CONSUME_ACTIVITY_REVIEW = 10057,
    CONSUME_SEAL_BIG_LEVELUP = 10058,
    CONSUME_SEAL_BIG_QUALITY_UP = 10059,
    CONSUME_SEAL_BIG_ADD_UP = 10060,
    CONSUME_SEAL_HOOK_FAST_COLLECT = 10061,
    GAIN_ROLE_INITIAL = 20001,
    GAIN_AUTO_RECOVER = 20002,
    GAIN_MAIN_LINE_STAGE = 20003,
    GAIN_MAIL_ATTACHMENT = 20004,
    GAIN_BUY_ENERGY = 20005,
    GAIN_BUY_SHOP_GOODS = 20007,
    GAIN_USE_PACKAGE = 20009,
    GAIN_BATTLEPASS_REWARD = 20010,
    GAIN_TASK_REWARD = 20011,
    GAIN_GACHA_REWARD = 20013,
    GAIN_EXCHANGE_ITEM = 20014,
    GAIN_BUY_BATTLEPASS_LV = 20015,
    GAIN_REWARD_ARENA_TASK = 20019,
    GAIN_REWARD_CARNIVAL = 20020,
    GAIN_PURCHASE_BUY = 20022,
    GAIN_MONTHCARD_REWARD = 20023,
    GAIN_CHAPTER_REWARD = 20024,
    GAIN_FETCH_STAGE_REWARD = 20025,
    GAIN_ACTIVITY_SIGNIN = 20026,
    GAIN_ACTIVITY_SHOP = 20027,
    GAIN_ACTIVITY_TASK = 20028,
    GAIN_ACTIVITY_MINIGAME = 20029,
    GAIN_PLANT_FLOWER_REWARD = 20032,
    GAIN_FINISH_PLOT = 20033,
    GAIN_ACTIVITY_SEARCH = 20034,
    GAIN_EXCHANGE_ENERGY = 20035,
    GAIN_PROCESS_MANOR_EVENT = 20036,
    GAIN_CLI_GM = 20037,
    GAIN_GACHA_EXCHANGE = 20038,
    GAIN_GACHA_EXTRA = 20039,
    GAIN_BATCH_USE_ITEMS = 20040,
    GAIN_NORMAL_SIGNIN = 20041,
    GAIN_SALE_ITEM = 20042,
    GAIN_PLAYER_LEVELUP_REWARD = 20043,
    GAIN_BUY_GIFT_PACKAGE = 20044,
    GAIN_DECOMPOSE_BADGE = 20045,
    GAIN_BADGE_LEVELUP_RETURN = 20046,
    GAIN_EXPEDITION_REWARD = 20047,
    GAIN_GIFT_REWARD = 20048,
    GAIN_ACTIVITY_TRANS = 20049,
    GAIN_ACTIVITY_STAGE = 20050,
    GAIN_DAILY_SUPPLY = 20051,
    GAIN_BOSS_CHAllENGE_FIGHT = 20052,
    GAIN_BUFF_STAGE_REWARD = 20053,
    GAIN_ROGUE_NODE_REWARD_OPTION = 20054,
    GAIN_ROGUE_THEME_LEVEL_REWARD = 20055,
    GAIN_ROGUE_NEW_GAME = 20056,
    GAIN_ROGUE_ENTER_NODE_REWARD = 20057,
    GAIN_ROGUE_ENTER_NEW_LAYER_REWARD = 20058,
    GAIN_ROGUE_TREASURE_EFFECT_REWARD = 20059,
    GAIN_ROGUE_SETTLE_REWARD = 20060,
    GAIN_USE_EXCHANGE_CODE = 20061,
    GAIN_AGREEMENT_REWARD = 20062,
    GAIN_DISPATCH_REWARD = 20063,
    GAIN_DISPATCH_CANCEL_RETURN = 20064,
    GAIN_RETURN_SIGN_IN = 20070,
    GAIN_SEAL_TAKE_OFF = 20071,
    GAIN_SEAL_COMPOSITE = 20072,
    GAIN_WEEK_ACCUM_PAY = 20073,
    GAIN_ACTIVITY_TURNTABLE = 20074,
    GAIN_SEAL_BIG_HOOK = 20075,
    GAIN_ACCUM_RECHARGE_REWARD = 20076,
    GAIN_CARD_HAND_BOOK_REWARD = 21001
  },
  EVENT_TYPE = {
    ET_CARD_UPDATE = 1,
    ET_IM_NEW_MESSAGE = 2,
    ET_ITEM_CHANGED = 3,
    ET_RELATION_CHANGED = 4,
    ET_NEW_MAIL = 5,
    ET_KICK_OFF = 6,
    ET_MUTED_BY_SYSTEM = 7,
    ET_ACTOR_UPDATE = 8,
    ET_NEW_BADGE = 9,
    ET_RELATION_DEL_APPLICANT = 10,
    ET_MANOR_EVENT = 12,
    ET_GUILD_EVENT = 13,
    ET_MANOR_CONVEY = 14,
    ET_MANOR_INFO_UPDATE = 15,
    ET_BUY_BATTLEPASS_SUCCESS = 16,
    ET_BOSS_CHALLENGE_HIGH_SCORE = 17,
    ET_ROGUE_CARD_UPDATE = 18,
    ET_FASHION_ADD = 19
  }
}
setmetatable(Proto.MsgName, {
  __index = function(t, k)
    printError("访问了MsgName不存在的key:" .. k)
  end
})
setmetatable(Proto.MsgIdByName, {
  __index = function(t, k)
    printError("访问了MsgIdByName不存在的key:" .. k)
  end
})
setmetatable(Proto.MsgNameByID, {
  __index = function(t, k)
    printError("访问了MsgIdByName不存在的key:" .. k)
  end
})
setmetatable(Proto.EventMsgNameByID, {
  __index = function(t, k)
    printError("访问了EventMsgNameByID不存在的key:" .. k)
  end
})
return Proto
